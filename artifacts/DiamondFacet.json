{
  "contractName": "DiamondFacet",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "_diamondCut",
          "type": "bytes[]"
        }
      ],
      "name": "DiamondCut",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "_diamondCut",
          "type": "bytes[]"
        }
      ],
      "name": "diamondCut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x608060405234801561001057600080fd5b5061094a806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806399f5f52e14610030575b600080fd5b61004361003e36600461069b565b610045565b005b600061004f6105d9565b805490915073ffffffffffffffffffffffffffffffffffffffff1633146100915760405162461bcd60e51b8152600401610088906107eb565b60405180910390fd5b6100996105fd565b60038201548082526fffffffffffffffffffffffffffffffff81169060801c80156100d7576000828152600285016020908152604090912054908401525b60005b85518110156105525760608682815181106100f157fe5b60200260200101519050601481511161011c5760405162461bcd60e51b81526004016100889061087f565b602081015181516bffffffffffffffffffffffff1982169060047fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec90910104603482156103185760005b8281101561031257858201516001600160e01b03198116600090815260018d016020526040902054600490930192806102a75760018c60a00190151590811515815250508a60001b60408b60001b901b8717178d6001016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000208190555089602002827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c8a6020026001600160e01b031960001b901c198d6020015116178c602001818152505089806001019a505089600814156102a2578b602001518d60020160008d8152602001908152602001600020819055506000801b8c6020018181525050600099508a806001019b50505b610308565b6bffffffffffffffffffffffff1981811690871614156102d95760405162461bcd60e51b8152600401610088906108b6565b6001600160e01b03198216600090815260018e01602052604090206bffffffffffffffffffffffff8216871790555b5050600101610166565b50610541565b600160a08a015260005b8281101561053f57858201516001600160e01b03198116600090815260018d0160205260409020546004909301928061036d5760405162461bcd60e51b815260040161008890610822565b60208c015161039a57600019909a01600081815260028e016020908152604090912054908d015299600899505b67ffffffffffffffff811660408d810182905282901c63ffffffff1660608e01526020808e01516000198d019091021b908c14610475578d60020160008e604001518152602001908152602001600020548d60800181815250508c60600151602002817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c8d606001516020026001600160e01b031960001b901c198e6080015116178d60800181815250508c608001518e60020160008f604001518152602001908152602001600020819055508a80600190039b50506104a7565b60608d01516020808f0180516001600160e01b03199290930282811c199390931691841690921c179052600019909a01995b8a6104c55760008c815260028f016020908152604082208290558e01525b6001600160e01b031981811690841614610518576001600160e01b03198116600090815260018f016020526040902080546bffffffffffffffffffffffff19166bffffffffffffffffffffffff84161790555b50506001600160e01b03191660009081526001808d01602052604082209190915501610322565b505b5050600190930192506100da915050565b508251608082901b831790811461056b57600385018190555b8360a00151801561057c5750600082115b1561059a576020808501516000858152600288019092526040909120555b7f6ace155508eb66f4d8afce32f392ee3b0a8ab3c0133964f1f3c613e497da45fe866040516105c99190610736565b60405180910390a1505050505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b600082601f830112610642578081fd5b813567ffffffffffffffff811115610658578182fd5b61066b6020601f19601f840116016108ed565b915080825283602082850101111561068257600080fd5b8060208401602084013760009082016020015292915050565b600060208083850312156106ad578182fd5b823567ffffffffffffffff808211156106c4578384fd5b81850186601f8201126106d5578485fd5b80359250818311156106e5578485fd5b6106f284858502016108ed565b8381528481019250818501865b85811015610728576107168a888435870101610632565b855293860193908601906001016106ff565b509098975050505050505050565b6000602080830181845280855180835260408601915060408482028701019250838701855b828110156107de577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc088860301845281518051808752885b818110156107ae578281018901518882018a01528801610793565b818111156107be578989838a0101525b50601f01601f19169590950186019450928501929085019060010161075b565b5092979650505050505050565b60208082526016908201527f4d757374206f776e2074686520636f6e74726163742e00000000000000000000604082015260600190565b60208082526025908201527f46756e6374696f6e20646f65736e27742065786973742e2043616e277420726560408201527f6d6f76652e000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f4d697373696e67206661636574206f722073656c6563746f7220696e666f2e00604082015260600190565b6020808252601b908201527f46756e6374696f6e2063757420746f2073616d652066616365742e0000000000604082015260600190565b60405181810167ffffffffffffffff8111828210171561090c57600080fd5b60405291905056fea264697066735822122034c2755f229335f7660a3ce1dbed58d9481f76e5ea33830cb732ee6a5eb62e7764736f6c63430006050033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806399f5f52e14610030575b600080fd5b61004361003e36600461069b565b610045565b005b600061004f6105d9565b805490915073ffffffffffffffffffffffffffffffffffffffff1633146100915760405162461bcd60e51b8152600401610088906107eb565b60405180910390fd5b6100996105fd565b60038201548082526fffffffffffffffffffffffffffffffff81169060801c80156100d7576000828152600285016020908152604090912054908401525b60005b85518110156105525760608682815181106100f157fe5b60200260200101519050601481511161011c5760405162461bcd60e51b81526004016100889061087f565b602081015181516bffffffffffffffffffffffff1982169060047fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec90910104603482156103185760005b8281101561031257858201516001600160e01b03198116600090815260018d016020526040902054600490930192806102a75760018c60a00190151590811515815250508a60001b60408b60001b901b8717178d6001016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000208190555089602002827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c8a6020026001600160e01b031960001b901c198d6020015116178c602001818152505089806001019a505089600814156102a2578b602001518d60020160008d8152602001908152602001600020819055506000801b8c6020018181525050600099508a806001019b50505b610308565b6bffffffffffffffffffffffff1981811690871614156102d95760405162461bcd60e51b8152600401610088906108b6565b6001600160e01b03198216600090815260018e01602052604090206bffffffffffffffffffffffff8216871790555b5050600101610166565b50610541565b600160a08a015260005b8281101561053f57858201516001600160e01b03198116600090815260018d0160205260409020546004909301928061036d5760405162461bcd60e51b815260040161008890610822565b60208c015161039a57600019909a01600081815260028e016020908152604090912054908d015299600899505b67ffffffffffffffff811660408d810182905282901c63ffffffff1660608e01526020808e01516000198d019091021b908c14610475578d60020160008e604001518152602001908152602001600020548d60800181815250508c60600151602002817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c8d606001516020026001600160e01b031960001b901c198e6080015116178d60800181815250508c608001518e60020160008f604001518152602001908152602001600020819055508a80600190039b50506104a7565b60608d01516020808f0180516001600160e01b03199290930282811c199390931691841690921c179052600019909a01995b8a6104c55760008c815260028f016020908152604082208290558e01525b6001600160e01b031981811690841614610518576001600160e01b03198116600090815260018f016020526040902080546bffffffffffffffffffffffff19166bffffffffffffffffffffffff84161790555b50506001600160e01b03191660009081526001808d01602052604082209190915501610322565b505b5050600190930192506100da915050565b508251608082901b831790811461056b57600385018190555b8360a00151801561057c5750600082115b1561059a576020808501516000858152600288019092526040909120555b7f6ace155508eb66f4d8afce32f392ee3b0a8ab3c0133964f1f3c613e497da45fe866040516105c99190610736565b60405180910390a1505050505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b600082601f830112610642578081fd5b813567ffffffffffffffff811115610658578182fd5b61066b6020601f19601f840116016108ed565b915080825283602082850101111561068257600080fd5b8060208401602084013760009082016020015292915050565b600060208083850312156106ad578182fd5b823567ffffffffffffffff808211156106c4578384fd5b81850186601f8201126106d5578485fd5b80359250818311156106e5578485fd5b6106f284858502016108ed565b8381528481019250818501865b85811015610728576107168a888435870101610632565b855293860193908601906001016106ff565b509098975050505050505050565b6000602080830181845280855180835260408601915060408482028701019250838701855b828110156107de577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc088860301845281518051808752885b818110156107ae578281018901518882018a01528801610793565b818111156107be578989838a0101525b50601f01601f19169590950186019450928501929085019060010161075b565b5092979650505050505050565b60208082526016908201527f4d757374206f776e2074686520636f6e74726163742e00000000000000000000604082015260600190565b60208082526025908201527f46756e6374696f6e20646f65736e27742065786973742e2043616e277420726560408201527f6d6f76652e000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f4d697373696e67206661636574206f722073656c6563746f7220696e666f2e00604082015260600190565b6020808252601b908201527f46756e6374696f6e2063757420746f2073616d652066616365742e0000000000604082015260600190565b60405181810167ffffffffffffffff8111828210171561090c57600080fd5b60405291905056fea264697066735822122034c2755f229335f7660a3ce1dbed58d9481f76e5ea33830cb732ee6a5eb62e7764736f6c63430006050033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "metadata": "{\"compiler\":{\"version\":\"0.6.5+commit.f956cc89\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"_diamondCut\",\"type\":\"bytes[]\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_diamondCut\",\"type\":\"bytes[]\"}],\"name\":\"diamondCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"solc_0.6/proxy/diamond/DiamondFacet.sol\":\"DiamondFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"solc_0.6/proxy/diamond/DiamondFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.4;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge\\n* from https://github.com/mudgen/Diamond/blob/ca15562a2858a4a4696526b1f6b18a4adef10617/contracts/\\n*\\n* Implementation of Diamond facet.\\n* This is gas optimized by reducing storage reads and storage writes.\\n* This code is as complex as it is to reduce gas costs.\\n/******************************************************************************/\\n\\nimport \\\"./DiamondStorageContract.sol\\\";\\nimport \\\"./DiamondHeaders.sol\\\";\\n\\ncontract DiamondFacet is Diamond, DiamondStorageContract {\\n    bytes32 constant CLEAR_ADDRESS_MASK = 0x0000000000000000000000000000000000000000ffffffffffffffffffffffff;\\n    bytes32 constant CLEAR_SELECTOR_MASK = 0xffffffff00000000000000000000000000000000000000000000000000000000;\\n\\n    // This struct is used to prevent getting the error \\\"CompilerError: Stack too deep, try removing local variables.\\\"\\n    // See this article: https://medium.com/1milliondevs/compilererror-stack-too-deep-try-removing-local-variables-solved-a6bcecc16231\\n    struct SlotInfo {\\n        uint originalSelectorSlotsLength;\\n        bytes32 selectorSlot;\\n        uint oldSelectorSlotsIndex;\\n        uint oldSelectorSlotIndex;\\n        bytes32 oldSelectorSlot;\\n        bool updateLastSlot;\\n    }\\n\\n    function diamondCut(bytes[] memory _diamondCut) public override {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(msg.sender == ds.contractOwner, \\\"Must own the contract.\\\");\\n        SlotInfo memory slot;\\n        slot.originalSelectorSlotsLength = ds.selectorSlotsLength;\\n        uint selectorSlotsLength = uint128(slot.originalSelectorSlotsLength);\\n        uint selectorSlotLength = uint128(slot.originalSelectorSlotsLength >> 128);\\n        if(selectorSlotLength > 0) {\\n            slot.selectorSlot = ds.selectorSlots[selectorSlotsLength];\\n        }\\n        // loop through diamond cut\\n        for(uint diamondCutIndex; diamondCutIndex < _diamondCut.length; diamondCutIndex++) {\\n            bytes memory facetCut = _diamondCut[diamondCutIndex];\\n            require(facetCut.length > 20, \\\"Missing facet or selector info.\\\");\\n            bytes32 currentSlot;\\n            assembly {\\n                currentSlot := mload(add(facetCut,32))\\n            }\\n            bytes32 newFacet = bytes20(currentSlot);\\n            uint numSelectors = (facetCut.length - 20) / 4;\\n            uint position = 52;\\n\\n            // adding or replacing functions\\n            if(newFacet != 0) {                \\n                // add and replace selectors\\n                for(uint selectorIndex; selectorIndex < numSelectors; selectorIndex++) {\\n                    bytes4 selector;\\n                    assembly {\\n                        selector := mload(add(facetCut,position))\\n                    }\\n                    position += 4;\\n                    bytes32 oldFacet = ds.facets[selector];\\n                    // add\\n                    if(oldFacet == 0) {\\n                        // update the last slot at then end of the function\\n                        slot.updateLastSlot = true;\\n                        ds.facets[selector] = newFacet | bytes32(selectorSlotLength) << 64 | bytes32(selectorSlotsLength);\\n                        // clear selector position in slot and add selector\\n                        slot.selectorSlot = slot.selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorSlotLength * 32) | bytes32(selector) >> selectorSlotLength * 32;\\n                        selectorSlotLength++;\\n                        // if slot is full then write it to storage\\n                        if(selectorSlotLength == 8) {\\n                            ds.selectorSlots[selectorSlotsLength] = slot.selectorSlot;\\n                            slot.selectorSlot = 0;\\n                            selectorSlotLength = 0;\\n                            selectorSlotsLength++;\\n                        }\\n                    }\\n                    // replace\\n                    else {\\n                        require(bytes20(oldFacet) != bytes20(newFacet), \\\"Function cut to same facet.\\\");\\n                        // replace old facet address\\n                        ds.facets[selector] = oldFacet & CLEAR_ADDRESS_MASK | newFacet;\\n                    }\\n                }\\n            }\\n            // remove functions\\n            else {\\n                slot.updateLastSlot = true;\\n                for(uint selectorIndex; selectorIndex < numSelectors; selectorIndex++) {\\n                    bytes4 selector;\\n                    assembly {\\n                        selector := mload(add(facetCut,position))\\n                    }\\n                    position += 4;\\n                    bytes32 oldFacet = ds.facets[selector];\\n                    require(oldFacet != 0, \\\"Function doesn't exist. Can't remove.\\\");\\n                    // Current slot is empty so get the slot before it\\n                    if(slot.selectorSlot == 0) {\\n                        selectorSlotsLength--;\\n                        slot.selectorSlot = ds.selectorSlots[selectorSlotsLength];\\n                        selectorSlotLength = 8;\\n                    }\\n                    slot.oldSelectorSlotsIndex = uint64(uint(oldFacet));\\n                    slot.oldSelectorSlotIndex = uint32(uint(oldFacet >> 64));\\n                    // gets the last selector in the slot\\n                    bytes4 lastSelector = bytes4(slot.selectorSlot << (selectorSlotLength-1) * 32);\\n                    if(slot.oldSelectorSlotsIndex != selectorSlotsLength) {\\n                        slot.oldSelectorSlot = ds.selectorSlots[slot.oldSelectorSlotsIndex];\\n                        // clears the selector we are deleting and puts the last selector in its place.\\n                        slot.oldSelectorSlot = slot.oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> slot.oldSelectorSlotIndex * 32) | bytes32(lastSelector) >> slot.oldSelectorSlotIndex * 32;\\n                        // update storage with the modified slot\\n                        ds.selectorSlots[slot.oldSelectorSlotsIndex] = slot.oldSelectorSlot;\\n                        selectorSlotLength--;\\n                    }\\n                    else {\\n                        // clears the selector we are deleting and puts the last selector in its place.\\n                        slot.selectorSlot = slot.selectorSlot & ~(CLEAR_SELECTOR_MASK >> slot.oldSelectorSlotIndex * 32) | bytes32(lastSelector) >> slot.oldSelectorSlotIndex * 32;\\n                        selectorSlotLength--;                        \\n                    }\\n                    if(selectorSlotLength == 0) {\\n                        delete ds.selectorSlots[selectorSlotsLength];\\n                        slot.selectorSlot = 0;                        \\n                    }\\n                    if(lastSelector != selector) {\\n                        // update last selector slot position info\\n                        ds.facets[lastSelector] = oldFacet & CLEAR_ADDRESS_MASK | bytes20(ds.facets[lastSelector]);\\n                    }\\n                    delete ds.facets[selector];\\n                }\\n            }\\n        }\\n        uint newSelectorSlotsLength = selectorSlotLength << 128 | selectorSlotsLength;\\n        if(newSelectorSlotsLength != slot.originalSelectorSlotsLength) {\\n            ds.selectorSlotsLength = newSelectorSlotsLength;\\n        }\\n        if(slot.updateLastSlot && selectorSlotLength > 0) {\\n            ds.selectorSlots[selectorSlotsLength] = slot.selectorSlot;\\n        }\\n        emit DiamondCut(_diamondCut);\\n    }\\n}\\n\",\"keccak256\":\"0x867d27a7d3f2720f8287c7378ee620f92708af6f14e4d65b457d7d80a28d7505\"},\"solc_0.6/proxy/diamond/DiamondHeaders.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.4;\\npragma experimental ABIEncoderV2;\\n\\n// * from https://github.com/mudgen/Diamond/blob/ca15562a2858a4a4696526b1f6b18a4adef10617/contracts/\\n\\ninterface Diamond {\\n    /// @notice _diamondCut is an array of bytes arrays.\\n    /// This argument is tightly packed for gas efficiency.\\n    /// That means no padding with zeros.\\n    /// Here is the structure of _diamondCut:\\n    /// _diamondCut = [\\n    ///     abi.encodePacked(facet, sel1, sel2, sel3, ...),\\n    ///     abi.encodePacked(facet, sel1, sel2, sel4, ...),\\n    ///     ...\\n    /// ]\\n    /// facet is the address of a facet\\n    /// sel1, sel2, sel3 etc. are four-byte function selectors.\\n    function diamondCut(bytes[] calldata _diamondCut) external;\\n\\n    event DiamondCut(bytes[] _diamondCut);\\n}\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface DiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools. Therefore the return values are tightly\\n    /// packed for efficiency. That means no padding with zeros.\\n\\n    /// @notice Gets all facets and their selectors.\\n    /// @return An array of bytes arrays containing each facet\\n    ///         and each facet's selectors.\\n    /// The return value is tightly packed.\\n    /// Here is the structure of the return value:\\n    /// returnValue = [\\n    ///     abi.encodePacked(facet, sel1, sel2, sel3, ...),\\n    ///     abi.encodePacked(facet, sel1, sel2, sel3, ...),\\n    ///     ...\\n    /// ]\\n    /// facet is the address of a facet.\\n    /// sel1, sel2, sel3 etc. are four-byte function selectors.\\n    function facets() external view returns (bytes[] memory);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return A byte array of function selectors.\\n    /// The return value is tightly packed. Here is an example:\\n    /// return abi.encodePacked(selector1, selector2, selector3, ...)\\n    function facetFunctionSelectors(address _facet)\\n        external\\n        view\\n        returns (bytes memory);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return A byte array of tightly packed facet addresses.\\n    /// Example return value:\\n    /// return abi.encodePacked(facet1, facet2, facet3, ...)\\n    function facetAddresses() external view returns (bytes memory);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return The facet address.\\n    function facetAddress(bytes4 _functionSelector)\\n        external\\n        view\\n        returns (address);\\n}\\n\\ninterface ERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceID The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x43c64e4e226daebea90ba476426d59e768acc70dcd4f85f08efbcdde368998c9\"},\"solc_0.6/proxy/diamond/DiamondStorageContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.4;\\n\\n// * from https://github.com/mudgen/Diamond/blob/ca15562a2858a4a4696526b1f6b18a4adef10617/contracts/\\n\\ncontract DiamondStorageContract {\\n    struct DiamondStorage {\\n        // owner of the contract\\n        address contractOwner;\\n        // maps function selectors to the facets that execute the functions.\\n        // and maps the selectors to the slot in the selectorSlots array.\\n        // and maps the selectors to the position in the slot.\\n        // func selector => address facet, uint32 slotIndex, uint64 slotsIndex\\n        mapping(bytes4 => bytes32) facets;\\n        // array of slots of function selectors.\\n        // each slot holds 8 function selectors.\\n        mapping(uint256 => bytes32) selectorSlots;\\n        // uint32 selectorSlotLength, uint32 selectorSlotsLength\\n        // selectorSlotsLength is the number of 32-byte slots in selectorSlots.\\n        // selectorSlotLength is the number of selectors in the last slot of\\n        // selectorSlots.\\n        uint256 selectorSlotsLength;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        // ds_slot = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n        assembly {\\n            ds_slot := 0xc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x626daf4e7c071a662567c0bdf8a2488d3a194898c9e013e32b626b2519cea044\"}},\"version\":1}",
  "contractFilepath": "solc_0.6/proxy/diamond/DiamondFacet.sol"
}