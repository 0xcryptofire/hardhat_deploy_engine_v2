{
  "contractName": "DiamondBase",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "bytecode": "0x608060405234801561001057600080fd5b506040516123d43803806123d483398101604081905261002f91610407565b60006100426001600160e01b036103bc16565b80546001600160a01b0319166001600160a01b0384169081178255604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3600060405161009a906103e0565b604051809103906000f0801580156100b6573d6000803e3d6000fd5b50905060006040516100c7906103ed565b604051809103906000f0801580156100e3573d6000803e3d6000fd5b50905060006040516100f4906103fa565b604051809103906000f080158015610110573d6000803e3d6000fd5b5060408051600480825260a0820190925291925060609190816020015b606081526020019060019003908161012d57505060405190915061015e908590634cfafa9760e11b90602001610435565b6040516020818303038152906040528160008151811061017a57fe5b6020908102919091018101919091526040516101bc9185916356fe50af60e11b91637a0ed62760e01b916366ffd66360e11b916314bbdacb60e21b9101610478565b604051602081830303815290604052816001815181106101d857fe5b60200260200101819052508163f2fde38b60e01b638da5cb5b60e01b604051602001610206939291906104b6565b6040516020818303038152906040528160028151811061022257fe5b6020026020010181905250306301ffc9a760e01b604051602001610247929190610435565b6040516020818303038152906040528160038151811061026357fe5b602002602001018190525060606399f5f52e60e01b8260405160240161028991906104e5565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b03838183161783525050505090506000856001600160a01b0316826040516102d8919061045c565b600060405180830381855af49150503d8060008114610313576040519150601f19603f3d011682016040523d82523d6000602084013e610318565b606091505b50509050806103425760405162461bcd60e51b81526004016103399061055d565b60405180910390fd5b50506301ffc9a760e01b6000908152600490950160205250506040808420805460ff199081166001908117909255634cfafa9760e11b865282862080548216831790556348e2b09360e01b865282862080548216831790556307f5828d60e41b8652919094208054909116909317909255506105c4915050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b6109638061088983390190565b610f9f806111ec83390190565b6102498061218b83390190565b600060208284031215610418578081fd5b81516001600160a01b038116811461042e578182fd5b9392505050565b60609290921b6001600160601b03191682526001600160e01b031916601482015260180190565b6000825161046e818460208701610594565b9190910192915050565b60609590951b6001600160601b03191685526001600160e01b0319938416601486015291831660188501528216601c84015216602082015260240190565b60609390931b6001600160601b03191683526001600160e01b03199182166014840152166018820152601c0190565b6000602080830181845280855180835260408601915060408482028701019250838701855b8281101561055057878503603f1901845281518051808752610531818989018a8501610594565b601f01601f19169590950186019450928501929085019060010161050a565b5092979650505050505050565b60208082526018908201527f416464696e672066756e6374696f6e73206661696c65642e0000000000000000604082015260600190565b60005b838110156105af578181015183820152602001610597565b838111156105be576000848401525b50505050565b6102b6806105d36000396000f3fe6080604052600436106100225760003560e01c806301ffc9a71461013457610062565b36610062576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161005990610249565b60405180910390fd5b600080357fffffffff000000000000000000000000000000000000000000000000000000001681527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d60205260409020547fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c9060601c8061010f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161005990610212565b60405136600082376000803683855af43d806000843e818015610130578184f35b8184fd5b34801561014057600080fd5b5061015461014f3660046101c0565b61016a565b6040516101619190610207565b60405180910390f35b7fffffffff000000000000000000000000000000000000000000000000000000001660009081527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320602052604090205460ff1690565b6000602082840312156101d1578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610200578182fd5b9392505050565b901515815260200190565b60208082526018908201527f46756e6374696f6e20646f6573206e6f742065786973742e0000000000000000604082015260600190565b6020808252600a908201527f444154415f454d5054590000000000000000000000000000000000000000000060408201526060019056fea264697066735822122088943032b0891583c9f39e5df8ff4ffcadbac7c865d133160714797b23326c2564736f6c63430006050033608060405234801561001057600080fd5b50610943806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806399f5f52e14610030575b600080fd5b61004361003e366004610694565b610045565b005b600061004f6105d2565b805490915073ffffffffffffffffffffffffffffffffffffffff1633146100915760405162461bcd60e51b8152600401610088906107e4565b60405180910390fd5b6100996105f6565b60038201548082526fffffffffffffffffffffffffffffffff81169060801c80156100d7576000828152600285016020908152604090912054908401525b60005b85518110156105575760608682815181106100f157fe5b60200260200101519050601481511161011c5760405162461bcd60e51b815260040161008890610878565b602081015181516bffffffffffffffffffffffff1982169060047fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec90910104603482156103245760005b8281101561031e57858201516001600160e01b03198116600090815260018d016020526040902054600490930192806102b3578a60001b60408b60001b901b8717178d6001016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000208190555089602002827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c8a6020026001600160e01b031960001b901c198d6020015116178c602001818152505089806001019a505089600814156102a6578b602001518d60020160008d8152602001908152602001600020819055506000801b8c6020018181525050600099508a806001019b505060008c60a00190151590811515815250506102ae565b600160a08d01525b610314565b6bffffffffffffffffffffffff1981811690871614156102e55760405162461bcd60e51b8152600401610088906108af565b6001600160e01b03198216600090815260018e01602052604090206bffffffffffffffffffffffff8216871790555b5050600101610166565b50610546565b60005b8281101561054457858201516001600160e01b03198116600090815260018d016020526040902054600490930192806103725760405162461bcd60e51b81526004016100889061081b565b60208c015161039f57600019909a01600081815260028e016020908152604090912054908d015299600899505b67ffffffffffffffff811660408d810182905282901c63ffffffff1660608e01526020808e01516000198d019091021b908c1461047a578d60020160008e604001518152602001908152602001600020548d60800181815250508c60600151602002817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c8d606001516020026001600160e01b031960001b901c198e6080015116178d60800181815250508c608001518e60020160008f604001518152602001908152602001600020819055508a80600190039b50506104ac565b60608d01516020808f0180516001600160e01b03199290930282811c199390931691841690921c179052600019909a01995b8a6104ca5760008c815260028f016020908152604082208290558e01525b6001600160e01b03198181169084161461051d576001600160e01b03198116600090815260018f016020526040902080546bffffffffffffffffffffffff19166bffffffffffffffffffffffff84161790555b50506001600160e01b03191660009081526001808d01602052604082209190915501610327565b505b5050600190930192506100da915050565b508251608082901b831790811461057057600385018190555b8360a0015115610593576020808501516000858152600288019092526040909120555b7f6ace155508eb66f4d8afce32f392ee3b0a8ab3c0133964f1f3c613e497da45fe866040516105c2919061072f565b60405180910390a1505050505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b600082601f83011261063b578081fd5b813567ffffffffffffffff811115610651578182fd5b6106646020601f19601f840116016108e6565b915080825283602082850101111561067b57600080fd5b8060208401602084013760009082016020015292915050565b600060208083850312156106a6578182fd5b823567ffffffffffffffff808211156106bd578384fd5b81850186601f8201126106ce578485fd5b80359250818311156106de578485fd5b6106eb84858502016108e6565b8381528481019250818501865b858110156107215761070f8a88843587010161062b565b855293860193908601906001016106f8565b509098975050505050505050565b6000602080830181845280855180835260408601915060408482028701019250838701855b828110156107d7577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc088860301845281518051808752885b818110156107a7578281018901518882018a0152880161078c565b818111156107b7578989838a0101525b50601f01601f191695909501860194509285019290850190600101610754565b5092979650505050505050565b60208082526016908201527f4d757374206f776e2074686520636f6e74726163742e00000000000000000000604082015260600190565b60208082526025908201527f46756e6374696f6e20646f65736e27742065786973742e2043616e277420726560408201527f6d6f76652e000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f4d697373696e67206661636574206f722073656c6563746f7220696e666f2e00604082015260600190565b6020808252601b908201527f46756e6374696f6e2063757420746f2073616d652066616365742e0000000000604082015260600190565b60405181810167ffffffffffffffff8111828210171561090557600080fd5b60405291905056fea2646970667358221220e44adf2b686d84cbdc8e496c4e13897edc80ccc13f692deb734a10f9df5b538664736f6c63430006050033608060405234801561001057600080fd5b50610f7f806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806352ef6b2c146100515780637a0ed6271461006f578063adfca15e14610084578063cdffacc614610097575b600080fd5b6100596100b7565b6040516100669190610f06565b60405180910390f35b61007761034f565b6040516100669190610e88565b610059610092366004610d6f565b610ad1565b6100aa6100a5366004610daa565b610d00565b6040516100669190610e67565b606060006100c3610d33565b60038101549091506fffffffffffffffffffffffffffffffff81169060801c60088202810181156100f5576001909201915b60608167ffffffffffffffff8111801561010e57600080fd5b50604051908082528060200260200182016040528015610138578160200160208202803683370190505b50905060008060005b84821015610261576000818152600289016020526040812054905b6008811015610257576001909301928684111561017857610257565b6001600160e01b0319602080830284901b918216600090815260018d01909152604081205460601c90805b88811015610203578981815181106101b757fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156101fb5760019150610203565b6001016101a3565b508015610213575061024f915050565b8189898151811061022057fe5b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101525050600190950194505b60010161015c565b5050600101610141565b5060608260140267ffffffffffffffff8111801561027e57600080fd5b506040519080825280601f01601f1916602001820160405280156102a9576020820181803683370190505b5090506000805b848110156103405760005b601481101561033757806008028783815181106102d457fe5b602002602001015160601b6bffffffffffffffffffffffff1916901b8484815181106102fc57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600192830192016102bb565b506001016102b0565b50909850505050505050505090565b6060600061035b610d33565b60038101549091506fffffffffffffffffffffffffffffffff81169060801c600882028101811561038d576001909201915b80601481111561039b575060145b60608167ffffffffffffffff811180156103b457600080fd5b506040519080825280602002602001820160405280156103ee57816020015b6103db610d57565b8152602001906001900390816103d35790505b50905060608267ffffffffffffffff8111801561040a57600080fd5b50604051908082528060200260200182016040528015610434578160200160208202803683370190505b50905060008060005b868210156108f757600081815260028b016020526040812054905b60088110156108ed5760019093019288841115610474576108ed565b6001600160e01b0319602080830284901b918216600090815260018f01909152604081205460601c90805b888110156106b0578273ffffffffffffffffffffffffffffffffffffffff168b82815181106104ca57fe5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1614156106a85760008b828151811061050057fe5b602002602001015160200151519050808b838151811061051c57fe5b602002602001015160010160ff1611156105fa5760608d820167ffffffffffffffff8111801561054b57600080fd5b50604051908082528060200260200182016040528015610575578160200160208202803683370190505b50905060005b828110156105db578d848151811061058f57fe5b60200260200101516020015181815181106105a657fe5b60200260200101518282815181106105ba57fe5b6001600160e01b03199092166020928302919091019091015260010161057b565b50808d84815181106105e957fe5b602002602001015160200181905250505b848c838151811061060757fe5b6020026020010151602001518c848151811061061f57fe5b602002602001015160ff168151811061063457fe5b60200260200101906001600160e01b03191690816001600160e01b0319168152505060ff8b838151811061066457fe5b602002602001015160ff161061067957600080fd5b8a828151811061068557fe5b60200260200101805180919060010160ff1660ff168152505060019250506106b0565b60010161049f565b5080156106c057506108e5915050565b8951600189018110156107e45760608c820167ffffffffffffffff811180156106e857600080fd5b5060405190808252806020026020018201604052801561072257816020015b61070f610d57565b8152602001906001900390816107075790505b50905060608d830167ffffffffffffffff8111801561074057600080fd5b5060405190808252806020026020018201604052801561076a578160200160208202803683370190505b50905060005b838110156107dd578d818151811061078457fe5b602002602001015183828151811061079857fe5b60200260200101819052508c81815181106107af57fe5b60200260200101518282815181106107c357fe5b60ff90921660209283029190910190910152600101610770565b50909b5099505b828b8a815181106107f157fe5b602090810291909101015173ffffffffffffffffffffffffffffffffffffffff90911690528b67ffffffffffffffff8111801561082d57600080fd5b50604051908082528060200260200182016040528015610857578160200160208202803683370190505b508b8a8151811061086457fe5b602002602001015160200181905250838b8a8151811061088057fe5b60200260200101516020015160008151811061089857fe5b60200260200101906001600160e01b03191690816001600160e01b0319168152505060018a8a815181106108c857fe5b60ff90921660209283029190910190910152505060019096019550505b600101610458565b505060010161043d565b5060608267ffffffffffffffff8111801561091157600080fd5b5060405190808252806020026020018201604052801561094557816020015b60608152602001906001900390816109305790505b50905060005b83811015610ac257600085828151811061096157fe5b602002602001015160ff16905060608160040267ffffffffffffffff8111801561098a57600080fd5b506040519080825280601f01601f1916602001820160405280156109b5576020820181803683370190505b50905060608884815181106109c657fe5b60200260200101516020015190506000805b84811015610a605760005b6004811015610a5757806008028483815181106109fc57fe5b60200260200101516001600160e01b031916901b858481518110610a1c57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600192830192016109e3565b506001016109d8565b50898581518110610a6d57fe5b60200260200101516000015183604051602001610a8b929190610e1c565b604051602081830303815290604052868681518110610aa657fe5b602002602001018190525050505050808060010191505061094b565b50995050505050505050505090565b60606000610add610d33565b60038101549091506fffffffffffffffffffffffffffffffff81169060801c6008820281018115610b0f576001909201915b600060608267ffffffffffffffff81118015610b2a57600080fd5b50604051908082528060200260200182016040528015610b54578160200160208202803683370190505b5090506000805b84821015610c19576000818152600289016020526040812054905b6008811015610c0f5760019093019286841115610b9257610c0f565b6001600160e01b0319602080830284901b918216600090815260018d01909152604090205460601c73ffffffffffffffffffffffffffffffffffffffff8e16811415610c055781878981518110610be557fe5b6001600160e01b0319909216602092830291909101909101526001909701965b5050600101610b76565b5050600101610b5b565b5060608360040267ffffffffffffffff81118015610c3657600080fd5b506040519080825280601f01601f191660200182016040528015610c61576020820181803683370190505b5090506000805b85811015610cf05760005b6004811015610ce75780600802868381518110610c8c57fe5b60200260200101516001600160e01b031916901b848481518110610cac57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060019283019201610c73565b50600101610c68565b50909a9950505050505050505050565b600080610d0b610d33565b6001600160e01b0319841660009081526001909101602052604090205460601c915050919050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b60408051808201909152600081526060602082015290565b600060208284031215610d80578081fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610da3578182fd5b9392505050565b600060208284031215610dbb578081fd5b81356001600160e01b031981168114610da3578182fd5b60008151808452610dea816020860160208601610f19565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60007fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008460601b1682528251610e59816014850160208701610f19565b919091016014019392505050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015610ef9577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452610ee7858351610dd2565b94509285019290850190600101610ead565b5092979650505050505050565b600060208252610da36020830184610dd2565b60005b83811015610f34578181015183820152602001610f1c565b83811115610f43576000848401525b5050505056fea2646970667358221220f0d1640512bf79e5f73a3ef31b66dbd001d5c525d8e0cfb0e8b06da9b180c78164736f6c63430006050033608060405234801561001057600080fd5b50610229806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80638da5cb5b1461003b578063f2fde38b1461006c575b600080fd5b6100436100a1565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61009f6004803603602081101561008257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166100c9565b005b6000806100ac6101cf565b5473ffffffffffffffffffffffffffffffffffffffff1691505090565b60006100d36101cf565b805490915073ffffffffffffffffffffffffffffffffffffffff1633811461015c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d757374206f776e2074686520636f6e74726163742e00000000000000000000604482015290519081900360640190fd5b81547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8481169182178455604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c9056fea264697066735822122052d5cc2e5fb88e8b85c84db3de3081be4a84b65cb80d98cd27ecf89a42574bf264736f6c63430006050033",
  "deployedBytecode": "0x6080604052600436106100225760003560e01c806301ffc9a71461013457610062565b36610062576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161005990610249565b60405180910390fd5b600080357fffffffff000000000000000000000000000000000000000000000000000000001681527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d60205260409020547fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c9060601c8061010f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161005990610212565b60405136600082376000803683855af43d806000843e818015610130578184f35b8184fd5b34801561014057600080fd5b5061015461014f3660046101c0565b61016a565b6040516101619190610207565b60405180910390f35b7fffffffff000000000000000000000000000000000000000000000000000000001660009081527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320602052604090205460ff1690565b6000602082840312156101d1578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610200578182fd5b9392505050565b901515815260200190565b60208082526018908201527f46756e6374696f6e20646f6573206e6f742065786973742e0000000000000000604082015260600190565b6020808252600a908201527f444154415f454d5054590000000000000000000000000000000000000000000060408201526060019056fea264697066735822122088943032b0891583c9f39e5df8ff4ffcadbac7c865d133160714797b23326c2564736f6c63430006050033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "metadata": "{\"compiler\":{\"version\":\"0.6.5+commit.f956cc89\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"solc_0.6/proxy/diamond/DiamondBase.sol\":\"DiamondBase\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"solc_0.6/proxy/diamond/DiamondBase.sol\":{\"content\":\"pragma solidity ^0.6.4;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge\\n* from https://github.com/mudgen/Diamond/blob/8235e6b63b47aab08a81c6f73bfb7faafda79ca4/contracts/\\n*\\n* slightly modified by Ronan Sandford\\n* modifications includes\\n* - formatting\\n* - rename to DiamondBase\\n* - allow to pass owner in constructor\\n* - reject on receive()\\n* - use ERC173Events for Ownership event\\n* - use OwnershipFacet for allowing owner to change owner\\n*\\n* Implementation of an example of a diamond.\\n/******************************************************************************/\\n\\nimport \\\"./ERC173.sol\\\";\\nimport \\\"./OwnershipFacet.sol\\\";\\nimport \\\"./DiamondStorageContract.sol\\\";\\nimport \\\"./DiamondHeaders.sol\\\";\\nimport \\\"./DiamondFacet.sol\\\";\\nimport \\\"./DiamondLoupeFacet.sol\\\";\\n\\ncontract DiamondBase is ERC173Events, DiamondStorageContract {\\n    constructor(address owner) public {\\n        DiamondStorage storage ds = diamondStorage();\\n        ds.contractOwner = owner;\\n        emit OwnershipTransferred(address(0), owner);\\n\\n        // Create a DiamondFacet contract which implements the Diamond interface\\n        DiamondFacet diamondFacet = new DiamondFacet();\\n\\n        // Create a DiamondLoupeFacet contract which implements the Diamond Loupe interface\\n        DiamondLoupeFacet diamondLoupeFacet = new DiamondLoupeFacet();\\n\\n        // Create a OwnershipFacet contract which implements the ERC-173 Ownership interface\\n        OwnershipFacet ownershipFacet = new OwnershipFacet();\\n\\n        bytes[] memory diamondCut = new bytes[](4);\\n\\n        // Adding cut function\\n        diamondCut[0] = abi.encodePacked(\\n            diamondFacet,\\n            Diamond.diamondCut.selector\\n        );\\n\\n        // Adding diamond loupe functions\\n        diamondCut[1] = abi.encodePacked(\\n            diamondLoupeFacet,\\n            DiamondLoupe.facetFunctionSelectors.selector,\\n            DiamondLoupe.facets.selector,\\n            DiamondLoupe.facetAddress.selector,\\n            DiamondLoupe.facetAddresses.selector\\n        );\\n\\n        // Adding diamond ERC173 functions\\n        diamondCut[2] = abi.encodePacked(\\n            ownershipFacet,\\n            ERC173.transferOwnership.selector,\\n            ERC173.owner.selector\\n        );\\n\\n        // Adding supportsInterface function\\n        diamondCut[3] = abi.encodePacked(\\n            address(this),\\n            ERC165.supportsInterface.selector\\n        );\\n\\n        // execute cut function\\n        bytes memory cutFunction = abi.encodeWithSelector(\\n            Diamond.diamondCut.selector,\\n            diamondCut\\n        );\\n        (bool success, ) = address(diamondFacet).delegatecall(cutFunction);\\n        require(success, \\\"Adding functions failed.\\\");\\n\\n        // adding ERC165 data\\n        // ERC165\\n        ds.supportedInterfaces[ERC165.supportsInterface.selector] = true;\\n\\n        // DiamondCut\\n        ds.supportedInterfaces[Diamond.diamondCut.selector] = true;\\n\\n        // DiamondLoupe\\n        bytes4 interfaceID = DiamondLoupe.facets.selector ^\\n            DiamondLoupe.facetFunctionSelectors.selector ^\\n            DiamondLoupe.facetAddresses.selector ^\\n            DiamondLoupe.facetAddress.selector;\\n        ds.supportedInterfaces[interfaceID] = true;\\n\\n        // ERC173\\n        ds.supportedInterfaces[ERC173.transferOwnership.selector ^\\n            ERC173.owner.selector] = true;\\n    }\\n\\n    // This is an immutable functions because it is defined directly in the diamond.\\n    // This implements ERC-165.\\n    function supportsInterface(bytes4 _interfaceID)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        DiamondStorage storage ds;\\n        assembly {\\n            ds_slot := 0xc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c\\n        }\\n        return ds.supportedInterfaces[_interfaceID];\\n    }\\n\\n    // Finds facet for function that is called and executes the\\n    // function if it is found and returns any value.\\n    fallback() external payable {\\n        DiamondStorage storage ds;\\n        assembly {\\n            ds_slot := 0xc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c\\n        }\\n        address facet = address(bytes20(ds.facets[msg.sig]));\\n        require(facet != address(0), \\\"Function does not exist.\\\");\\n        assembly {\\n            let ptr := mload(0x40)\\n            calldatacopy(ptr, 0, calldatasize())\\n            let result := delegatecall(gas(), facet, ptr, calldatasize(), 0, 0)\\n            let size := returndatasize()\\n            returndatacopy(ptr, 0, size)\\n            switch result\\n                case 0 {\\n                    revert(ptr, size)\\n                }\\n                default {\\n                    return(ptr, size)\\n                }\\n        }\\n    }\\n\\n    receive() external payable {\\n        revert(\\\"DATA_EMPTY\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xc177bb8d86ccbd0569cde08f41e26bc7d4c80ee0d031c6b39d59959e6818539f\"},\"solc_0.6/proxy/diamond/DiamondFacet.sol\":{\"content\":\"pragma solidity ^0.6.4;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge\\n* from https://github.com/mudgen/Diamond/blob/8235e6b63b47aab08a81c6f73bfb7faafda79ca4/contracts/\\n*\\n* Implementation of Diamond facet.\\n* This is gas optimized by reducing storage reads and storage writes.\\n/******************************************************************************/\\n\\nimport \\\"./DiamondStorageContract.sol\\\";\\nimport \\\"./DiamondHeaders.sol\\\";\\n\\ncontract DiamondFacet is Diamond, DiamondStorageContract {  \\n    bytes32 constant CLEAR_ADDRESS_MASK = 0x0000000000000000000000000000000000000000ffffffffffffffffffffffff;\\n    bytes32 constant CLEAR_SELECTOR_MASK = 0xffffffff00000000000000000000000000000000000000000000000000000000;\\n\\n    struct SlotInfo {\\n        uint originalSelectorSlotsLength;                \\n        bytes32 selectorSlot;\\n        uint oldSelectorSlotsIndex;\\n        uint oldSelectorSlotIndex;\\n        bytes32 oldSelectorSlot;\\n        bool newSlot;\\n    }\\n\\n    function diamondCut(bytes[] memory _diamondCut) public override {\\n        DiamondStorage storage ds = diamondStorage();      \\n        require(msg.sender == ds.contractOwner, \\\"Must own the contract.\\\");        \\n        SlotInfo memory slot;\\n        slot.originalSelectorSlotsLength = ds.selectorSlotsLength;\\n        uint selectorSlotsLength = uint128(slot.originalSelectorSlotsLength);\\n        uint selectorSlotLength = uint128(slot.originalSelectorSlotsLength >> 128);\\n        if(selectorSlotLength > 0) {\\n            slot.selectorSlot = ds.selectorSlots[selectorSlotsLength];\\n        }\\n        // loop through diamond cut        \\n        for(uint diamondCutIndex; diamondCutIndex < _diamondCut.length; diamondCutIndex++) {\\n            bytes memory facetCut = _diamondCut[diamondCutIndex];\\n            require(facetCut.length > 20, \\\"Missing facet or selector info.\\\");\\n            bytes32 currentSlot;            \\n            assembly { \\n                currentSlot := mload(add(facetCut,32)) \\n            }\\n            bytes32 newFacet = bytes20(currentSlot);            \\n            uint numSelectors = (facetCut.length - 20) / 4;\\n            uint position = 52;\\n            \\n            // adding or replacing functions\\n            if(newFacet != 0) {                \\n                // add and replace selectors\\n                for(uint selectorIndex; selectorIndex < numSelectors; selectorIndex++) {\\n                    bytes4 selector;\\n                    assembly { \\n                        selector := mload(add(facetCut,position)) \\n                    }\\n                    position += 4;                    \\n                    bytes32 oldFacet = ds.facets[selector];                    \\n                    // add\\n                    if(oldFacet == 0) {                            \\n                        ds.facets[selector] = newFacet | bytes32(selectorSlotLength) << 64 | bytes32(selectorSlotsLength);                            \\n                        slot.selectorSlot = slot.selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorSlotLength * 32) | bytes32(selector) >> selectorSlotLength * 32;                            \\n                        selectorSlotLength++;\\n                        if(selectorSlotLength == 8) {\\n                            ds.selectorSlots[selectorSlotsLength] = slot.selectorSlot;                                \\n                            slot.selectorSlot = 0;\\n                            selectorSlotLength = 0;\\n                            selectorSlotsLength++;\\n                            slot.newSlot = false;\\n                        }\\n                        else {\\n                            slot.newSlot = true;\\n                        }                          \\n                    }                    \\n                    // replace\\n                    else {\\n                        require(bytes20(oldFacet) != bytes20(newFacet), \\\"Function cut to same facet.\\\");\\n                        ds.facets[selector] = oldFacet & CLEAR_ADDRESS_MASK | newFacet;\\n                    }                                        \\n                }\\n            }\\n            // remove functions\\n            else {                \\n                for(uint selectorIndex; selectorIndex < numSelectors; selectorIndex++) {\\n                    bytes4 selector;\\n                    assembly { \\n                        selector := mload(add(facetCut,position)) \\n                    }\\n                    position += 4;                    \\n                    bytes32 oldFacet = ds.facets[selector];\\n                    require(oldFacet != 0, \\\"Function doesn't exist. Can't remove.\\\");\\n                    if(slot.selectorSlot == 0) {\\n                        selectorSlotsLength--;\\n                        slot.selectorSlot = ds.selectorSlots[selectorSlotsLength];\\n                        selectorSlotLength = 8;\\n                    }\\n                    slot.oldSelectorSlotsIndex = uint64(uint(oldFacet));\\n                    slot.oldSelectorSlotIndex = uint32(uint(oldFacet >> 64));                    \\n                    bytes4 lastSelector = bytes4(slot.selectorSlot << (selectorSlotLength-1) * 32);                     \\n                    if(slot.oldSelectorSlotsIndex != selectorSlotsLength) {\\n                        slot.oldSelectorSlot = ds.selectorSlots[slot.oldSelectorSlotsIndex];                            \\n                        slot.oldSelectorSlot = slot.oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> slot.oldSelectorSlotIndex * 32) | bytes32(lastSelector) >> slot.oldSelectorSlotIndex * 32;                                                \\n                        ds.selectorSlots[slot.oldSelectorSlotsIndex] = slot.oldSelectorSlot;                        \\n                        selectorSlotLength--;                            \\n                    }\\n                    else {\\n                        slot.selectorSlot = slot.selectorSlot & ~(CLEAR_SELECTOR_MASK >> slot.oldSelectorSlotIndex * 32) | bytes32(lastSelector) >> slot.oldSelectorSlotIndex * 32;\\n                        selectorSlotLength--;\\n                    }\\n                    if(selectorSlotLength == 0) {\\n                        delete ds.selectorSlots[selectorSlotsLength];                                                \\n                        slot.selectorSlot = 0;\\n                    }\\n                    if(lastSelector != selector) {                      \\n                        ds.facets[lastSelector] = oldFacet & CLEAR_ADDRESS_MASK | bytes20(ds.facets[lastSelector]); \\n                    }\\n                    delete ds.facets[selector];\\n                }\\n            }\\n        }\\n        uint newSelectorSlotsLength = selectorSlotLength << 128 | selectorSlotsLength;\\n        if(newSelectorSlotsLength != slot.originalSelectorSlotsLength) {\\n            ds.selectorSlotsLength = newSelectorSlotsLength;            \\n        }        \\n        if(slot.newSlot) {\\n            ds.selectorSlots[selectorSlotsLength] = slot.selectorSlot;                        \\n        }\\n        emit DiamondCut(_diamondCut);\\n    }\\n}\\n\",\"keccak256\":\"0x2f5cfeb013ff9c076a8a7de5f5b4c9c79c1c254da85df103624f5b7f4f32f3ef\"},\"solc_0.6/proxy/diamond/DiamondHeaders.sol\":{\"content\":\"pragma solidity ^0.6.4;\\npragma experimental ABIEncoderV2;\\n\\n// * from https://github.com/mudgen/Diamond/blob/8235e6b63b47aab08a81c6f73bfb7faafda79ca4/contracts/\\n\\ninterface Diamond {\\n    /// @notice _diamondCut is an array of bytes arrays.\\n    /// This argument is tightly packed for gas efficiency.\\n    /// That means no padding with zeros.\\n    /// Here is the structure of _diamondCut:\\n    /// _diamondCut = [\\n    ///     abi.encodePacked(facet, sel1, sel2, sel3, ...),\\n    ///     abi.encodePacked(facet, sel1, sel2, sel4, ...),\\n    ///     ...\\n    /// ]\\n    /// facet is the address of a facet\\n    /// sel1, sel2, sel3 etc. are four-byte function selectors.\\n    function diamondCut(bytes[] calldata _diamondCut) external;\\n\\n    event DiamondCut(bytes[] _diamondCut);\\n}\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface DiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools. Therefore the return values are tightly\\n    /// packed for efficiency. That means no padding with zeros.\\n\\n    /// @notice Gets all facets and their selectors.\\n    /// @return An array of bytes arrays containing each facet\\n    ///         and each facet's selectors.\\n    /// The return value is tightly packed.\\n    /// Here is the structure of the return value:\\n    /// returnValue = [\\n    ///     abi.encodePacked(facet, sel1, sel2, sel3, ...),\\n    ///     abi.encodePacked(facet, sel1, sel2, sel3, ...),\\n    ///     ...\\n    /// ]\\n    /// facet is the address of a facet.\\n    /// sel1, sel2, sel3 etc. are four-byte function selectors.\\n    function facets() external view returns (bytes[] memory);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return A byte array of function selectors.\\n    /// The return value is tightly packed. Here is an example:\\n    /// return abi.encodePacked(selector1, selector2, selector3, ...)\\n    function facetFunctionSelectors(address _facet)\\n        external\\n        view\\n        returns (bytes memory);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return A byte array of tightly packed facet addresses.\\n    /// Example return value:\\n    /// return abi.encodePacked(facet1, facet2, facet3, ...)\\n    function facetAddresses() external view returns (bytes memory);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return The facet address.\\n    function facetAddress(bytes4 _functionSelector)\\n        external\\n        view\\n        returns (address);\\n}\\n\\ninterface ERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceID The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xeae8e72fde3952f324d773fd93385191a177e26cce37e0eb9fca5e6ac5781ab8\"},\"solc_0.6/proxy/diamond/DiamondLoupeFacet.sol\":{\"content\":\"pragma solidity ^0.6.4;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge\\n* from https://github.com/mudgen/Diamond/blob/8235e6b63b47aab08a81c6f73bfb7faafda79ca4/contracts/\\n*\\n* Implementation of DiamondLoupe interface.\\n/******************************************************************************/\\n\\nimport \\\"./DiamondStorageContract.sol\\\";\\nimport \\\"./DiamondHeaders.sol\\\";\\n\\ncontract DiamondLoupeFacet is DiamondLoupe, DiamondStorageContract {\\n    /// These functions are expected to be called frequently\\n    /// by tools. Therefore the return values are tightly\\n    /// packed for efficiency. That means no padding with zeros.\\n\\n    struct Facet {\\n        address facet;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facets and their selectors.\\n    /// @return An array of bytes arrays containing each facet\\n    ///         and each facet's selectors.\\n    /// The return value is tightly packed.\\n    /// That means no padding with zeros.\\n    /// Here is the structure of the return value:\\n    /// returnValue = [\\n    ///     abi.encodePacked(facet, sel1, sel2, sel3, ...),\\n    ///     abi.encodePacked(facet, sel1, sel2, sel3, ...),\\n    ///     ...\\n    /// ]\\n    /// facet is the address of a facet.\\n    /// sel1, sel2, sel3 etc. are four-byte function selectors.\\n    function facets() external override view returns (bytes[] memory) {\\n        DiamondStorage storage ds = diamondStorage();\\n        uint256 totalSelectorSlots = ds.selectorSlotsLength;\\n        uint256 selectorSlotLength = uint128(totalSelectorSlots >> 128);\\n        totalSelectorSlots = uint128(totalSelectorSlots);\\n        uint256 totalSelectors = totalSelectorSlots * 8 + selectorSlotLength;\\n        if (selectorSlotLength > 0) {\\n            totalSelectorSlots++;\\n        }\\n\\n        // get default size of arrays\\n        uint256 defaultSize = totalSelectors;\\n        if (defaultSize > 20) {\\n            defaultSize = 20;\\n        }\\n        Facet[] memory facets_ = new Facet[](defaultSize);\\n        uint8[] memory numFacetSelectors = new uint8[](defaultSize);\\n        uint256 numFacets;\\n        uint256 selectorCount;\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorCount < totalSelectors; slotIndex++) {\\n            bytes32 slot = ds.selectorSlots[slotIndex];\\n            for (uint256 selectorIndex; selectorIndex < 8; selectorIndex++) {\\n                selectorCount++;\\n                if (selectorCount > totalSelectors) {\\n                    break;\\n                }\\n                bytes4 selector = bytes4(slot << (selectorIndex * 32));\\n                address facet = address(bytes20(ds.facets[selector]));\\n                bool continueLoop = false;\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (facets_[facetIndex].facet == facet) {\\n                        uint256 arrayLength = facets_[facetIndex]\\n                            .functionSelectors\\n                            .length;\\n                        // if array is too small then enlarge it\\n                        if (numFacetSelectors[facetIndex] + 1 > arrayLength) {\\n                            bytes4[] memory biggerArray = new bytes4[](\\n                                arrayLength + defaultSize\\n                            );\\n                            // copy contents of old array\\n                            for (uint256 i; i < arrayLength; i++) {\\n                                biggerArray[i] = facets_[facetIndex]\\n                                    .functionSelectors[i];\\n                            }\\n                            facets_[facetIndex].functionSelectors = biggerArray;\\n                        }\\n                        facets_[facetIndex]\\n                            .functionSelectors[numFacetSelectors[facetIndex]] = selector;\\n                        // probably will never have more than 255 functions from one facet contract\\n                        require(numFacetSelectors[facetIndex] < 255);\\n                        numFacetSelectors[facetIndex]++;\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n                if (continueLoop) {\\n                    continueLoop = false;\\n                    continue;\\n                }\\n                uint256 arrayLength = facets_.length;\\n                // if array is too small then enlarge it\\n                if (numFacets + 1 > arrayLength) {\\n                    Facet[] memory biggerArray = new Facet[](\\n                        arrayLength + defaultSize\\n                    );\\n                    uint8[] memory biggerArray2 = new uint8[](\\n                        arrayLength + defaultSize\\n                    );\\n                    for (uint256 i; i < arrayLength; i++) {\\n                        biggerArray[i] = facets_[i];\\n                        biggerArray2[i] = numFacetSelectors[i];\\n                    }\\n                    facets_ = biggerArray;\\n                    numFacetSelectors = biggerArray2;\\n                }\\n                facets_[numFacets].facet = facet;\\n                facets_[numFacets].functionSelectors = new bytes4[](\\n                    defaultSize\\n                );\\n                facets_[numFacets].functionSelectors[0] = selector;\\n                numFacetSelectors[numFacets] = 1;\\n                numFacets++;\\n            }\\n        }\\n        bytes[] memory returnFacets = new bytes[](numFacets);\\n        for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n            uint256 numSelectors = numFacetSelectors[facetIndex];\\n            bytes memory selectorsBytes = new bytes(4 * numSelectors);\\n            bytes4[] memory selectors = facets_[facetIndex].functionSelectors;\\n            uint256 bytePosition;\\n            for (uint256 i; i < numSelectors; i++) {\\n                for (uint256 j; j < 4; j++) {\\n                    selectorsBytes[bytePosition] = bytes1(\\n                        selectors[i] << (j * 8)\\n                    );\\n                    bytePosition++;\\n                }\\n            }\\n            returnFacets[facetIndex] = abi.encodePacked(\\n                facets_[facetIndex].facet,\\n                selectorsBytes\\n            );\\n        }\\n        return returnFacets;\\n    }\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return A bytes array of function selectors.\\n    /// The return value is tightly packed. Here is an example:\\n    /// return abi.encodePacked(selector1, selector2, selector3, ...)\\n    function facetFunctionSelectors(address _facet)\\n        external\\n        override\\n        view\\n        returns (bytes memory)\\n    {\\n        DiamondStorage storage ds = diamondStorage();\\n        uint256 totalSelectorSlots = ds.selectorSlotsLength;\\n        uint256 selectorSlotLength = uint128(totalSelectorSlots >> 128);\\n        totalSelectorSlots = uint128(totalSelectorSlots);\\n        uint256 totalSelectors = totalSelectorSlots * 8 + selectorSlotLength;\\n        if (selectorSlotLength > 0) {\\n            totalSelectorSlots++;\\n        }\\n\\n        uint256 numFacetSelectors;\\n        bytes4[] memory facetSelectors = new bytes4[](totalSelectors);\\n        uint256 selectorCount;\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorCount < totalSelectors; slotIndex++) {\\n            bytes32 slot = ds.selectorSlots[slotIndex];\\n            for (uint256 selectorIndex; selectorIndex < 8; selectorIndex++) {\\n                selectorCount++;\\n                if (selectorCount > totalSelectors) {\\n                    break;\\n                }\\n                bytes4 selector = bytes4(slot << (selectorIndex * 32));\\n                address facet = address(bytes20(ds.facets[selector]));\\n                if (_facet == facet) {\\n                    facetSelectors[numFacetSelectors] = selector;\\n                    numFacetSelectors++;\\n                }\\n            }\\n        }\\n        bytes memory returnBytes = new bytes(4 * numFacetSelectors);\\n        uint256 bytePosition;\\n        for (uint256 i; i < numFacetSelectors; i++) {\\n            for (uint256 j; j < 4; j++) {\\n                returnBytes[bytePosition] = bytes1(\\n                    facetSelectors[i] << (j * 8)\\n                );\\n                bytePosition++;\\n            }\\n        }\\n        return returnBytes;\\n    }\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return A byte array of tightly packed facet addresses.\\n    /// Example return value:\\n    /// return abi.encodePacked(facet1, facet2, facet3, ...)\\n    function facetAddresses() external override view returns (bytes memory) {\\n        DiamondStorage storage ds = diamondStorage();\\n        uint256 totalSelectorSlots = ds.selectorSlotsLength;\\n        uint256 selectorSlotLength = uint128(totalSelectorSlots >> 128);\\n        totalSelectorSlots = uint128(totalSelectorSlots);\\n        uint256 totalSelectors = totalSelectorSlots * 8 + selectorSlotLength;\\n        if (selectorSlotLength > 0) {\\n            totalSelectorSlots++;\\n        }\\n        address[] memory facets_ = new address[](totalSelectors);\\n        uint256 numFacets;\\n        uint256 selectorCount;\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorCount < totalSelectors; slotIndex++) {\\n            bytes32 slot = ds.selectorSlots[slotIndex];\\n            for (uint256 selectorIndex; selectorIndex < 8; selectorIndex++) {\\n                selectorCount++;\\n                if (selectorCount > totalSelectors) {\\n                    break;\\n                }\\n                bytes4 selector = bytes4(slot << (selectorIndex * 32));\\n                address facet = address(bytes20(ds.facets[selector]));\\n                bool continueLoop = false;\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (facet == facets_[facetIndex]) {\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n                if (continueLoop) {\\n                    continueLoop = false;\\n                    continue;\\n                }\\n                facets_[numFacets] = facet;\\n                numFacets++;\\n            }\\n        }\\n\\n        bytes memory returnBytes = new bytes(20 * numFacets);\\n        uint256 bytePosition;\\n        for (uint256 i; i < numFacets; i++) {\\n            for (uint256 j; j < 20; j++) {\\n                returnBytes[bytePosition] = bytes1(\\n                    bytes20(facets_[i]) << (j * 8)\\n                );\\n                bytePosition++;\\n            }\\n        }\\n        return returnBytes;\\n    }\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return The facet address.\\n    function facetAddress(bytes4 _functionSelector)\\n        external\\n        override\\n        view\\n        returns (address)\\n    {\\n        DiamondStorage storage ds = diamondStorage();\\n        return address(bytes20(ds.facets[_functionSelector]));\\n    }\\n}\\n\",\"keccak256\":\"0x71926285ec7529cafad32e3c34e714ede046aac0f1d1ba131113ff0dcd912f61\"},\"solc_0.6/proxy/diamond/DiamondStorageContract.sol\":{\"content\":\"pragma solidity ^0.6.4;\\n\\n// * from https://github.com/mudgen/Diamond/blob/8235e6b63b47aab08a81c6f73bfb7faafda79ca4/contracts/\\n\\n// modified to be an abstract\\n\\nabstract contract DiamondStorageContract {\\n    struct DiamondStorage {\\n        // owner of the contract\\n        address contractOwner;\\n        // maps function selectors to the facets that execute the functions.\\n        // and maps the selectors to the slot in the selectorSlots array.\\n        // and maps the selectors to the position in the slot.\\n        // func selector => address facet, uint64 slotsIndex, uint64 slotIndex\\n        mapping(bytes4 => bytes32) facets;\\n        // array of slots of function selectors.\\n        // each slot holds 8 function selectors.\\n        mapping(uint256 => bytes32) selectorSlots;\\n        // uint128 numSelectorsInSlot, uint128 selectorSlotsLength\\n        // selectorSlotsLength is the number of 32-byte slots in selectorSlots.\\n        // selectorSlotLength is the number of selectors in the last slot of\\n        // selectorSlots.\\n        uint256 selectorSlotsLength;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        // ds_slot = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n        assembly {\\n            ds_slot := 0xc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6ddce9c68aba45af0b56b560e6cb369bf53f5c08a25bd4b55ed522aae1c233ee\"},\"solc_0.6/proxy/diamond/ERC173.sol\":{\"content\":\"pragma solidity ^0.6.4;\\n\\nimport \\\"./ERC173Events.sol\\\";\\n\\ninterface ERC173 is ERC173Events {\\n    function transferOwnership(address newOwner) external;\\n\\n    function owner() external view returns (address);\\n}\\n\",\"keccak256\":\"0xead356d45d6f7ca020945d12fb7ae2282d3b1dc0820a197f5748c5f05fd5a6de\"},\"solc_0.6/proxy/diamond/ERC173Events.sol\":{\"content\":\"pragma solidity ^0.6.4;\\n\\ninterface ERC173Events {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n}\\n\",\"keccak256\":\"0x36b00d615382fbedee111f6a409f203f30faa02d233da4c315782878f14134ef\"},\"solc_0.6/proxy/diamond/OwnershipFacet.sol\":{\"content\":\"pragma solidity ^0.6.4;\\n\\nimport \\\"./DiamondStorageContract.sol\\\";\\nimport \\\"./ERC173.sol\\\";\\n\\ncontract OwnershipFacet is ERC173, DiamondStorageContract {\\n    function transferOwnership(address newOwner) external override {\\n        DiamondStorage storage ds = diamondStorage();\\n        address currentOwner = ds.contractOwner;\\n        require(msg.sender == currentOwner, \\\"Must own the contract.\\\");\\n        ds.contractOwner = newOwner;\\n        emit OwnershipTransferred(currentOwner, newOwner);\\n    }\\n\\n    function owner() external override view returns (address) {\\n        DiamondStorage storage ds = diamondStorage();\\n        return ds.contractOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x838f1a8178c11c709387d752b80b6f7ffd4a0ad5e858a53a6af0386093e2b5e5\"}},\"version\":1}",
  "contractFilepath": "solc_0.6/proxy/diamond/DiamondBase.sol"
}