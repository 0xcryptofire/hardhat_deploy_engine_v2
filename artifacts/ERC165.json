{
  "contractName": "ERC165",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "metadata": "{\"compiler\":{\"version\":\"0.6.5+commit.f956cc89\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Interface identification is specified in ERC-165. This function  uses less than 30,000 gas.\",\"params\":{\"interfaceID\":\"The interface identifier, as specified in ERC-165\"},\"returns\":{\"_0\":\"`true` if the contract implements `interfaceID` and  `interfaceID` is not 0xffffffff, `false` otherwise\"}}}},\"userdoc\":{\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Query if a contract implements an interface\"}}}},\"settings\":{\"compilationTarget\":{\"solc_0.6/proxy/diamond/DiamondHeaders.sol\":\"ERC165\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"solc_0.6/proxy/diamond/DiamondHeaders.sol\":{\"content\":\"pragma solidity ^0.6.4;\\npragma experimental ABIEncoderV2;\\n\\n// * from https://github.com/mudgen/Diamond/blob/8235e6b63b47aab08a81c6f73bfb7faafda79ca4/contracts/\\n\\ninterface Diamond {\\n    /// @notice _diamondCut is an array of bytes arrays.\\n    /// This argument is tightly packed for gas efficiency.\\n    /// That means no padding with zeros.\\n    /// Here is the structure of _diamondCut:\\n    /// _diamondCut = [\\n    ///     abi.encodePacked(facet, sel1, sel2, sel3, ...),\\n    ///     abi.encodePacked(facet, sel1, sel2, sel4, ...),\\n    ///     ...\\n    /// ]\\n    /// facet is the address of a facet\\n    /// sel1, sel2, sel3 etc. are four-byte function selectors.\\n    function diamondCut(bytes[] calldata _diamondCut) external;\\n\\n    event DiamondCut(bytes[] _diamondCut);\\n}\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface DiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools. Therefore the return values are tightly\\n    /// packed for efficiency. That means no padding with zeros.\\n\\n    /// @notice Gets all facets and their selectors.\\n    /// @return An array of bytes arrays containing each facet\\n    ///         and each facet's selectors.\\n    /// The return value is tightly packed.\\n    /// Here is the structure of the return value:\\n    /// returnValue = [\\n    ///     abi.encodePacked(facet, sel1, sel2, sel3, ...),\\n    ///     abi.encodePacked(facet, sel1, sel2, sel3, ...),\\n    ///     ...\\n    /// ]\\n    /// facet is the address of a facet.\\n    /// sel1, sel2, sel3 etc. are four-byte function selectors.\\n    function facets() external view returns (bytes[] memory);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return A byte array of function selectors.\\n    /// The return value is tightly packed. Here is an example:\\n    /// return abi.encodePacked(selector1, selector2, selector3, ...)\\n    function facetFunctionSelectors(address _facet)\\n        external\\n        view\\n        returns (bytes memory);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return A byte array of tightly packed facet addresses.\\n    /// Example return value:\\n    /// return abi.encodePacked(facet1, facet2, facet3, ...)\\n    function facetAddresses() external view returns (bytes memory);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return The facet address.\\n    function facetAddress(bytes4 _functionSelector)\\n        external\\n        view\\n        returns (address);\\n}\\n\\ninterface ERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceID The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xeae8e72fde3952f324d773fd93385191a177e26cce37e0eb9fca5e6ac5781ab8\"}},\"version\":1}",
  "contractFilepath": "solc_0.6/proxy/diamond/DiamondHeaders.sol"
}