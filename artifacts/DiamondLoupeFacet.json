{
  "contractName": "DiamondLoupeFacet",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_functionSelector",
          "type": "bytes4"
        }
      ],
      "name": "facetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facetAddresses",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_facet",
          "type": "address"
        }
      ],
      "name": "facetFunctionSelectors",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facets",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": "0x608060405234801561001057600080fd5b50610f52806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806352ef6b2c146100515780637a0ed6271461006f578063adfca15e14610084578063cdffacc614610097575b600080fd5b6100596100b7565b6040516100669190610ed9565b60405180910390f35b610077610340565b6040516100669190610e5b565b610059610092366004610d42565b610ab3565b6100aa6100a5366004610d7d565b610cd3565b6040516100669190610e3a565b606060006100c3610d06565b60038101549091506fffffffffffffffffffffffffffffffff60088202608083901c011660608167ffffffffffffffff8111801561010057600080fd5b5060405190808252806020026020018201604052801561012a578160200160208202803683370190505b50905060008060005b84821015610253576000818152600288016020526040812054905b6008811015610249576001909301928684111561016a57610249565b6001600160e01b0319602080830284901b918216600090815260018c01909152604081205460601c90805b888110156101f5578981815181106101a957fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156101ed57600191506101f5565b600101610195565b5080156102055750610241915050565b8189898151811061021257fe5b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101525050600190950194505b60010161014e565b5050600101610133565b5060608260140267ffffffffffffffff8111801561027057600080fd5b506040519080825280601f01601f19166020018201604052801561029b576020820181803683370190505b5090506000805b848110156103325760005b601481101561032957806008028783815181106102c657fe5b602002602001015160601b6bffffffffffffffffffffffff1916901b8484815181106102ee57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600192830192016102ad565b506001016102a2565b509097505050505050505090565b6060600061034c610d06565b60038101549091506fffffffffffffffffffffffffffffffff60088202608083901c011680601481111561037e575060145b60608167ffffffffffffffff8111801561039757600080fd5b506040519080825280602002602001820160405280156103d157816020015b6103be610d2a565b8152602001906001900390816103b65790505b50905060608267ffffffffffffffff811180156103ed57600080fd5b50604051908082528060200260200182016040528015610417578160200160208202803683370190505b50905060008060005b868210156108da57600081815260028a016020526040812054905b60088110156108d05760019093019288841115610457576108d0565b6001600160e01b0319602080830284901b918216600090815260018e01909152604081205460601c90805b88811015610693578273ffffffffffffffffffffffffffffffffffffffff168b82815181106104ad57fe5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff16141561068b5760008b82815181106104e357fe5b602002602001015160200151519050808b83815181106104ff57fe5b602002602001015160010160ff1611156105dd5760608d820167ffffffffffffffff8111801561052e57600080fd5b50604051908082528060200260200182016040528015610558578160200160208202803683370190505b50905060005b828110156105be578d848151811061057257fe5b602002602001015160200151818151811061058957fe5b602002602001015182828151811061059d57fe5b6001600160e01b03199092166020928302919091019091015260010161055e565b50808d84815181106105cc57fe5b602002602001015160200181905250505b848c83815181106105ea57fe5b6020026020010151602001518c848151811061060257fe5b602002602001015160ff168151811061061757fe5b60200260200101906001600160e01b03191690816001600160e01b0319168152505060ff8b838151811061064757fe5b602002602001015160ff161061065c57600080fd5b8a828151811061066857fe5b60200260200101805180919060010160ff1660ff16815250506001925050610693565b600101610482565b5080156106a357506108c8915050565b8951600189018110156107c75760608c820167ffffffffffffffff811180156106cb57600080fd5b5060405190808252806020026020018201604052801561070557816020015b6106f2610d2a565b8152602001906001900390816106ea5790505b50905060608d830167ffffffffffffffff8111801561072357600080fd5b5060405190808252806020026020018201604052801561074d578160200160208202803683370190505b50905060005b838110156107c0578d818151811061076757fe5b602002602001015183828151811061077b57fe5b60200260200101819052508c818151811061079257fe5b60200260200101518282815181106107a657fe5b60ff90921660209283029190910190910152600101610753565b50909b5099505b828b8a815181106107d457fe5b602090810291909101015173ffffffffffffffffffffffffffffffffffffffff90911690528b67ffffffffffffffff8111801561081057600080fd5b5060405190808252806020026020018201604052801561083a578160200160208202803683370190505b508b8a8151811061084757fe5b602002602001015160200181905250838b8a8151811061086357fe5b60200260200101516020015160008151811061087b57fe5b60200260200101906001600160e01b03191690816001600160e01b0319168152505060018a8a815181106108ab57fe5b60ff90921660209283029190910190910152505060019096019550505b60010161043b565b5050600101610420565b5060608267ffffffffffffffff811180156108f457600080fd5b5060405190808252806020026020018201604052801561092857816020015b60608152602001906001900390816109135790505b50905060005b83811015610aa557600085828151811061094457fe5b602002602001015160ff16905060608160040267ffffffffffffffff8111801561096d57600080fd5b506040519080825280601f01601f191660200182016040528015610998576020820181803683370190505b50905060608884815181106109a957fe5b60200260200101516020015190506000805b84811015610a435760005b6004811015610a3a57806008028483815181106109df57fe5b60200260200101516001600160e01b031916901b8584815181106109ff57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600192830192016109c6565b506001016109bb565b50898581518110610a5057fe5b60200260200101516000015183604051602001610a6e929190610def565b604051602081830303815290604052868681518110610a8957fe5b602002602001018190525050505050808060010191505061092e565b509850505050505050505090565b60606000610abf610d06565b60038101549091506fffffffffffffffffffffffffffffffff60088202608083901c0116600060608267ffffffffffffffff81118015610afe57600080fd5b50604051908082528060200260200182016040528015610b28578160200160208202803683370190505b5090506000805b84821015610bed576000818152600288016020526040812054905b6008811015610be35760019093019286841115610b6657610be3565b6001600160e01b0319602080830284901b918216600090815260018c01909152604090205460601c73ffffffffffffffffffffffffffffffffffffffff8d16811415610bd95781878981518110610bb957fe5b6001600160e01b0319909216602092830291909101909101526001909701965b5050600101610b4a565b5050600101610b2f565b5060608360040267ffffffffffffffff81118015610c0a57600080fd5b506040519080825280601f01601f191660200182016040528015610c35576020820181803683370190505b5090506000805b85811015610cc45760005b6004811015610cbb5780600802868381518110610c6057fe5b60200260200101516001600160e01b031916901b848481518110610c8057fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060019283019201610c47565b50600101610c3c565b50909998505050505050505050565b600080610cde610d06565b6001600160e01b0319841660009081526001909101602052604090205460601c915050919050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b60408051808201909152600081526060602082015290565b600060208284031215610d53578081fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610d76578182fd5b9392505050565b600060208284031215610d8e578081fd5b81356001600160e01b031981168114610d76578182fd5b60008151808452610dbd816020860160208601610eec565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60007fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008460601b1682528251610e2c816014850160208701610eec565b919091016014019392505050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015610ecc577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452610eba858351610da5565b94509285019290850190600101610e80565b5092979650505050505050565b600060208252610d766020830184610da5565b60005b83811015610f07578181015183820152602001610eef565b83811115610f16576000848401525b5050505056fea2646970667358221220f6dcd2bda2be3c28d45d3782c4bd301e9f51440abf00750ad167da18eab441c364736f6c63430007000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806352ef6b2c146100515780637a0ed6271461006f578063adfca15e14610084578063cdffacc614610097575b600080fd5b6100596100b7565b6040516100669190610ed9565b60405180910390f35b610077610340565b6040516100669190610e5b565b610059610092366004610d42565b610ab3565b6100aa6100a5366004610d7d565b610cd3565b6040516100669190610e3a565b606060006100c3610d06565b60038101549091506fffffffffffffffffffffffffffffffff60088202608083901c011660608167ffffffffffffffff8111801561010057600080fd5b5060405190808252806020026020018201604052801561012a578160200160208202803683370190505b50905060008060005b84821015610253576000818152600288016020526040812054905b6008811015610249576001909301928684111561016a57610249565b6001600160e01b0319602080830284901b918216600090815260018c01909152604081205460601c90805b888110156101f5578981815181106101a957fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156101ed57600191506101f5565b600101610195565b5080156102055750610241915050565b8189898151811061021257fe5b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101525050600190950194505b60010161014e565b5050600101610133565b5060608260140267ffffffffffffffff8111801561027057600080fd5b506040519080825280601f01601f19166020018201604052801561029b576020820181803683370190505b5090506000805b848110156103325760005b601481101561032957806008028783815181106102c657fe5b602002602001015160601b6bffffffffffffffffffffffff1916901b8484815181106102ee57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600192830192016102ad565b506001016102a2565b509097505050505050505090565b6060600061034c610d06565b60038101549091506fffffffffffffffffffffffffffffffff60088202608083901c011680601481111561037e575060145b60608167ffffffffffffffff8111801561039757600080fd5b506040519080825280602002602001820160405280156103d157816020015b6103be610d2a565b8152602001906001900390816103b65790505b50905060608267ffffffffffffffff811180156103ed57600080fd5b50604051908082528060200260200182016040528015610417578160200160208202803683370190505b50905060008060005b868210156108da57600081815260028a016020526040812054905b60088110156108d05760019093019288841115610457576108d0565b6001600160e01b0319602080830284901b918216600090815260018e01909152604081205460601c90805b88811015610693578273ffffffffffffffffffffffffffffffffffffffff168b82815181106104ad57fe5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff16141561068b5760008b82815181106104e357fe5b602002602001015160200151519050808b83815181106104ff57fe5b602002602001015160010160ff1611156105dd5760608d820167ffffffffffffffff8111801561052e57600080fd5b50604051908082528060200260200182016040528015610558578160200160208202803683370190505b50905060005b828110156105be578d848151811061057257fe5b602002602001015160200151818151811061058957fe5b602002602001015182828151811061059d57fe5b6001600160e01b03199092166020928302919091019091015260010161055e565b50808d84815181106105cc57fe5b602002602001015160200181905250505b848c83815181106105ea57fe5b6020026020010151602001518c848151811061060257fe5b602002602001015160ff168151811061061757fe5b60200260200101906001600160e01b03191690816001600160e01b0319168152505060ff8b838151811061064757fe5b602002602001015160ff161061065c57600080fd5b8a828151811061066857fe5b60200260200101805180919060010160ff1660ff16815250506001925050610693565b600101610482565b5080156106a357506108c8915050565b8951600189018110156107c75760608c820167ffffffffffffffff811180156106cb57600080fd5b5060405190808252806020026020018201604052801561070557816020015b6106f2610d2a565b8152602001906001900390816106ea5790505b50905060608d830167ffffffffffffffff8111801561072357600080fd5b5060405190808252806020026020018201604052801561074d578160200160208202803683370190505b50905060005b838110156107c0578d818151811061076757fe5b602002602001015183828151811061077b57fe5b60200260200101819052508c818151811061079257fe5b60200260200101518282815181106107a657fe5b60ff90921660209283029190910190910152600101610753565b50909b5099505b828b8a815181106107d457fe5b602090810291909101015173ffffffffffffffffffffffffffffffffffffffff90911690528b67ffffffffffffffff8111801561081057600080fd5b5060405190808252806020026020018201604052801561083a578160200160208202803683370190505b508b8a8151811061084757fe5b602002602001015160200181905250838b8a8151811061086357fe5b60200260200101516020015160008151811061087b57fe5b60200260200101906001600160e01b03191690816001600160e01b0319168152505060018a8a815181106108ab57fe5b60ff90921660209283029190910190910152505060019096019550505b60010161043b565b5050600101610420565b5060608267ffffffffffffffff811180156108f457600080fd5b5060405190808252806020026020018201604052801561092857816020015b60608152602001906001900390816109135790505b50905060005b83811015610aa557600085828151811061094457fe5b602002602001015160ff16905060608160040267ffffffffffffffff8111801561096d57600080fd5b506040519080825280601f01601f191660200182016040528015610998576020820181803683370190505b50905060608884815181106109a957fe5b60200260200101516020015190506000805b84811015610a435760005b6004811015610a3a57806008028483815181106109df57fe5b60200260200101516001600160e01b031916901b8584815181106109ff57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600192830192016109c6565b506001016109bb565b50898581518110610a5057fe5b60200260200101516000015183604051602001610a6e929190610def565b604051602081830303815290604052868681518110610a8957fe5b602002602001018190525050505050808060010191505061092e565b509850505050505050505090565b60606000610abf610d06565b60038101549091506fffffffffffffffffffffffffffffffff60088202608083901c0116600060608267ffffffffffffffff81118015610afe57600080fd5b50604051908082528060200260200182016040528015610b28578160200160208202803683370190505b5090506000805b84821015610bed576000818152600288016020526040812054905b6008811015610be35760019093019286841115610b6657610be3565b6001600160e01b0319602080830284901b918216600090815260018c01909152604090205460601c73ffffffffffffffffffffffffffffffffffffffff8d16811415610bd95781878981518110610bb957fe5b6001600160e01b0319909216602092830291909101909101526001909701965b5050600101610b4a565b5050600101610b2f565b5060608360040267ffffffffffffffff81118015610c0a57600080fd5b506040519080825280601f01601f191660200182016040528015610c35576020820181803683370190505b5090506000805b85811015610cc45760005b6004811015610cbb5780600802868381518110610c6057fe5b60200260200101516001600160e01b031916901b848481518110610c8057fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060019283019201610c47565b50600101610c3c565b50909998505050505050505050565b600080610cde610d06565b6001600160e01b0319841660009081526001909101602052604090205460601c915050919050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b60408051808201909152600081526060602082015290565b600060208284031215610d53578081fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610d76578182fd5b9392505050565b600060208284031215610d8e578081fd5b81356001600160e01b031981168114610d76578182fd5b60008151808452610dbd816020860160208601610eec565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60007fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008460601b1682528251610e2c816014850160208701610eec565b919091016014019392505050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015610ecc577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452610eba858351610da5565b94509285019290850190600101610e80565b5092979650505050505050565b600060208252610d766020830184610da5565b60005b83811015610f07578181015183820152602001610eef565b83811115610f16576000848401525b5050505056fea2646970667358221220f6dcd2bda2be3c28d45d3782c4bd301e9f51440abf00750ad167da18eab441c364736f6c63430007000033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "metadata": "{\"compiler\":{\"version\":\"0.7.0+commit.9e61f92b\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_functionSelector\",\"type\":\"bytes4\"}],\"name\":\"facetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facetAddresses\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_facet\",\"type\":\"address\"}],\"name\":\"facetFunctionSelectors\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facets\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"facetAddress(bytes4)\":{\"details\":\"If facet is not found return address(0).\",\"params\":{\"_functionSelector\":\"The function selector.\"},\"returns\":{\"_0\":\"The facet address.\"}},\"facetAddresses()\":{\"returns\":{\"_0\":\"A byte array of tightly packed facet addresses. Example return value: return abi.encodePacked(facet1, facet2, facet3, ...)\"}},\"facetFunctionSelectors(address)\":{\"params\":{\"_facet\":\"The facet address.\"},\"returns\":{\"_0\":\"A bytes array of function selectors. The return value is tightly packed. Here is an example: return abi.encodePacked(selector1, selector2, selector3, ...)\"}},\"facets()\":{\"returns\":{\"_0\":\"An array of bytes arrays containing each facet         and each facet's selectors. The return value is tightly packed. That means no padding with zeros. Here is the structure of the return value: returnValue = [     abi.encodePacked(facet, sel1, sel2, sel3, ...),     abi.encodePacked(facet, sel1, sel2, sel3, ...),     ... ] facet is the address of a facet. sel1, sel2, sel3 etc. are four-byte function selectors.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"facetAddress(bytes4)\":{\"notice\":\"Gets the facet that supports the given selector.\"},\"facetAddresses()\":{\"notice\":\"Get all the facet addresses used by a diamond.\"},\"facetFunctionSelectors(address)\":{\"notice\":\"Gets all the function selectors supported by a specific facet.\"},\"facets()\":{\"notice\":\"Gets all facets and their selectors.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solc_0.7/diamond/DiamondLoupeFacet.sol\":\"DiamondLoupeFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"solc_0.7/diamond/DiamondHeaders.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IDiamond {\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// This argument is tightly packed for gas efficiency    \\n    /// That means no padding with zeros.\\n    /// Here is the structure of _diamondCut:\\n    /// _diamondCut = [\\n    ///     abi.encodePacked(facet, sel1, sel2, sel3, ...),\\n    ///     abi.encodePacked(facet, sel1, sel2, sel4, ...),\\n    ///     ...\\n    /// ]\\n    /// facet is the address of a facet\\n    /// sel1, sel2, sel3 etc. are four-byte function selectors.\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(bytes[] calldata _diamondCut, address _init, bytes calldata _calldata) external;\\n    event DiamondCut(bytes[] _diamondCut, address _init, bytes _calldata);\\n}\\n\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools. Therefore the return values are tightly\\n    /// packed for efficiency. That means no padding with zeros.\\n\\n    /// @notice Gets all facets and their selectors.\\n    /// @return An array of bytes arrays containing each facet\\n    ///         and each facet's selectors.\\n    /// The return value is tightly packed.\\n    /// Here is the structure of the return value:\\n    /// returnValue = [\\n    ///     abi.encodePacked(facet, sel1, sel2, sel3, ...),\\n    ///     abi.encodePacked(facet, sel1, sel2, sel3, ...),\\n    ///     ...\\n    /// ]\\n    /// facet is the address of a facet.\\n    /// sel1, sel2, sel3 etc. are four-byte function selectors.\\n    function facets() external view returns(bytes[] memory);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return A byte array of function selectors.\\n    /// The return value is tightly packed. Here is an example:\\n    /// return abi.encodePacked(selector1, selector2, selector3, ...)\\n    function facetFunctionSelectors(address _facet) external view returns(bytes memory);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return A byte array of tightly packed facet addresses.\\n    /// Example return value:\\n    /// return abi.encodePacked(facet1, facet2, facet3, ...)\\n    function facetAddresses() external view returns(bytes memory);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view returns(address);\\n}\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceID The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\\ninterface IERC173Events {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n}\\n\\ninterface IERC173 is IERC173Events {\\n    function transferOwnership(address newOwner) external;\\n\\n    function owner() external view returns (address);\\n}\\n\",\"keccak256\":\"0x331a6b7d4e1a101eff1dfd4d7c1a69ef6c6165c81ff674e63ec0cbfe7c5f42a7\",\"license\":\"MIT\"},\"solc_0.7/diamond/DiamondLoupeFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge\\n*\\n* Implementation of DiamondLoupe interface.\\n/******************************************************************************/\\n\\nimport \\\"./DiamondStorageContract.sol\\\";\\nimport \\\"./DiamondHeaders.sol\\\";\\n\\n\\ncontract DiamondLoupeFacet is IDiamondLoupe, DiamondStorageContract {\\n    /// These functions are expected to be called frequently\\n    /// by tools. Therefore the return values are tightly\\n    /// packed for efficiency. That means no padding with zeros.\\n\\n    struct Facet {\\n        address facet;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facets and their selectors.\\n    /// @return An array of bytes arrays containing each facet\\n    ///         and each facet's selectors.\\n    /// The return value is tightly packed.\\n    /// That means no padding with zeros.\\n    /// Here is the structure of the return value:\\n    /// returnValue = [\\n    ///     abi.encodePacked(facet, sel1, sel2, sel3, ...),\\n    ///     abi.encodePacked(facet, sel1, sel2, sel3, ...),\\n    ///     ...\\n    /// ]\\n    /// facet is the address of a facet.\\n    /// sel1, sel2, sel3 etc. are four-byte function selectors.\\n    function facets() external view override returns(bytes[] memory) {\\n        DiamondStorage storage ds = diamondStorage();\\n        uint totalSelectorSlots = ds.selectorSlotsLength;        \\n        uint totalSelectors = uint128(totalSelectorSlots) * 8 + uint128(totalSelectorSlots >> 128);\\n        \\n        // get default size of arrays\\n        uint defaultSize = totalSelectors;\\n        if(defaultSize > 20) {\\n            defaultSize = 20;\\n        }\\n        Facet[] memory facets_ = new Facet[](defaultSize);\\n        uint8[] memory numFacetSelectors = new uint8[](defaultSize);\\n        uint numFacets;\\n        uint selectorCount;\\n        // loop through function selectors\\n        for(uint slotIndex; selectorCount < totalSelectors; slotIndex++) {\\n            bytes32 slot = ds.selectorSlots[slotIndex];\\n            for(uint selectorIndex; selectorIndex < 8; selectorIndex++) {\\n                selectorCount++;\\n                if(selectorCount > totalSelectors) {\\n                    break;\\n                }\\n                bytes4 selector = bytes4(slot << selectorIndex * 32);\\n                address facet = address(bytes20(ds.facets[selector]));\\n                bool continueLoop = false;\\n                for(uint facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if(facets_[facetIndex].facet == facet) {\\n                        uint arrayLength = facets_[facetIndex].functionSelectors.length;\\n                        // if array is too small then enlarge it\\n                        if(numFacetSelectors[facetIndex]+1 > arrayLength) {\\n                            bytes4[] memory biggerArray = new bytes4[](arrayLength + defaultSize);\\n                            // copy contents of old array\\n                            for(uint i; i < arrayLength; i++) {\\n                                biggerArray[i] = facets_[facetIndex].functionSelectors[i];\\n                            }\\n                            facets_[facetIndex].functionSelectors = biggerArray;\\n                        }\\n                        facets_[facetIndex].functionSelectors[numFacetSelectors[facetIndex]] = selector;\\n                        // probably will never have more than 255 functions from one facet contract\\n                        require(numFacetSelectors[facetIndex] < 255);\\n                        numFacetSelectors[facetIndex]++;\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n                if(continueLoop) {\\n                    continueLoop = false;\\n                    continue;\\n                }\\n                uint arrayLength = facets_.length;\\n                // if array is too small then enlarge it\\n                if(numFacets+1 > arrayLength) {\\n                    Facet[] memory biggerArray = new Facet[](arrayLength + defaultSize);\\n                    uint8[] memory biggerArray2 = new uint8[](arrayLength + defaultSize);\\n                    for(uint i; i < arrayLength; i++) {\\n                        biggerArray[i] = facets_[i];\\n                        biggerArray2[i] = numFacetSelectors[i];\\n                    }\\n                    facets_ = biggerArray;\\n                    numFacetSelectors = biggerArray2;\\n                }\\n                facets_[numFacets].facet = facet;\\n                facets_[numFacets].functionSelectors = new bytes4[](defaultSize);\\n                facets_[numFacets].functionSelectors[0] = selector;\\n                numFacetSelectors[numFacets] = 1;\\n                numFacets++;\\n            }\\n        }\\n        bytes[] memory returnFacets = new bytes[](numFacets);\\n        for(uint facetIndex; facetIndex < numFacets; facetIndex++) {\\n            uint numSelectors = numFacetSelectors[facetIndex];\\n            bytes memory selectorsBytes = new bytes(4 * numSelectors);\\n            bytes4[] memory selectors = facets_[facetIndex].functionSelectors;\\n            uint bytePosition;\\n            for(uint i; i < numSelectors; i++) {\\n                for(uint j; j < 4; j++) {\\n                    selectorsBytes[bytePosition] = byte(selectors[i] << j * 8);\\n                    bytePosition++;\\n                }\\n            }\\n            returnFacets[facetIndex] = abi.encodePacked(facets_[facetIndex].facet, selectorsBytes);\\n        }\\n        return returnFacets;\\n    }\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return A bytes array of function selectors.\\n    /// The return value is tightly packed. Here is an example:\\n    /// return abi.encodePacked(selector1, selector2, selector3, ...)\\n    function facetFunctionSelectors(address _facet) external view override returns(bytes memory) {\\n        DiamondStorage storage ds = diamondStorage();\\n        uint totalSelectorSlots = ds.selectorSlotsLength;\\n        uint totalSelectors = uint128(totalSelectorSlots) * 8 + uint128(totalSelectorSlots >> 128);\\n        \\n        uint numFacetSelectors;\\n        bytes4[] memory facetSelectors = new bytes4[](totalSelectors);\\n        uint selectorCount;\\n        // loop through function selectors\\n        for(uint slotIndex; selectorCount < totalSelectors; slotIndex++) {\\n            bytes32 slot = ds.selectorSlots[slotIndex];\\n            for(uint selectorIndex; selectorIndex < 8; selectorIndex++) {\\n                selectorCount++;\\n                if(selectorCount > totalSelectors) {\\n                    break;\\n                }\\n                bytes4 selector = bytes4(slot << selectorIndex * 32);\\n                address facet = address(bytes20(ds.facets[selector]));\\n                if(_facet == facet) {\\n                    facetSelectors[numFacetSelectors] = selector;\\n                    numFacetSelectors++;\\n                }\\n            }\\n        }\\n        bytes memory returnBytes = new bytes(4 * numFacetSelectors);\\n        uint bytePosition;\\n        for(uint i; i < numFacetSelectors; i++) {\\n            for(uint j; j < 4; j++) {\\n                returnBytes[bytePosition] = byte(facetSelectors[i] << j * 8);\\n                bytePosition++;\\n            }\\n        }\\n        return returnBytes;\\n    }\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return A byte array of tightly packed facet addresses.\\n    /// Example return value:\\n    /// return abi.encodePacked(facet1, facet2, facet3, ...)\\n    function facetAddresses() external view override returns(bytes memory) {\\n        DiamondStorage storage ds = diamondStorage();\\n        uint totalSelectorSlots = ds.selectorSlotsLength;\\n        uint totalSelectors = uint128(totalSelectorSlots) * 8 + uint128(totalSelectorSlots >> 128);\\n        \\n        address[] memory facets_ = new address[](totalSelectors);\\n        uint numFacets;\\n        uint selectorCount;\\n        // loop through function selectors\\n        for(uint slotIndex; selectorCount < totalSelectors; slotIndex++) {\\n            bytes32 slot = ds.selectorSlots[slotIndex];\\n            for(uint selectorIndex; selectorIndex < 8; selectorIndex++) {\\n                selectorCount++;\\n                if(selectorCount > totalSelectors) {\\n                    break;\\n                }\\n                bytes4 selector = bytes4(slot << selectorIndex * 32);\\n                address facet = address(bytes20(ds.facets[selector]));\\n                bool continueLoop = false;\\n                for(uint facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if(facet == facets_[facetIndex]) {\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n                if(continueLoop) {\\n                    continueLoop = false;\\n                    continue;\\n                }\\n                facets_[numFacets] = facet;\\n                numFacets++;\\n            }\\n        }\\n\\n        bytes memory returnBytes = new bytes(20 * numFacets);\\n        uint bytePosition;\\n        for(uint i; i < numFacets; i++) {\\n            for(uint j; j < 20; j++) {\\n                returnBytes[bytePosition] = byte(bytes20(facets_[i]) << j * 8);\\n                bytePosition++;\\n            }\\n        }\\n        return returnBytes;\\n    }\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view override returns(address) {\\n        DiamondStorage storage ds = diamondStorage();\\n        return address(bytes20(ds.facets[_functionSelector]));\\n    }\\n}\",\"keccak256\":\"0x6f5bd7577144881eb6ff97c65ba12d1d7787f48ecdc0f935a2eb6a97766e1e27\",\"license\":\"MIT\"},\"solc_0.7/diamond/DiamondStorageContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ncontract DiamondStorageContract {\\n\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n\\n        // owner of the contract\\n        address contractOwner;\\n\\n        // maps function selectors to the facets that execute the functions.\\n        // and maps the selectors to the slot in the selectorSlots array.\\n        // and maps the selectors to the position in the slot.\\n        // func selector => address facet, uint32 slotIndex, uint64 slotsIndex\\n        mapping(bytes4 => bytes32) facets;\\n\\n        // array of slots of function selectors.\\n        // each slot holds 8 function selectors.\\n        mapping(uint => bytes32) selectorSlots;\\n\\n        // uint32 selectorSlotLength, uint32 selectorSlotsLength\\n        // selectorSlotsLength is the number of 32-byte slots in selectorSlots.\\n        // selectorSlotLength is the number of selectors in the last slot of\\n        // selectorSlots.\\n        uint selectorSlotsLength;\\n\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n\\n    function diamondStorage() internal pure returns(DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly { ds.slot := position }\\n    }\\n}\\n\",\"keccak256\":\"0x4c77113ad1740fc0908f76aa79bc4a2b5a593cbb09502775435fc6aa9bacd565\",\"license\":\"MIT\"}},\"version\":1}",
  "contractFilepath": "solc_0.7/diamond/DiamondLoupeFacet.sol"
}