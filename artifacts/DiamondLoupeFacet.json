{
  "contractName": "DiamondLoupeFacet",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_functionSelector",
          "type": "bytes4"
        }
      ],
      "name": "facetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facetAddresses",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_facet",
          "type": "address"
        }
      ],
      "name": "facetFunctionSelectors",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facets",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": "0x608060405234801561001057600080fd5b50610f7f806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806352ef6b2c146100515780637a0ed6271461006f578063adfca15e14610084578063cdffacc614610097575b600080fd5b6100596100b7565b6040516100669190610f06565b60405180910390f35b61007761034f565b6040516100669190610e88565b610059610092366004610d6f565b610ad1565b6100aa6100a5366004610daa565b610d00565b6040516100669190610e67565b606060006100c3610d33565b60038101549091506fffffffffffffffffffffffffffffffff81169060801c60088202810181156100f5576001909201915b60608167ffffffffffffffff8111801561010e57600080fd5b50604051908082528060200260200182016040528015610138578160200160208202803683370190505b50905060008060005b84821015610261576000818152600289016020526040812054905b6008811015610257576001909301928684111561017857610257565b6001600160e01b0319602080830284901b918216600090815260018d01909152604081205460601c90805b88811015610203578981815181106101b757fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156101fb5760019150610203565b6001016101a3565b508015610213575061024f915050565b8189898151811061022057fe5b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101525050600190950194505b60010161015c565b5050600101610141565b5060608260140267ffffffffffffffff8111801561027e57600080fd5b506040519080825280601f01601f1916602001820160405280156102a9576020820181803683370190505b5090506000805b848110156103405760005b601481101561033757806008028783815181106102d457fe5b602002602001015160601b6bffffffffffffffffffffffff1916901b8484815181106102fc57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600192830192016102bb565b506001016102b0565b50909850505050505050505090565b6060600061035b610d33565b60038101549091506fffffffffffffffffffffffffffffffff81169060801c600882028101811561038d576001909201915b80601481111561039b575060145b60608167ffffffffffffffff811180156103b457600080fd5b506040519080825280602002602001820160405280156103ee57816020015b6103db610d57565b8152602001906001900390816103d35790505b50905060608267ffffffffffffffff8111801561040a57600080fd5b50604051908082528060200260200182016040528015610434578160200160208202803683370190505b50905060008060005b868210156108f757600081815260028b016020526040812054905b60088110156108ed5760019093019288841115610474576108ed565b6001600160e01b0319602080830284901b918216600090815260018f01909152604081205460601c90805b888110156106b0578273ffffffffffffffffffffffffffffffffffffffff168b82815181106104ca57fe5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1614156106a85760008b828151811061050057fe5b602002602001015160200151519050808b838151811061051c57fe5b602002602001015160010160ff1611156105fa5760608d820167ffffffffffffffff8111801561054b57600080fd5b50604051908082528060200260200182016040528015610575578160200160208202803683370190505b50905060005b828110156105db578d848151811061058f57fe5b60200260200101516020015181815181106105a657fe5b60200260200101518282815181106105ba57fe5b6001600160e01b03199092166020928302919091019091015260010161057b565b50808d84815181106105e957fe5b602002602001015160200181905250505b848c838151811061060757fe5b6020026020010151602001518c848151811061061f57fe5b602002602001015160ff168151811061063457fe5b60200260200101906001600160e01b03191690816001600160e01b0319168152505060ff8b838151811061066457fe5b602002602001015160ff161061067957600080fd5b8a828151811061068557fe5b60200260200101805180919060010160ff1660ff168152505060019250506106b0565b60010161049f565b5080156106c057506108e5915050565b8951600189018110156107e45760608c820167ffffffffffffffff811180156106e857600080fd5b5060405190808252806020026020018201604052801561072257816020015b61070f610d57565b8152602001906001900390816107075790505b50905060608d830167ffffffffffffffff8111801561074057600080fd5b5060405190808252806020026020018201604052801561076a578160200160208202803683370190505b50905060005b838110156107dd578d818151811061078457fe5b602002602001015183828151811061079857fe5b60200260200101819052508c81815181106107af57fe5b60200260200101518282815181106107c357fe5b60ff90921660209283029190910190910152600101610770565b50909b5099505b828b8a815181106107f157fe5b602090810291909101015173ffffffffffffffffffffffffffffffffffffffff90911690528b67ffffffffffffffff8111801561082d57600080fd5b50604051908082528060200260200182016040528015610857578160200160208202803683370190505b508b8a8151811061086457fe5b602002602001015160200181905250838b8a8151811061088057fe5b60200260200101516020015160008151811061089857fe5b60200260200101906001600160e01b03191690816001600160e01b0319168152505060018a8a815181106108c857fe5b60ff90921660209283029190910190910152505060019096019550505b600101610458565b505060010161043d565b5060608267ffffffffffffffff8111801561091157600080fd5b5060405190808252806020026020018201604052801561094557816020015b60608152602001906001900390816109305790505b50905060005b83811015610ac257600085828151811061096157fe5b602002602001015160ff16905060608160040267ffffffffffffffff8111801561098a57600080fd5b506040519080825280601f01601f1916602001820160405280156109b5576020820181803683370190505b50905060608884815181106109c657fe5b60200260200101516020015190506000805b84811015610a605760005b6004811015610a5757806008028483815181106109fc57fe5b60200260200101516001600160e01b031916901b858481518110610a1c57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600192830192016109e3565b506001016109d8565b50898581518110610a6d57fe5b60200260200101516000015183604051602001610a8b929190610e1c565b604051602081830303815290604052868681518110610aa657fe5b602002602001018190525050505050808060010191505061094b565b50995050505050505050505090565b60606000610add610d33565b60038101549091506fffffffffffffffffffffffffffffffff81169060801c6008820281018115610b0f576001909201915b600060608267ffffffffffffffff81118015610b2a57600080fd5b50604051908082528060200260200182016040528015610b54578160200160208202803683370190505b5090506000805b84821015610c19576000818152600289016020526040812054905b6008811015610c0f5760019093019286841115610b9257610c0f565b6001600160e01b0319602080830284901b918216600090815260018d01909152604090205460601c73ffffffffffffffffffffffffffffffffffffffff8e16811415610c055781878981518110610be557fe5b6001600160e01b0319909216602092830291909101909101526001909701965b5050600101610b76565b5050600101610b5b565b5060608360040267ffffffffffffffff81118015610c3657600080fd5b506040519080825280601f01601f191660200182016040528015610c61576020820181803683370190505b5090506000805b85811015610cf05760005b6004811015610ce75780600802868381518110610c8c57fe5b60200260200101516001600160e01b031916901b848481518110610cac57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060019283019201610c73565b50600101610c68565b50909a9950505050505050505050565b600080610d0b610d33565b6001600160e01b0319841660009081526001909101602052604090205460601c915050919050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b60408051808201909152600081526060602082015290565b600060208284031215610d80578081fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610da3578182fd5b9392505050565b600060208284031215610dbb578081fd5b81356001600160e01b031981168114610da3578182fd5b60008151808452610dea816020860160208601610f19565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60007fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008460601b1682528251610e59816014850160208701610f19565b919091016014019392505050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015610ef9577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452610ee7858351610dd2565b94509285019290850190600101610ead565b5092979650505050505050565b600060208252610da36020830184610dd2565b60005b83811015610f34578181015183820152602001610f1c565b83811115610f43576000848401525b5050505056fea2646970667358221220f0d1640512bf79e5f73a3ef31b66dbd001d5c525d8e0cfb0e8b06da9b180c78164736f6c63430006050033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806352ef6b2c146100515780637a0ed6271461006f578063adfca15e14610084578063cdffacc614610097575b600080fd5b6100596100b7565b6040516100669190610f06565b60405180910390f35b61007761034f565b6040516100669190610e88565b610059610092366004610d6f565b610ad1565b6100aa6100a5366004610daa565b610d00565b6040516100669190610e67565b606060006100c3610d33565b60038101549091506fffffffffffffffffffffffffffffffff81169060801c60088202810181156100f5576001909201915b60608167ffffffffffffffff8111801561010e57600080fd5b50604051908082528060200260200182016040528015610138578160200160208202803683370190505b50905060008060005b84821015610261576000818152600289016020526040812054905b6008811015610257576001909301928684111561017857610257565b6001600160e01b0319602080830284901b918216600090815260018d01909152604081205460601c90805b88811015610203578981815181106101b757fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156101fb5760019150610203565b6001016101a3565b508015610213575061024f915050565b8189898151811061022057fe5b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101525050600190950194505b60010161015c565b5050600101610141565b5060608260140267ffffffffffffffff8111801561027e57600080fd5b506040519080825280601f01601f1916602001820160405280156102a9576020820181803683370190505b5090506000805b848110156103405760005b601481101561033757806008028783815181106102d457fe5b602002602001015160601b6bffffffffffffffffffffffff1916901b8484815181106102fc57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600192830192016102bb565b506001016102b0565b50909850505050505050505090565b6060600061035b610d33565b60038101549091506fffffffffffffffffffffffffffffffff81169060801c600882028101811561038d576001909201915b80601481111561039b575060145b60608167ffffffffffffffff811180156103b457600080fd5b506040519080825280602002602001820160405280156103ee57816020015b6103db610d57565b8152602001906001900390816103d35790505b50905060608267ffffffffffffffff8111801561040a57600080fd5b50604051908082528060200260200182016040528015610434578160200160208202803683370190505b50905060008060005b868210156108f757600081815260028b016020526040812054905b60088110156108ed5760019093019288841115610474576108ed565b6001600160e01b0319602080830284901b918216600090815260018f01909152604081205460601c90805b888110156106b0578273ffffffffffffffffffffffffffffffffffffffff168b82815181106104ca57fe5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1614156106a85760008b828151811061050057fe5b602002602001015160200151519050808b838151811061051c57fe5b602002602001015160010160ff1611156105fa5760608d820167ffffffffffffffff8111801561054b57600080fd5b50604051908082528060200260200182016040528015610575578160200160208202803683370190505b50905060005b828110156105db578d848151811061058f57fe5b60200260200101516020015181815181106105a657fe5b60200260200101518282815181106105ba57fe5b6001600160e01b03199092166020928302919091019091015260010161057b565b50808d84815181106105e957fe5b602002602001015160200181905250505b848c838151811061060757fe5b6020026020010151602001518c848151811061061f57fe5b602002602001015160ff168151811061063457fe5b60200260200101906001600160e01b03191690816001600160e01b0319168152505060ff8b838151811061066457fe5b602002602001015160ff161061067957600080fd5b8a828151811061068557fe5b60200260200101805180919060010160ff1660ff168152505060019250506106b0565b60010161049f565b5080156106c057506108e5915050565b8951600189018110156107e45760608c820167ffffffffffffffff811180156106e857600080fd5b5060405190808252806020026020018201604052801561072257816020015b61070f610d57565b8152602001906001900390816107075790505b50905060608d830167ffffffffffffffff8111801561074057600080fd5b5060405190808252806020026020018201604052801561076a578160200160208202803683370190505b50905060005b838110156107dd578d818151811061078457fe5b602002602001015183828151811061079857fe5b60200260200101819052508c81815181106107af57fe5b60200260200101518282815181106107c357fe5b60ff90921660209283029190910190910152600101610770565b50909b5099505b828b8a815181106107f157fe5b602090810291909101015173ffffffffffffffffffffffffffffffffffffffff90911690528b67ffffffffffffffff8111801561082d57600080fd5b50604051908082528060200260200182016040528015610857578160200160208202803683370190505b508b8a8151811061086457fe5b602002602001015160200181905250838b8a8151811061088057fe5b60200260200101516020015160008151811061089857fe5b60200260200101906001600160e01b03191690816001600160e01b0319168152505060018a8a815181106108c857fe5b60ff90921660209283029190910190910152505060019096019550505b600101610458565b505060010161043d565b5060608267ffffffffffffffff8111801561091157600080fd5b5060405190808252806020026020018201604052801561094557816020015b60608152602001906001900390816109305790505b50905060005b83811015610ac257600085828151811061096157fe5b602002602001015160ff16905060608160040267ffffffffffffffff8111801561098a57600080fd5b506040519080825280601f01601f1916602001820160405280156109b5576020820181803683370190505b50905060608884815181106109c657fe5b60200260200101516020015190506000805b84811015610a605760005b6004811015610a5757806008028483815181106109fc57fe5b60200260200101516001600160e01b031916901b858481518110610a1c57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600192830192016109e3565b506001016109d8565b50898581518110610a6d57fe5b60200260200101516000015183604051602001610a8b929190610e1c565b604051602081830303815290604052868681518110610aa657fe5b602002602001018190525050505050808060010191505061094b565b50995050505050505050505090565b60606000610add610d33565b60038101549091506fffffffffffffffffffffffffffffffff81169060801c6008820281018115610b0f576001909201915b600060608267ffffffffffffffff81118015610b2a57600080fd5b50604051908082528060200260200182016040528015610b54578160200160208202803683370190505b5090506000805b84821015610c19576000818152600289016020526040812054905b6008811015610c0f5760019093019286841115610b9257610c0f565b6001600160e01b0319602080830284901b918216600090815260018d01909152604090205460601c73ffffffffffffffffffffffffffffffffffffffff8e16811415610c055781878981518110610be557fe5b6001600160e01b0319909216602092830291909101909101526001909701965b5050600101610b76565b5050600101610b5b565b5060608360040267ffffffffffffffff81118015610c3657600080fd5b506040519080825280601f01601f191660200182016040528015610c61576020820181803683370190505b5090506000805b85811015610cf05760005b6004811015610ce75780600802868381518110610c8c57fe5b60200260200101516001600160e01b031916901b848481518110610cac57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060019283019201610c73565b50600101610c68565b50909a9950505050505050505050565b600080610d0b610d33565b6001600160e01b0319841660009081526001909101602052604090205460601c915050919050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b60408051808201909152600081526060602082015290565b600060208284031215610d80578081fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610da3578182fd5b9392505050565b600060208284031215610dbb578081fd5b81356001600160e01b031981168114610da3578182fd5b60008151808452610dea816020860160208601610f19565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60007fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008460601b1682528251610e59816014850160208701610f19565b919091016014019392505050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015610ef9577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452610ee7858351610dd2565b94509285019290850190600101610ead565b5092979650505050505050565b600060208252610da36020830184610dd2565b60005b83811015610f34578181015183820152602001610f1c565b83811115610f43576000848401525b5050505056fea2646970667358221220f0d1640512bf79e5f73a3ef31b66dbd001d5c525d8e0cfb0e8b06da9b180c78164736f6c63430006050033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "metadata": "{\"compiler\":{\"version\":\"0.6.5+commit.f956cc89\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_functionSelector\",\"type\":\"bytes4\"}],\"name\":\"facetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facetAddresses\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_facet\",\"type\":\"address\"}],\"name\":\"facetFunctionSelectors\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facets\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"facetAddress(bytes4)\":{\"details\":\"If facet is not found return address(0).\",\"params\":{\"_functionSelector\":\"The function selector.\"},\"returns\":{\"_0\":\"The facet address.\"}},\"facetFunctionSelectors(address)\":{\"params\":{\"_facet\":\"The facet address.\"},\"returns\":{\"_0\":\"A bytes array of function selectors. The return value is tightly packed. Here is an example: return abi.encodePacked(selector1, selector2, selector3, ...)\"}}}},\"userdoc\":{\"methods\":{\"facetAddress(bytes4)\":{\"notice\":\"Gets the facet that supports the given selector.\"},\"facetAddresses()\":{\"notice\":\"Get all the facet addresses used by a diamond.\"},\"facetFunctionSelectors(address)\":{\"notice\":\"Gets all the function selectors supported by a specific facet.\"},\"facets()\":{\"notice\":\"Gets all facets and their selectors.\"}}}},\"settings\":{\"compilationTarget\":{\"solc_0.6/proxy/diamond/DiamondLoupeFacet.sol\":\"DiamondLoupeFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"solc_0.6/proxy/diamond/DiamondHeaders.sol\":{\"content\":\"pragma solidity ^0.6.4;\\npragma experimental ABIEncoderV2;\\n\\n// * from https://github.com/mudgen/Diamond/blob/8235e6b63b47aab08a81c6f73bfb7faafda79ca4/contracts/\\n\\ninterface Diamond {\\n    /// @notice _diamondCut is an array of bytes arrays.\\n    /// This argument is tightly packed for gas efficiency.\\n    /// That means no padding with zeros.\\n    /// Here is the structure of _diamondCut:\\n    /// _diamondCut = [\\n    ///     abi.encodePacked(facet, sel1, sel2, sel3, ...),\\n    ///     abi.encodePacked(facet, sel1, sel2, sel4, ...),\\n    ///     ...\\n    /// ]\\n    /// facet is the address of a facet\\n    /// sel1, sel2, sel3 etc. are four-byte function selectors.\\n    function diamondCut(bytes[] calldata _diamondCut) external;\\n\\n    event DiamondCut(bytes[] _diamondCut);\\n}\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface DiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools. Therefore the return values are tightly\\n    /// packed for efficiency. That means no padding with zeros.\\n\\n    /// @notice Gets all facets and their selectors.\\n    /// @return An array of bytes arrays containing each facet\\n    ///         and each facet's selectors.\\n    /// The return value is tightly packed.\\n    /// Here is the structure of the return value:\\n    /// returnValue = [\\n    ///     abi.encodePacked(facet, sel1, sel2, sel3, ...),\\n    ///     abi.encodePacked(facet, sel1, sel2, sel3, ...),\\n    ///     ...\\n    /// ]\\n    /// facet is the address of a facet.\\n    /// sel1, sel2, sel3 etc. are four-byte function selectors.\\n    function facets() external view returns (bytes[] memory);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return A byte array of function selectors.\\n    /// The return value is tightly packed. Here is an example:\\n    /// return abi.encodePacked(selector1, selector2, selector3, ...)\\n    function facetFunctionSelectors(address _facet)\\n        external\\n        view\\n        returns (bytes memory);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return A byte array of tightly packed facet addresses.\\n    /// Example return value:\\n    /// return abi.encodePacked(facet1, facet2, facet3, ...)\\n    function facetAddresses() external view returns (bytes memory);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return The facet address.\\n    function facetAddress(bytes4 _functionSelector)\\n        external\\n        view\\n        returns (address);\\n}\\n\\ninterface ERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceID The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xeae8e72fde3952f324d773fd93385191a177e26cce37e0eb9fca5e6ac5781ab8\"},\"solc_0.6/proxy/diamond/DiamondLoupeFacet.sol\":{\"content\":\"pragma solidity ^0.6.4;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge\\n* from https://github.com/mudgen/Diamond/blob/8235e6b63b47aab08a81c6f73bfb7faafda79ca4/contracts/\\n*\\n* Implementation of DiamondLoupe interface.\\n/******************************************************************************/\\n\\nimport \\\"./DiamondStorageContract.sol\\\";\\nimport \\\"./DiamondHeaders.sol\\\";\\n\\ncontract DiamondLoupeFacet is DiamondLoupe, DiamondStorageContract {\\n    /// These functions are expected to be called frequently\\n    /// by tools. Therefore the return values are tightly\\n    /// packed for efficiency. That means no padding with zeros.\\n\\n    struct Facet {\\n        address facet;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facets and their selectors.\\n    /// @return An array of bytes arrays containing each facet\\n    ///         and each facet's selectors.\\n    /// The return value is tightly packed.\\n    /// That means no padding with zeros.\\n    /// Here is the structure of the return value:\\n    /// returnValue = [\\n    ///     abi.encodePacked(facet, sel1, sel2, sel3, ...),\\n    ///     abi.encodePacked(facet, sel1, sel2, sel3, ...),\\n    ///     ...\\n    /// ]\\n    /// facet is the address of a facet.\\n    /// sel1, sel2, sel3 etc. are four-byte function selectors.\\n    function facets() external override view returns (bytes[] memory) {\\n        DiamondStorage storage ds = diamondStorage();\\n        uint256 totalSelectorSlots = ds.selectorSlotsLength;\\n        uint256 selectorSlotLength = uint128(totalSelectorSlots >> 128);\\n        totalSelectorSlots = uint128(totalSelectorSlots);\\n        uint256 totalSelectors = totalSelectorSlots * 8 + selectorSlotLength;\\n        if (selectorSlotLength > 0) {\\n            totalSelectorSlots++;\\n        }\\n\\n        // get default size of arrays\\n        uint256 defaultSize = totalSelectors;\\n        if (defaultSize > 20) {\\n            defaultSize = 20;\\n        }\\n        Facet[] memory facets_ = new Facet[](defaultSize);\\n        uint8[] memory numFacetSelectors = new uint8[](defaultSize);\\n        uint256 numFacets;\\n        uint256 selectorCount;\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorCount < totalSelectors; slotIndex++) {\\n            bytes32 slot = ds.selectorSlots[slotIndex];\\n            for (uint256 selectorIndex; selectorIndex < 8; selectorIndex++) {\\n                selectorCount++;\\n                if (selectorCount > totalSelectors) {\\n                    break;\\n                }\\n                bytes4 selector = bytes4(slot << (selectorIndex * 32));\\n                address facet = address(bytes20(ds.facets[selector]));\\n                bool continueLoop = false;\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (facets_[facetIndex].facet == facet) {\\n                        uint256 arrayLength = facets_[facetIndex]\\n                            .functionSelectors\\n                            .length;\\n                        // if array is too small then enlarge it\\n                        if (numFacetSelectors[facetIndex] + 1 > arrayLength) {\\n                            bytes4[] memory biggerArray = new bytes4[](\\n                                arrayLength + defaultSize\\n                            );\\n                            // copy contents of old array\\n                            for (uint256 i; i < arrayLength; i++) {\\n                                biggerArray[i] = facets_[facetIndex]\\n                                    .functionSelectors[i];\\n                            }\\n                            facets_[facetIndex].functionSelectors = biggerArray;\\n                        }\\n                        facets_[facetIndex]\\n                            .functionSelectors[numFacetSelectors[facetIndex]] = selector;\\n                        // probably will never have more than 255 functions from one facet contract\\n                        require(numFacetSelectors[facetIndex] < 255);\\n                        numFacetSelectors[facetIndex]++;\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n                if (continueLoop) {\\n                    continueLoop = false;\\n                    continue;\\n                }\\n                uint256 arrayLength = facets_.length;\\n                // if array is too small then enlarge it\\n                if (numFacets + 1 > arrayLength) {\\n                    Facet[] memory biggerArray = new Facet[](\\n                        arrayLength + defaultSize\\n                    );\\n                    uint8[] memory biggerArray2 = new uint8[](\\n                        arrayLength + defaultSize\\n                    );\\n                    for (uint256 i; i < arrayLength; i++) {\\n                        biggerArray[i] = facets_[i];\\n                        biggerArray2[i] = numFacetSelectors[i];\\n                    }\\n                    facets_ = biggerArray;\\n                    numFacetSelectors = biggerArray2;\\n                }\\n                facets_[numFacets].facet = facet;\\n                facets_[numFacets].functionSelectors = new bytes4[](\\n                    defaultSize\\n                );\\n                facets_[numFacets].functionSelectors[0] = selector;\\n                numFacetSelectors[numFacets] = 1;\\n                numFacets++;\\n            }\\n        }\\n        bytes[] memory returnFacets = new bytes[](numFacets);\\n        for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n            uint256 numSelectors = numFacetSelectors[facetIndex];\\n            bytes memory selectorsBytes = new bytes(4 * numSelectors);\\n            bytes4[] memory selectors = facets_[facetIndex].functionSelectors;\\n            uint256 bytePosition;\\n            for (uint256 i; i < numSelectors; i++) {\\n                for (uint256 j; j < 4; j++) {\\n                    selectorsBytes[bytePosition] = bytes1(\\n                        selectors[i] << (j * 8)\\n                    );\\n                    bytePosition++;\\n                }\\n            }\\n            returnFacets[facetIndex] = abi.encodePacked(\\n                facets_[facetIndex].facet,\\n                selectorsBytes\\n            );\\n        }\\n        return returnFacets;\\n    }\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return A bytes array of function selectors.\\n    /// The return value is tightly packed. Here is an example:\\n    /// return abi.encodePacked(selector1, selector2, selector3, ...)\\n    function facetFunctionSelectors(address _facet)\\n        external\\n        override\\n        view\\n        returns (bytes memory)\\n    {\\n        DiamondStorage storage ds = diamondStorage();\\n        uint256 totalSelectorSlots = ds.selectorSlotsLength;\\n        uint256 selectorSlotLength = uint128(totalSelectorSlots >> 128);\\n        totalSelectorSlots = uint128(totalSelectorSlots);\\n        uint256 totalSelectors = totalSelectorSlots * 8 + selectorSlotLength;\\n        if (selectorSlotLength > 0) {\\n            totalSelectorSlots++;\\n        }\\n\\n        uint256 numFacetSelectors;\\n        bytes4[] memory facetSelectors = new bytes4[](totalSelectors);\\n        uint256 selectorCount;\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorCount < totalSelectors; slotIndex++) {\\n            bytes32 slot = ds.selectorSlots[slotIndex];\\n            for (uint256 selectorIndex; selectorIndex < 8; selectorIndex++) {\\n                selectorCount++;\\n                if (selectorCount > totalSelectors) {\\n                    break;\\n                }\\n                bytes4 selector = bytes4(slot << (selectorIndex * 32));\\n                address facet = address(bytes20(ds.facets[selector]));\\n                if (_facet == facet) {\\n                    facetSelectors[numFacetSelectors] = selector;\\n                    numFacetSelectors++;\\n                }\\n            }\\n        }\\n        bytes memory returnBytes = new bytes(4 * numFacetSelectors);\\n        uint256 bytePosition;\\n        for (uint256 i; i < numFacetSelectors; i++) {\\n            for (uint256 j; j < 4; j++) {\\n                returnBytes[bytePosition] = bytes1(\\n                    facetSelectors[i] << (j * 8)\\n                );\\n                bytePosition++;\\n            }\\n        }\\n        return returnBytes;\\n    }\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return A byte array of tightly packed facet addresses.\\n    /// Example return value:\\n    /// return abi.encodePacked(facet1, facet2, facet3, ...)\\n    function facetAddresses() external override view returns (bytes memory) {\\n        DiamondStorage storage ds = diamondStorage();\\n        uint256 totalSelectorSlots = ds.selectorSlotsLength;\\n        uint256 selectorSlotLength = uint128(totalSelectorSlots >> 128);\\n        totalSelectorSlots = uint128(totalSelectorSlots);\\n        uint256 totalSelectors = totalSelectorSlots * 8 + selectorSlotLength;\\n        if (selectorSlotLength > 0) {\\n            totalSelectorSlots++;\\n        }\\n        address[] memory facets_ = new address[](totalSelectors);\\n        uint256 numFacets;\\n        uint256 selectorCount;\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorCount < totalSelectors; slotIndex++) {\\n            bytes32 slot = ds.selectorSlots[slotIndex];\\n            for (uint256 selectorIndex; selectorIndex < 8; selectorIndex++) {\\n                selectorCount++;\\n                if (selectorCount > totalSelectors) {\\n                    break;\\n                }\\n                bytes4 selector = bytes4(slot << (selectorIndex * 32));\\n                address facet = address(bytes20(ds.facets[selector]));\\n                bool continueLoop = false;\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (facet == facets_[facetIndex]) {\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n                if (continueLoop) {\\n                    continueLoop = false;\\n                    continue;\\n                }\\n                facets_[numFacets] = facet;\\n                numFacets++;\\n            }\\n        }\\n\\n        bytes memory returnBytes = new bytes(20 * numFacets);\\n        uint256 bytePosition;\\n        for (uint256 i; i < numFacets; i++) {\\n            for (uint256 j; j < 20; j++) {\\n                returnBytes[bytePosition] = bytes1(\\n                    bytes20(facets_[i]) << (j * 8)\\n                );\\n                bytePosition++;\\n            }\\n        }\\n        return returnBytes;\\n    }\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return The facet address.\\n    function facetAddress(bytes4 _functionSelector)\\n        external\\n        override\\n        view\\n        returns (address)\\n    {\\n        DiamondStorage storage ds = diamondStorage();\\n        return address(bytes20(ds.facets[_functionSelector]));\\n    }\\n}\\n\",\"keccak256\":\"0x71926285ec7529cafad32e3c34e714ede046aac0f1d1ba131113ff0dcd912f61\"},\"solc_0.6/proxy/diamond/DiamondStorageContract.sol\":{\"content\":\"pragma solidity ^0.6.4;\\n\\n// * from https://github.com/mudgen/Diamond/blob/8235e6b63b47aab08a81c6f73bfb7faafda79ca4/contracts/\\n\\n// modified to be an abstract\\n\\nabstract contract DiamondStorageContract {\\n    struct DiamondStorage {\\n        // owner of the contract\\n        address contractOwner;\\n        // maps function selectors to the facets that execute the functions.\\n        // and maps the selectors to the slot in the selectorSlots array.\\n        // and maps the selectors to the position in the slot.\\n        // func selector => address facet, uint64 slotsIndex, uint64 slotIndex\\n        mapping(bytes4 => bytes32) facets;\\n        // array of slots of function selectors.\\n        // each slot holds 8 function selectors.\\n        mapping(uint256 => bytes32) selectorSlots;\\n        // uint128 numSelectorsInSlot, uint128 selectorSlotsLength\\n        // selectorSlotsLength is the number of 32-byte slots in selectorSlots.\\n        // selectorSlotLength is the number of selectors in the last slot of\\n        // selectorSlots.\\n        uint256 selectorSlotsLength;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        // ds_slot = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n        assembly {\\n            ds_slot := 0xc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6ddce9c68aba45af0b56b560e6cb369bf53f5c08a25bd4b55ed522aae1c233ee\"}},\"version\":1}",
  "contractFilepath": "solc_0.6/proxy/diamond/DiamondLoupeFacet.sol"
}