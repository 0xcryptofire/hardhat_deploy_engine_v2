{
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.7.1",
  "solcLongVersion": "0.7.1+commit.f4a555be",
  "input": {
    "language": "Solidity",
    "sources": {
      "solc_0.7/diamond/Diamantaire.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.1;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IDiamondCut.sol\";\nimport \"./Diamond.sol\";\n\ncontract Diamantaire {\n    event DiamondCreated(Diamond diamond);\n\n    function createDiamond(\n        address owner,\n        IDiamondCut.Facet[] calldata _diamondCut,\n        bytes calldata data,\n        bytes32 salt\n    ) external payable returns (Diamond diamond) {\n        if (salt != 0x0000000000000000000000000000000000000000000000000000000000000000) {\n            salt = keccak256(abi.encodePacked(salt, owner));\n            diamond = new Diamond{value: msg.value, salt: salt}(address(this));\n        } else {\n            diamond = new Diamond{value: msg.value}(address(this));\n        }\n        emit DiamondCreated(diamond);\n\n        IDiamondCut(address(diamond)).diamondCut(_diamondCut, data.length > 0 ? address(diamond) : address(0), data);\n        IERC173(address(diamond)).transferOwnership(owner);\n    }\n}\n"
      },
      "solc_0.7/diamond/interfaces/IDiamondCut.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.1;\npragma experimental ABIEncoderV2;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n/******************************************************************************/\n\ninterface IDiamondCut {\n    struct Facet {\n        address facetAddress;\n        bytes4[] functionSelectors;\n    }\n\n    /// @notice Add/replace/remove any number of functions and optionally execute\n    ///         a function with delegatecall\n    /// @param _diamondCut Contains the facet addresses and function selectors\n    /// @param _init The address of the contract or facet to execute _calldata\n    /// @param _calldata A function call, including function selector and arguments\n    ///                  _calldata is executed with delegatecall on _init\n    function diamondCut(\n        Facet[] calldata _diamondCut,\n        address _init,\n        bytes calldata _calldata\n    ) external;\n\n    event DiamondCut(Facet[] _diamondCut, address _init, bytes _calldata);\n}\n"
      },
      "solc_0.7/diamond/Diamond.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.1;\npragma experimental ABIEncoderV2;\n\n/******************************************************************************\\\n* Author: Nick Mudge\n*\n* Implementation of an example of a diamond.\n/******************************************************************************/\n\nimport \"./libraries/LibDiamondStorage.sol\";\nimport \"./libraries/LibDiamondCut.sol\";\nimport \"./facets/OwnershipFacet.sol\";\nimport \"./facets/DiamondCutFacet.sol\";\nimport \"./facets/DiamondLoupeFacet.sol\";\n\ncontract Diamond {\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor(address owner) payable {\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\n        ds.contractOwner = owner;\n        emit OwnershipTransferred(address(0), owner);\n\n        DiamondCutFacet diamondCutFacet = new DiamondCutFacet();\n\n        DiamondLoupeFacet diamondLoupeFacet = new DiamondLoupeFacet();\n\n        // Create a OwnershipFacet contract which implements the ERC-173 Ownership interface\n        OwnershipFacet ownershipFacet = new OwnershipFacet();\n\n        IDiamondCut.Facet[] memory diamondCut = new IDiamondCut.Facet[](3);\n\n        // adding diamondCut function\n        diamondCut[0].facetAddress = address(diamondCutFacet);\n        diamondCut[0].functionSelectors = new bytes4[](1);\n        diamondCut[0].functionSelectors[0] = DiamondCutFacet.diamondCut.selector;\n\n        // adding diamond loupe functions\n        diamondCut[1].facetAddress = address(diamondLoupeFacet);\n        diamondCut[1].functionSelectors = new bytes4[](5);\n        diamondCut[1].functionSelectors[0] = DiamondLoupeFacet.facetFunctionSelectors.selector;\n        diamondCut[1].functionSelectors[1] = DiamondLoupeFacet.facets.selector;\n        diamondCut[1].functionSelectors[2] = DiamondLoupeFacet.facetAddress.selector;\n        diamondCut[1].functionSelectors[3] = DiamondLoupeFacet.facetAddresses.selector;\n        diamondCut[1].functionSelectors[4] = DiamondLoupeFacet.supportsInterface.selector;\n\n        // adding ownership functions\n        diamondCut[2].facetAddress = address(ownershipFacet);\n        diamondCut[2].functionSelectors = new bytes4[](2);\n        diamondCut[2].functionSelectors[0] = OwnershipFacet.transferOwnership.selector;\n        diamondCut[2].functionSelectors[1] = OwnershipFacet.owner.selector;\n\n        // execute non-standard internal diamondCut function to add functions\n        LibDiamondCut.diamondCut(diamondCut);\n\n        // adding ERC165 data\n        // ERC165\n        ds.supportedInterfaces[IERC165.supportsInterface.selector] = true;\n\n        // DiamondCut\n        ds.supportedInterfaces[DiamondCutFacet.diamondCut.selector] = true;\n\n        // DiamondLoupe\n        bytes4 interfaceID = IDiamondLoupe.facets.selector ^\n            IDiamondLoupe.facetFunctionSelectors.selector ^\n            IDiamondLoupe.facetAddresses.selector ^\n            IDiamondLoupe.facetAddress.selector;\n        ds.supportedInterfaces[interfaceID] = true;\n\n        // ERC173\n        ds.supportedInterfaces[IERC173.transferOwnership.selector ^ IERC173.owner.selector] = true;\n    }\n\n    // Find facet for function that is called and execute the\n    // function if a facet is found and return any value.\n    fallback() external payable {\n        LibDiamondStorage.DiamondStorage storage ds;\n        bytes32 position = LibDiamondStorage.DIAMOND_STORAGE_POSITION;\n        assembly {\n            ds.slot := position\n        }\n        address facet = ds.selectorToFacetAndPosition[msg.sig].facetAddress;\n        require(facet != address(0), \"Diamond: Function does not exist\");\n        assembly {\n            calldatacopy(0, 0, calldatasize())\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\n            returndatacopy(0, 0, returndatasize())\n            switch result\n                case 0 {\n                    revert(0, returndatasize())\n                }\n                default {\n                    return(0, returndatasize())\n                }\n        }\n    }\n\n    receive() external payable {}\n}\n"
      },
      "solc_0.7/diamond/libraries/LibDiamondStorage.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.1;\npragma experimental ABIEncoderV2;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n/******************************************************************************/\n\nlibrary LibDiamondStorage {\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\"diamond.standard.diamond.storage\");\n\n    struct FacetAddressAndPosition {\n        address facetAddress;\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\n    }\n\n    struct FacetFunctionSelectors {\n        bytes4[] functionSelectors;\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\n    }\n\n    struct DiamondStorage {\n        // owner of the contract\n        address contractOwner;\n        // maps function selector to the facet address and        \n        // the position of the selector in the facetFunctionSelectors.selectors array\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\n        // maps facet addresses to function selectors\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\n        // facet addresses\n        address[] facetAddresses;\n        // Used to query if a contract implements an interface.\n        // Used to implement ERC-165.\n        mapping(bytes4 => bool) supportedInterfaces;\n    }\n\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\n        bytes32 position = DIAMOND_STORAGE_POSITION;\n        assembly {\n            ds.slot := position\n        }\n    }\n}\n"
      },
      "solc_0.7/diamond/libraries/LibDiamondCut.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.1;\npragma experimental ABIEncoderV2;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n*\n* Implementation of internal diamondCut function.\n/******************************************************************************/\n\nimport \"./LibDiamondStorage.sol\";\nimport \"../interfaces/IDiamondCut.sol\";\n\nlibrary LibDiamondCut {\n    event DiamondCut(IDiamondCut.Facet[] _diamondCut, address _init, bytes _calldata);\n\n    // Non-standard internal function version of diamondCut\n    // This code is almost the same as externalCut, except it is using\n    // 'Facet[] memory _diamondCut' instead of 'Facet[] calldata _diamondCut'\n    // and it DOES issue the DiamondCut event\n    // The code is duplicated to prevent copying calldata to memory which\n    // causes a Solidity error for a two dimensional array.\n    function diamondCut(IDiamondCut.Facet[] memory _diamondCut) internal {\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\n            address newFacetAddress = _diamondCut[facetIndex].facetAddress;\n            // add or replace function\n            if (newFacetAddress != address(0)) {\n                uint256 facetAddressPosition = ds.facetFunctionSelectors[newFacetAddress].facetAddressPosition;\n                // add new facet address if it does not exist\n                if (facetAddressPosition == 0 && ds.facetFunctionSelectors[newFacetAddress].functionSelectors.length == 0) {\n                    hasContractCode(newFacetAddress, \"LibDiamondCut: New facet has no code\");\n                    facetAddressPosition = ds.facetAddresses.length;\n                    ds.facetAddresses.push(newFacetAddress);\n                    ds.facetFunctionSelectors[newFacetAddress].facetAddressPosition = uint16(facetAddressPosition);\n                }\n                // add or replace selectors\n                for (uint256 selectorIndex; selectorIndex < _diamondCut[facetIndex].functionSelectors.length; selectorIndex++) {\n                    bytes4 selector = _diamondCut[facetIndex].functionSelectors[selectorIndex];\n                    address oldFacet = ds.selectorToFacetAndPosition[selector].facetAddress;\n                    // add\n                    if (oldFacet == address(0)) {\n                        addSelector(newFacetAddress, selector);\n                    } else {\n                        // replace\n                        if (oldFacet != newFacetAddress) {\n                            removeSelector(selector);\n                            addSelector(newFacetAddress, selector);\n                        }\n                    }\n                }\n            } else {\n                // remove selectors\n                for (uint256 selectorIndex; selectorIndex < _diamondCut[facetIndex].functionSelectors.length; selectorIndex++) {\n                    removeSelector(_diamondCut[facetIndex].functionSelectors[selectorIndex]);\n                }\n            }\n        }\n        emit DiamondCut(_diamondCut, address(0), new bytes(0));\n    }\n\n    function addSelector(address _newFacet, bytes4 _selector) internal {\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\n        uint256 selectorPosition = ds.facetFunctionSelectors[_newFacet].functionSelectors.length;\n        ds.facetFunctionSelectors[_newFacet].functionSelectors.push(_selector);\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _newFacet;\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = uint16(selectorPosition);\n    }\n\n    function removeSelector(bytes4 _selector) internal {\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\n        address oldFacet = ds.selectorToFacetAndPosition[_selector].facetAddress;\n        // if function does not exist then do nothing and return\n        if (oldFacet == address(0)) {\n            return;\n        }\n        // replace selector with last selector, then delete last selector\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[oldFacet].functionSelectors.length - 1;\n        bytes4 lastSelector = ds.facetFunctionSelectors[oldFacet].functionSelectors[lastSelectorPosition];\n        // if not the same then replace _selector with lastSelector\n        if (lastSelector != _selector) {\n            ds.facetFunctionSelectors[oldFacet].functionSelectors[selectorPosition] = lastSelector;\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint16(selectorPosition);\n        }\n        // delete the last selector\n        ds.facetFunctionSelectors[oldFacet].functionSelectors.pop();\n        delete ds.selectorToFacetAndPosition[_selector];\n\n        // if no more selectors for facet address then delete the facet address\n        if (lastSelectorPosition == 0) {\n            // replace facet address with last facet address and delete last facet address\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\n            address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[oldFacet].facetAddressPosition;\n            if (oldFacet != lastFacetAddress) {\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = uint16(facetAddressPosition);\n            }\n            ds.facetAddresses.pop();\n            delete ds.facetFunctionSelectors[oldFacet];\n        }\n    }\n\n    function hasContractCode(address _contract, string memory _errorMessage) internal view {\n        uint256 contractSize;\n        assembly {\n            contractSize := extcodesize(_contract)\n        }\n        require(contractSize > 0, _errorMessage);\n    }\n}\n"
      },
      "solc_0.7/diamond/facets/OwnershipFacet.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.1;\npragma experimental ABIEncoderV2;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n/******************************************************************************/\n\nimport \"../libraries/LibDiamondStorage.sol\";\nimport \"../interfaces/IERC173.sol\";\n\ncontract OwnershipFacet is IERC173 {\n    function transferOwnership(address newOwner) external override {\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\n        address currentOwner = ds.contractOwner;\n        require(msg.sender == currentOwner, \"Must own the contract.\");\n        ds.contractOwner = newOwner;\n        emit OwnershipTransferred(currentOwner, newOwner);\n    }\n\n    function owner() external override view returns (address) {\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\n        return ds.contractOwner;\n    }\n}\n"
      },
      "solc_0.7/diamond/facets/DiamondCutFacet.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.1;\npragma experimental ABIEncoderV2;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n*\n* Implementation of diamondCut external function.\n/******************************************************************************/\n\nimport \"../libraries/LibDiamondStorage.sol\";\nimport \"../interfaces/IDiamondCut.sol\";\nimport \"../libraries/LibDiamondCut.sol\";\n\ncontract DiamondCutFacet is IDiamondCut {\n    // Standard diamondCut external function\n    /// @notice Add/replace/remove any number of functions and optionally execute\n    ///         a function with delegatecall\n    /// @param _diamondCut Contains the facet addresses and function selectors\n    /// @param _init The address of the contract or facet to execute _calldata\n    /// @param _calldata A function call, including function selector and arguments\n    ///                  _calldata is executed with delegatecall on _init\n    function diamondCut(\n        Facet[] calldata _diamondCut,\n        address _init,\n        bytes calldata _calldata\n    ) external override {\n        externalCut(_diamondCut);\n        emit DiamondCut(_diamondCut, _init, _calldata);\n        if (_init == address(0)) {\n            require(_calldata.length == 0, \"DiamondCutFacet: _init is address(0) but_calldata is not empty\");\n        } else {\n            require(_calldata.length > 0, \"DiamondCutFacet: _calldata is empty but _init is not address(0)\");\n            if (_init != address(this)) {\n                LibDiamondCut.hasContractCode(_init, \"DiamondCutFacet: _init address has no code\");\n            }\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\n            if (!success) {\n                if (error.length > 0) {\n                    // bubble up the error\n                    revert(string(error));\n                } else {\n                    revert(\"DiamondCutFacet: _init function reverted\");\n                }\n            }\n        }\n    }\n\n    // diamondCut helper function\n    // This code is almost the same as the internal diamondCut function,\n    // except it is using 'Facets[] calldata _diamondCut' instead of\n    // 'Facet[] memory _diamondCut', and it does not issue the DiamondCut event.\n    // The code is duplicated to prevent copying calldata to memory which\n    // causes a Solidity error for two dimensional arrays.\n    function externalCut(Facet[] calldata _diamondCut) internal {\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\n        require(msg.sender == ds.contractOwner, \"Must own the contract.\");\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\n            address newFacetAddress = _diamondCut[facetIndex].facetAddress;\n            // add or replace function\n            if (newFacetAddress != address(0)) {\n                uint256 facetAddressPosition = ds.facetFunctionSelectors[newFacetAddress].facetAddressPosition;\n                // add new facet address if it does not exist\n                if (facetAddressPosition == 0 && ds.facetFunctionSelectors[newFacetAddress].functionSelectors.length == 0) {\n                    LibDiamondCut.hasContractCode(newFacetAddress, \"DiamondCutFacet: New facet has no code\");\n                    facetAddressPosition = ds.facetAddresses.length;\n                    ds.facetAddresses.push(newFacetAddress);\n                    ds.facetFunctionSelectors[newFacetAddress].facetAddressPosition = uint16(facetAddressPosition);\n                }\n                // add or replace selectors\n                for (uint256 selectorIndex; selectorIndex < _diamondCut[facetIndex].functionSelectors.length; selectorIndex++) {\n                    bytes4 selector = _diamondCut[facetIndex].functionSelectors[selectorIndex];\n                    address oldFacet = ds.selectorToFacetAndPosition[selector].facetAddress;\n                    // add\n                    if (oldFacet == address(0)) {\n                        LibDiamondCut.addSelector(newFacetAddress, selector);\n                    } else {\n                        // replace\n                        if (oldFacet != newFacetAddress) {\n                            LibDiamondCut.removeSelector(selector);\n                            LibDiamondCut.addSelector(newFacetAddress, selector);\n                        }\n                    }\n                }\n            } else {\n                // remove selectors\n                for (uint256 selectorIndex; selectorIndex < _diamondCut[facetIndex].functionSelectors.length; selectorIndex++) {\n                    LibDiamondCut.removeSelector(_diamondCut[facetIndex].functionSelectors[selectorIndex]);\n                }\n            }\n        }\n    }\n}\n"
      },
      "solc_0.7/diamond/facets/DiamondLoupeFacet.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.1;\npragma experimental ABIEncoderV2;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n*\n* Implementation of DiamondLoupe interface.\n/******************************************************************************/\n\nimport \"../libraries/LibDiamondStorage.sol\";\nimport \"../interfaces/IDiamondCut.sol\";\nimport \"../interfaces/IDiamondLoupe.sol\";\nimport \"../interfaces/IERC165.sol\";\n\ncontract DiamondLoupeFacet is IDiamondLoupe, IERC165 {\n    // Diamond Loupe Functions\n    ////////////////////////////////////////////////////////////////////\n    /// These functions are expected to be called frequently\n    /// by tools. Therefore the return values are tightly\n    /// packed for efficiency. That means no padding with zeros.\n\n    // struct Facet {\n    //     address facetAddress;\n    //     bytes4[] functionSelectors;\n    // }\n\n    /// @notice Gets all facets and their selectors.\n    /// @return facets_ Facet\n    function facets() external override view returns (Facet[] memory facets_) {\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\n        uint256 numFacets = ds.facetAddresses.length;\n        facets_ = new Facet[](numFacets);\n        for (uint256 i; i < numFacets; i++) {\n            address facetAddress = ds.facetAddresses[i];\n            facets_[i].facetAddress = facetAddress;\n            facets_[i].functionSelectors = ds.facetFunctionSelectors[facetAddress].functionSelectors;\n        }\n    }\n\n    /// @notice Gets all the function selectors provided by a facet.\n    /// @param _facet The facet address.\n    /// @return facetFunctionSelectors_\n    function facetFunctionSelectors(address _facet) external override view returns (bytes4[] memory facetFunctionSelectors_) {\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\n        facetFunctionSelectors_ = ds.facetFunctionSelectors[_facet].functionSelectors;\n    }\n\n    /// @notice Get all the facet addresses used by a diamond.\n    /// @return facetAddresses_\n    function facetAddresses() external override view returns (address[] memory facetAddresses_) {\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\n        facetAddresses_ = ds.facetAddresses;\n    }\n\n    /// @notice Gets the facet that supports the given selector.\n    /// @dev If facet is not found return address(0).\n    /// @param _functionSelector The function selector.\n    /// @return facetAddress_ The facet address.\n    function facetAddress(bytes4 _functionSelector) external override view returns (address facetAddress_) {\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\n        facetAddress_ = ds.selectorToFacetAndPosition[_functionSelector].facetAddress;\n    }\n\n    // This implements ERC-165.\n    function supportsInterface(bytes4 _interfaceId) external override view returns (bool) {\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\n        return ds.supportedInterfaces[_interfaceId];\n    }\n}\n"
      },
      "solc_0.7/diamond/interfaces/IERC173.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.1;\npragma experimental ABIEncoderV2;\n\n/// @title ERC-173 Contract Ownership Standard\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\n/* is ERC165 */\ninterface IERC173 {\n    /// @dev This emits when ownership of a contract changes.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @notice Get the address of the owner\n    /// @return The address of the owner.\n    function owner() external view returns (address);\n\n    /// @notice Set the address of the new owner of the contract\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\n    /// @param _newOwner The address of the new owner of the contract\n    function transferOwnership(address _newOwner) external;\n}\n"
      },
      "solc_0.7/diamond/interfaces/IDiamondLoupe.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.1;\npragma experimental ABIEncoderV2;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n/******************************************************************************/\n\n// A loupe is a small magnifying glass used to look at diamonds.\n// These functions look at diamonds\ninterface IDiamondLoupe {\n    /// These functions are expected to be called frequently\n    /// by tools.\n\n    struct Facet {\n        address facetAddress;\n        bytes4[] functionSelectors;\n    }\n\n    /// @notice Gets all facet addresses and their four byte function selectors.\n    /// @return facets_ Facet\n    function facets() external view returns (Facet[] memory facets_);\n\n    /// @notice Gets all the function selectors supported by a specific facet.\n    /// @param _facet The facet address.\n    /// @return facetFunctionSelectors_\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\n\n    /// @notice Get all the facet addresses used by a diamond.\n    /// @return facetAddresses_\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\n\n    /// @notice Gets the facet that supports the given selector.\n    /// @dev If facet is not found return address(0).\n    /// @param _functionSelector The function selector.\n    /// @return facetAddress_ The facet address.\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\n}\n"
      },
      "solc_0.7/diamond/interfaces/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.1;\npragma experimental ABIEncoderV2;\n\ninterface IERC165 {\n    /// @notice Query if a contract implements an interface\n    /// @param interfaceId The interface identifier, as specified in ERC-165\n    /// @dev Interface identification is specified in ERC-165. This function\n    ///  uses less than 30,000 gas.\n    /// @return `true` if the contract implements `interfaceID` and\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 2000
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata",
            "devdoc",
            "userdoc",
            "storageLayout",
            "evm.gasEstimates"
          ],
          "": [
            "ast"
          ]
        }
      },
      "metadata": {
        "useLiteralContent": true
      }
    }
  },
  "output": {
    "contracts": {
      "solc_0.7/diamond/Diamantaire.sol": {
        "Diamantaire": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "contract Diamond",
                  "name": "diamond",
                  "type": "address"
                }
              ],
              "name": "DiamondCreated",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "facetAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes4[]",
                      "name": "functionSelectors",
                      "type": "bytes4[]"
                    }
                  ],
                  "internalType": "struct IDiamondCut.Facet[]",
                  "name": "_diamondCut",
                  "type": "tuple[]"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes32",
                  "name": "salt",
                  "type": "bytes32"
                }
              ],
              "name": "createDiamond",
              "outputs": [
                {
                  "internalType": "contract Diamond",
                  "name": "diamond",
                  "type": "address"
                }
              ],
              "stateMutability": "payable",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b506138bb806100206000396000f3fe608060405260043610620000205760003560e01c80635c948ae31462000025575b600080fd5b6200003c62000036366004620002e4565b62000054565b6040516200004b91906200049f565b60405180910390f35b60008115620000d2578187604051602001620000729291906200046c565b604051602081830303815290604052805190602001209150348290306040516200009c9062000261565b620000a891906200049f565b82906040518091039083f591505080158015620000c9573d6000803e3d6000fd5b50905062000110565b3430604051620000e29062000261565b620000ee91906200049f565b6040518091039082f09050801580156200010c573d6000803e3d6000fd5b5090505b7f644ca5b0a8b0418e9faf3880659eeb84eaad45ad838b0173808e5ca72f5efc49816040516200014191906200049f565b60405180910390a173ffffffffffffffffffffffffffffffffffffffff811663e712b4e18787866200017557600062000177565b845b88886040518663ffffffff1660e01b81526004016200019b959493929190620004c0565b600060405180830381600087803b158015620001b657600080fd5b505af1158015620001cb573d6000803e3d6000fd5b50506040517ff2fde38b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416925063f2fde38b915062000223908a906004016200049f565b600060405180830381600087803b1580156200023e57600080fd5b505af115801562000253573d6000803e3d6000fd5b505050509695505050505050565b613252806200063483390190565b803573ffffffffffffffffffffffffffffffffffffffff811681146200029457600080fd5b92915050565b60008083601f840112620002ac578182fd5b50813567ffffffffffffffff811115620002c4578182fd5b602083019150836020828501011115620002dd57600080fd5b9250929050565b60008060008060008060808789031215620002fd578182fd5b6200030988886200026f565b9550602087013567ffffffffffffffff8082111562000326578384fd5b818901915089601f8301126200033a578384fd5b81358181111562000349578485fd5b8a602080830285010111156200035d578485fd5b6020830197508096505060408901359150808211156200037b578384fd5b506200038a89828a016200029a565b979a9699509497949695606090950135949350505050565b73ffffffffffffffffffffffffffffffffffffffff169052565b60008284526020808501945082825b85811015620004195781357fffffffff00000000000000000000000000000000000000000000000000000000811680821462000405578586fd5b8852509582019590820190600101620003cb565b509495945050505050565b600082845282826020860137806020848601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011685010190509392505050565b91825260601b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016602082015260340190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b606080825281018590526000602060808084019082890285010189845b8a81101562000597577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8087840301845281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc18d36030181126200053f578687fd5b8c0160408682016200055d866200055783866200026f565b620003a2565b620005698184620005ca565b935090508188870152620005818287018483620003bc565b96880196955050509185019150600101620004dd565b5050620005a783860189620003a2565b8481036040860152620005bc81878962000424565b9a9950505050505050505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112620005ff578283fd5b830160208101925035905067ffffffffffffffff8111156200062057600080fd5b602081023603831315620002dd57600080fdfe60806040526040516200325238038062003252833981016040819052620000269162000cd2565b60006200003d6200056d60201b620000d51760201c565b80546001600160a01b0319166001600160a01b0384169081178255604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36000604051620000979062000c54565b604051809103906000f080158015620000b4573d6000803e3d6000fd5b5090506000604051620000c79062000c62565b604051809103906000f080158015620000e4573d6000803e3d6000fd5b5090506000604051620000f79062000c70565b604051809103906000f08015801562000114573d6000803e3d6000fd5b506040805160038082526080820190925291925060609190816020015b6200013b62000c7e565b8152602001906001900390816200013157905050905083816000815181106200016057fe5b60209081029190910101516001600160a01b03919091169052604080516001808252818301909252908160200160208202803683370190505081600081518110620001a757fe5b60200260200101516020018190525063e712b4e160e01b81600081518110620001cc57fe5b602002602001015160200151600081518110620001e557fe5b60200260200101906001600160e01b03191690816001600160e01b0319168152505082816001815181106200021657fe5b6020908102919091018101516001600160a01b039290921690915260408051600580825260c0820190925291820160a08036833701905050816001815181106200025c57fe5b60200260200101516020018190525063adfca15e60e01b816001815181106200028157fe5b6020026020010151602001516000815181106200029a57fe5b6001600160e01b0319909216602092830291909101909101528051637a0ed62760e01b9082906001908110620002cc57fe5b602002602001015160200151600181518110620002e557fe5b6001600160e01b03199092166020928302919091019091015280516366ffd66360e11b90829060019081106200031757fe5b6020026020010151602001516002815181106200033057fe5b6001600160e01b03199092166020928302919091019091015280516314bbdacb60e21b90829060019081106200036257fe5b6020026020010151602001516003815181106200037b57fe5b6001600160e01b03199092166020928302919091019091015280516301ffc9a760e01b9082906001908110620003ad57fe5b602002602001015160200151600481518110620003c657fe5b60200260200101906001600160e01b03191690816001600160e01b031916815250508181600281518110620003f757fe5b60209081029190910101516001600160a01b03919091169052604080516002808252606082019092529081602001602082028036833701905050816002815181106200043f57fe5b60200260200101516020018190525063f2fde38b60e01b816002815181106200046457fe5b6020026020010151602001516000815181106200047d57fe5b6001600160e01b0319909216602092830291909101909101528051638da5cb5b60e01b9082906002908110620004af57fe5b602002602001015160200151600181518110620004c857fe5b6001600160e01b0319909216602092830291909101820152620004f6908290620000f962000591821b17901c565b50506301ffc9a760e01b6000908152600490930160205250506040808220805460ff19908116600190811790925563e712b4e160e01b845282842080548216831790556348e2b09360e01b845282842080548216831790556307f5828d60e41b845291909220805490911690911790555062000e61565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b6000620005a86200056d60201b620000d51760201c565b905060005b825181101562000802576000838281518110620005c657fe5b60209081029190910101515190506001600160a01b038116156200078b576001600160a01b038116600090815260028401602052604090206001015461ffff16801580156200062d57506001600160a01b0382166000908152600285016020526040902054155b15620006ae5762000658826040518060600160405280602481526020016200322e6024913962000850565b506003830180546001808201835560009283526020808420830180546001600160a01b0319166001600160a01b03871690811790915584526002870190526040909220909101805461ffff191661ffff83161790555b60005b858481518110620006be57fe5b6020026020010151602001515181101562000783576000868581518110620006e257fe5b6020026020010151602001518281518110620006fa57fe5b6020908102919091018101516001600160e01b031981166000908152600189019092526040909120549091506001600160a01b031680620007475762000741858362000883565b62000778565b846001600160a01b0316816001600160a01b03161462000778576200076c8262000938565b62000778858362000883565b5050600101620006b1565b5050620007f8565b60005b8483815181106200079b57fe5b60200260200101516020015151811015620007f657620007ed858481518110620007c157fe5b6020026020010151602001518281518110620007d957fe5b60200260200101516200093860201b60201c565b6001016200078e565b505b50600101620005ad565b5060408051600080825260208201928390527f39725dd03d877043d78fdfe186295e46e6277eb0a3498f2adb51071f42a2bdcb92620008449286929162000da3565b60405180910390a15050565b813b81816200087d5760405162461bcd60e51b815260040162000874919062000e4c565b60405180910390fd5b50505050565b60006200089a6200056d60201b620000d51760201c565b6001600160a01b03909316600081815260028501602090815260408083208054600180820183559185528385206008820401805460e08a901c600460078516026101000a90810263ffffffff909102199091161790556001600160e01b03199097168452909601905293909320805461ffff909316600160a01b0261ffff60a01b196001600160a01b03199094169094179290921692909217905550565b60006200094f6200056d60201b620000d51760201c565b6001600160e01b0319831660009081526001820160205260409020549091506001600160a01b0316806200098557505062000c51565b6001600160e01b0319831660009081526001830160209081526040808320546001600160a01b03851684526002860190925282208054600160a01b90920461ffff169260001983019290919083908110620009dc57fe5b90600052602060002090600891828204019190066004029054906101000a900460e01b9050856001600160e01b031916816001600160e01b0319161462000aaf576001600160a01b0384166000908152600286016020526040902080548291908590811062000a4757fe5b600091825260208083206008830401805463ffffffff60079094166004026101000a938402191660e09590951c929092029390931790556001600160e01b0319831681526001870190915260409020805461ffff60a01b1916600160a01b61ffff8616021790555b6001600160a01b0384166000908152600286016020526040902080548062000ad357fe5b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b0319881682526001870190526040902080546001600160b01b03191690558162000c4b576003850180546000198101916000918390811062000b4957fe5b60009182526020808320909101546001600160a01b0389811680855260028c019093526040909320600101549216925061ffff90911690821462000be3578188600301828154811062000b9857fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055918416815260028a0190915260409020600101805461ffff191661ffff83161790555b8760030180548062000bf157fe5b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b038916825260028a019052604081209062000c3a828262000c96565b50600101805461ffff191690555050505b50505050505b50565b610f5c806200191683390190565b61073f806200287283390190565b61027d8062002fb183390190565b60408051808201909152600081526060602082015290565b50805460008255600701600890049060005260206000209081019062000c5191905b8082111562000cce576000815560010162000cb8565b5090565b60006020828403121562000ce4578081fd5b81516001600160a01b038116811462000cfb578182fd5b9392505050565b6001600160a01b03169052565b6000815180845260208085019450808401835b8381101562000d4a5781516001600160e01b0319168752958201959082019060010162000d22565b509495945050505050565b60008151808452815b8181101562000d7c5760208185018101518683018201520162000d5e565b8181111562000d8e5782602083870101525b50601f01601f19169290920160200192915050565b60006060820160608352808651808352608085019150602092506080838202860101838901855b8381101562000e1b57607f198884030185528151604062000ded85835162000d02565b878201519150808886015262000e068186018362000d0f565b96880196945050509085019060010162000dca565b505062000e2b8487018962000d02565b858103604087015262000e3f818862000d55565b9998505050505050505050565b60006020825262000cfb602083018462000d55565b610aa58062000e716000396000f3fe60806040523661000b57005b600080356001600160e01b03191681527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d60205260409020547fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c9081906001600160a01b0316806100b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100a890610a16565b60405180910390fd5b3660008037600080366000845af43d6000803e8080156100d0573d6000f35b3d6000fd5b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b60006101036100d5565b905060005b825181101561034557600083828151811061011f57fe5b60209081029190910101515190506001600160a01b038116156102dc576001600160a01b038116600090815260028401602052604090206001015461ffff168015801561018457506001600160a01b0382166000908152600285016020526040902054155b1561020e576101ab82604051806060016040528060248152602001610a4c60249139610391565b5060038301805460018082018355600092835260208084208301805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03871690811790915584526002870190526040909220909101805461ffff191661ffff83161790555b60005b85848151811061021d57fe5b602002602001015160200151518110156102d557600086858151811061023f57fe5b602002602001015160200151828151811061025657fe5b6020908102919091018101516001600160e01b031981166000908152600189019092526040909120549091506001600160a01b03168061029f5761029a85836103d2565b6102cb565b846001600160a01b0316816001600160a01b0316146102cb576102c1826104b2565b6102cb85836103d2565b5050600101610211565b505061033c565b60005b8483815181106102eb57fe5b6020026020010151602001515181101561033a5761033285848151811061030e57fe5b602002602001015160200151828151811061032557fe5b60200260200101516104b2565b6001016102df565b505b50600101610108565b5060408051600080825260208201928390527f39725dd03d877043d78fdfe186295e46e6277eb0a3498f2adb51071f42a2bdcb926103859286929161093f565b60405180910390a15050565b813b81816103cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100a891906109fc565b50505050565b60006103dc6100d5565b6001600160a01b03909316600081815260028501602090815260408083208054600180820183559185528385206008820401805460e08a901c600460078516026101000a90810263ffffffff909102199091161790556001600160e01b03199097168452909601905293909320805461ffff90931674010000000000000000000000000000000000000000027fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff73ffffffffffffffffffffffffffffffffffffffff199094169094179290921692909217905550565b60006104bc6100d5565b6001600160e01b0319831660009081526001820160205260409020549091506001600160a01b0316806104f0575050610849565b6001600160e01b0319831660009081526001830160209081526040808320546001600160a01b038516845260028601909252822080547401000000000000000000000000000000000000000090920461ffff16926000198301929091908390811061055757fe5b90600052602060002090600891828204019190066004029054906101000a900460e01b9050857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461067d576001600160a01b038416600090815260028601602052604090208054829190859081106105ea57fe5b600091825260208083206008830401805463ffffffff60079094166004026101000a938402191660e09590951c929092029390931790556001600160e01b031983168152600187019091526040902080547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000061ffff8616021790555b6001600160a01b038416600090815260028601602052604090208054806106a057fe5b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b0319881682526001870190526040902080547fffffffffffffffffffff0000000000000000000000000000000000000000000016905581610843576003850180546000198101916000918390811061072c57fe5b60009182526020808320909101546001600160a01b0389811680855260028c019093526040909320600101549216925061ffff9091169082146107d1578188600301828154811061077957fe5b6000918252602080832091909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03948516179055918416815260028a0190915260409020600101805461ffff191661ffff83161790555b876003018054806107de57fe5b600082815260208082208301600019908101805473ffffffffffffffffffffffffffffffffffffffff191690559092019092556001600160a01b038916825260028a0190526040812090610832828261084c565b50600101805461ffff191690555050505b50505050505b50565b50805460008255600701600890049060005260206000209081019061084991905b80821115610881576000815560010161086d565b5090565b6001600160a01b03169052565b6000815180845260208085019450808401835b838110156108cb5781516001600160e01b031916875295820195908201906001016108a5565b509495945050505050565b60008151808452815b818110156108fb576020818501810151868301820152016108df565b8181111561090c5782602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60006060820160608352808651808352608085019150602092506080838202860101838901855b838110156109cf577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80888403018552815160406109a4858351610885565b87820151915080888601526109bb81860183610892565b968801969450505090850190600101610966565b50506109dd84870189610885565b85810360408701526109ef81886108d6565b9998505050505050505050565b600060208252610a0f60208301846108d6565b9392505050565b6020808252818101527f4469616d6f6e643a2046756e6374696f6e20646f6573206e6f7420657869737460408201526060019056fe4c69624469616d6f6e644375743a204e657720666163657420686173206e6f20636f6465a264697066735822122012e7ed35b4a2847b23e9d014f8b7b3c729039992cbc88821d0901892d1f6ba3d64736f6c63430007010033608060405234801561001057600080fd5b50610f3c806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063e712b4e114610030575b600080fd5b61004361003e366004610a05565b610045565b005b61004f85856101c2565b7f39725dd03d877043d78fdfe186295e46e6277eb0a3498f2adb51071f42a2bdcb8585858585604051610086959493929190610b83565b60405180910390a16001600160a01b0383166100c85780156100c35760405162461bcd60e51b81526004016100ba90610cea565b60405180910390fd5b6101bb565b806100e55760405162461bcd60e51b81526004016100ba90610d47565b6001600160a01b038316301461011757610117836040518060600160405280602a8152602001610eb7602a91396104b6565b60006060846001600160a01b03168484604051610135929190610b73565b600060405180830381855af49150503d8060008114610170576040519150601f19603f3d011682016040523d82523d6000602084013e610175565b606091505b5091509150816101b8578051156101a0578060405162461bcd60e51b81526004016100ba9190610c60565b60405162461bcd60e51b81526004016100ba90610da4565b50505b5050505050565b60006101cc6104d7565b80549091506001600160a01b031633146101f85760405162461bcd60e51b81526004016100ba90610cb3565b60005b828110156104b057600084848381811061021157fe5b90506020028101906102239190610e4f565b6102319060208101906109e3565b90506001600160a01b03811615610412576001600160a01b038116600090815260028401602052604090206001015461ffff168015801561028a57506001600160a01b0382166000908152600285016020526040902054155b15610314576102b182604051806060016040528060268152602001610ee1602691396104b6565b5060038301805460018082018355600092835260208084208301805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03871690811790915584526002870190526040909220909101805461ffff191661ffff83161790555b60005b86868581811061032357fe5b90506020028101906103359190610e4f565b610343906020810190610e01565b905081101561040b57600087878681811061035a57fe5b905060200281019061036c9190610e4f565b61037a906020810190610e01565b8381811061038457fe5b90506020020160208101906103999190610ad8565b6001600160e01b0319811660009081526001880160205260409020549091506001600160a01b0316806103d5576103d085836104fb565b610401565b846001600160a01b0316816001600160a01b031614610401576103f7826105db565b61040185836104fb565b5050600101610317565b50506104a7565b60005b85858481811061042157fe5b90506020028101906104339190610e4f565b610441906020810190610e01565b90508110156104a55761049d86868581811061045957fe5b905060200281019061046b9190610e4f565b610479906020810190610e01565b8381811061048357fe5b90506020020160208101906104989190610ad8565b6105db565b600101610415565b505b506001016101fb565b50505050565b813b81816104b05760405162461bcd60e51b81526004016100ba9190610c60565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b60006105056104d7565b6001600160a01b03909316600081815260028501602090815260408083208054600180820183559185528385206008820401805460e08a901c600460078516026101000a90810263ffffffff909102199091161790556001600160e01b03199097168452909601905293909320805461ffff90931674010000000000000000000000000000000000000000027fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff73ffffffffffffffffffffffffffffffffffffffff199094169094179290921692909217905550565b60006105e56104d7565b6001600160e01b0319831660009081526001820160205260409020549091506001600160a01b031680610619575050610972565b6001600160e01b0319831660009081526001830160209081526040808320546001600160a01b038516845260028601909252822080547401000000000000000000000000000000000000000090920461ffff16926000198301929091908390811061068057fe5b90600052602060002090600891828204019190066004029054906101000a900460e01b9050857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146107a6576001600160a01b0384166000908152600286016020526040902080548291908590811061071357fe5b600091825260208083206008830401805463ffffffff60079094166004026101000a938402191660e09590951c929092029390931790556001600160e01b031983168152600187019091526040902080547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000061ffff8616021790555b6001600160a01b038416600090815260028601602052604090208054806107c957fe5b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b0319881682526001870190526040902080547fffffffffffffffffffff000000000000000000000000000000000000000000001690558161096c576003850180546000198101916000918390811061085557fe5b60009182526020808320909101546001600160a01b0389811680855260028c019093526040909320600101549216925061ffff9091169082146108fa57818860030182815481106108a257fe5b6000918252602080832091909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03948516179055918416815260028a0190915260409020600101805461ffff191661ffff83161790555b8760030180548061090757fe5b600082815260208082208301600019908101805473ffffffffffffffffffffffffffffffffffffffff191690559092019092556001600160a01b038916825260028a019052604081209061095b8282610975565b50600101805461ffff191690555050505b50505050505b50565b50805460008255600701600890049060005260206000209081019061097291905b808211156109aa5760008155600101610996565b5090565b80356001600160a01b03811681146109c557600080fd5b92915050565b80356001600160e01b0319811681146109c557600080fd5b6000602082840312156109f4578081fd5b6109fe83836109ae565b9392505050565b600080600080600060608688031215610a1c578081fd5b853567ffffffffffffffff80821115610a33578283fd5b818801915088601f830112610a46578283fd5b813581811115610a54578384fd5b60208a818284028601011115610a68578485fd5b8084019850819750610a7c8b828c016109ae565b965060408a0135935082841115610a91578485fd5b838a0193508a601f850112610aa4578485fd5b8335915082821115610ab4578485fd5b8a81838601011115610ac4578485fd5b979a96995094975050909401935090919050565b600060208284031215610ae9578081fd5b6109fe83836109cb565b6001600160a01b03169052565b60008284526020808501945082825b85811015610b3e578282016001600160e01b0319610b2d82856109cb565b168852968301969150600101610b0f565b509495945050505050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b6000828483379101908152919050565b606080825281018590526000602060808084019082890285010189845b8a811015610c31577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808784030184528135603e198d3603018112610be2578687fd5b8c016040868201610bfc86610bf783866109ae565b610af3565b610c068184610e6e565b935090508188870152610c1c8287018483610b00565b96880196955050509185019150600101610ba0565b5050610c3f83860189610af3565b8481036040860152610c52818789610b49565b9a9950505050505050505050565b6000602080835283518082850152825b81811015610c8c57858101830151858201604001528201610c70565b81811115610c9d5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526016908201527f4d757374206f776e2074686520636f6e74726163742e00000000000000000000604082015260600190565b6020808252603e908201527f4469616d6f6e6443757446616365743a205f696e69742069732061646472657360408201527f73283029206275745f63616c6c64617461206973206e6f7420656d7074790000606082015260800190565b6020808252603f908201527f4469616d6f6e6443757446616365743a205f63616c6c6461746120697320656d60408201527f70747920627574205f696e6974206973206e6f74206164647265737328302900606082015260800190565b60208082526028908201527f4469616d6f6e6443757446616365743a205f696e69742066756e6374696f6e2060408201527f7265766572746564000000000000000000000000000000000000000000000000606082015260800190565b6000808335601e19843603018112610e17578283fd5b83018035915067ffffffffffffffff821115610e31578283fd5b6020908101925081023603821315610e4857600080fd5b9250929050565b60008235603e19833603018112610e64578182fd5b9190910192915050565b6000808335601e19843603018112610e84578283fd5b830160208101925035905067ffffffffffffffff811115610ea457600080fd5b602081023603831315610e4857600080fdfe4469616d6f6e6443757446616365743a205f696e6974206164647265737320686173206e6f20636f64654469616d6f6e6443757446616365743a204e657720666163657420686173206e6f20636f6465a2646970667358221220d549925be7f162ad8bee0e5faaf2f9a9e548ed65080d804fbd4dcdb3aa77977264736f6c63430007010033608060405234801561001057600080fd5b5061071f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80637a0ed627116100505780637a0ed627146100aa578063adfca15e146100bf578063cdffacc6146100df57610067565b806301ffc9a71461006c57806352ef6b2c14610095575b600080fd5b61007f61007a36600461050f565b6100ff565b60405161008c91906106de565b60405180910390f35b61009d61014a565b60405161008c91906105cc565b6100b26101c3565b60405161008c9190610639565b6100d26100cd3660046104d4565b610370565b60405161008c9190610626565b6100f26100ed36600461050f565b61043c565b60405161008c91906105ab565b60008061010a610498565b7fffffffff00000000000000000000000000000000000000000000000000000000841660009081526004909101602052604090205460ff16915050919050565b60606000610156610498565b600381018054604080516020808402820181019092528281529394508301828280156101b857602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161018d575b505050505091505090565b606060006101cf610498565b60038101549091508067ffffffffffffffff811180156101ee57600080fd5b5060405190808252806020026020018201604052801561022857816020015b6102156104bc565b81526020019060019003908161020d5790505b50925060005b8181101561036a57600083600301828154811061024757fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508085838151811061028157fe5b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff928316905290821660009081526002860182526040908190208054825181850281018501909352808352919290919083018282801561034257602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116102ef5790505b505050505085838151811061035357fe5b60209081029190910181015101525060010161022e565b50505090565b6060600061037c610498565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600282016020908152604091829020805483518184028101840190945280845293945091929083018282801561042f57602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116103dc5790505b5050505050915050919050565b600080610447610498565b7fffffffff00000000000000000000000000000000000000000000000000000000909316600090815260019093016020525050604090205473ffffffffffffffffffffffffffffffffffffffff1690565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b60408051808201909152600081526060602082015290565b6000602082840312156104e5578081fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610508578182fd5b9392505050565b600060208284031215610520578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610508578182fd5b6000815180845260208085019450808401835b838110156105a05781517fffffffff000000000000000000000000000000000000000000000000000000001687529582019590820190600101610562565b509495945050505050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6020808252825182820181905260009190848201906040850190845b8181101561061a57835173ffffffffffffffffffffffffffffffffffffffff16835292840192918401916001016105e8565b50909695505050505050565b600060208252610508602083018461054f565b60208082528251828201819052600091906040908185019080840286018301878501865b838110156106d0578883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00185528151805173ffffffffffffffffffffffffffffffffffffffff1684528701518784018790526106bd8785018261054f565b958801959350509086019060010161065d565b509098975050505050505050565b90151581526020019056fea2646970667358221220e6bc52eff367bffa184f21fff4b2b1e67b39a7f4ef10559888221813c6c7b50164736f6c63430007010033608060405234801561001057600080fd5b5061025d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80638da5cb5b1461003b578063f2fde38b14610059575b600080fd5b61004361006e565b60405161005091906101cf565b60405180910390f35b61006c610067366004610194565b610096565b005b600080610079610170565b5473ffffffffffffffffffffffffffffffffffffffff1691505090565b60006100a0610170565b805490915073ffffffffffffffffffffffffffffffffffffffff163381146100fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f4906101f0565b60405180910390fd5b81547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8481169182178455604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b6000602082840312156101a5578081fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146101c8578182fd5b9392505050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b60208082526016908201527f4d757374206f776e2074686520636f6e74726163742e0000000000000000000060408201526060019056fea2646970667358221220e4ef1d95ebf335ba5234af7aa0a862982465bbdd5e9a39f9552b962ab297b95c64736f6c634300070100334c69624469616d6f6e644375743a204e657720666163657420686173206e6f20636f6465a264697066735822122066549c6b30b1c727bb6e120bc90407b2f392893ac047ec2306da72d62658073364736f6c63430007010033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x38BB DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH3 0x20 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5C948AE3 EQ PUSH3 0x25 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x3C PUSH3 0x36 CALLDATASIZE PUSH1 0x4 PUSH3 0x2E4 JUMP JUMPDEST PUSH3 0x54 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x4B SWAP2 SWAP1 PUSH3 0x49F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP2 ISZERO PUSH3 0xD2 JUMPI DUP2 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x72 SWAP3 SWAP2 SWAP1 PUSH3 0x46C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP2 POP CALLVALUE DUP3 SWAP1 ADDRESS PUSH1 0x40 MLOAD PUSH3 0x9C SWAP1 PUSH3 0x261 JUMP JUMPDEST PUSH3 0xA8 SWAP2 SWAP1 PUSH3 0x49F JUMP JUMPDEST DUP3 SWAP1 PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 DUP4 CREATE2 SWAP2 POP POP DUP1 ISZERO DUP1 ISZERO PUSH3 0xC9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP1 POP PUSH3 0x110 JUMP JUMPDEST CALLVALUE ADDRESS PUSH1 0x40 MLOAD PUSH3 0xE2 SWAP1 PUSH3 0x261 JUMP JUMPDEST PUSH3 0xEE SWAP2 SWAP1 PUSH3 0x49F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 DUP3 CREATE SWAP1 POP DUP1 ISZERO DUP1 ISZERO PUSH3 0x10C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP1 POP JUMPDEST PUSH32 0x644CA5B0A8B0418E9FAF3880659EEB84EAAD45AD838B0173808E5CA72F5EFC49 DUP2 PUSH1 0x40 MLOAD PUSH3 0x141 SWAP2 SWAP1 PUSH3 0x49F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH4 0xE712B4E1 DUP8 DUP8 DUP7 PUSH3 0x175 JUMPI PUSH1 0x0 PUSH3 0x177 JUMP JUMPDEST DUP5 JUMPDEST DUP9 DUP9 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x19B SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x4C0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x1B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x1CB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xF2FDE38B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP3 POP PUSH4 0xF2FDE38B SWAP2 POP PUSH3 0x223 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH3 0x49F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x23E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x253 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x3252 DUP1 PUSH3 0x634 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH3 0x294 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH3 0x2AC JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x2C4 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH3 0x2DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP8 DUP10 SUB SLT ISZERO PUSH3 0x2FD JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH3 0x309 DUP9 DUP9 PUSH3 0x26F JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH3 0x326 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP10 ADD SWAP2 POP DUP10 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x33A JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH3 0x349 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP11 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH3 0x35D JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP8 POP DUP1 SWAP7 POP POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x37B JUMPI DUP4 DUP5 REVERT JUMPDEST POP PUSH3 0x38A DUP10 DUP3 DUP11 ADD PUSH3 0x29A JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP5 SWAP7 SWAP6 PUSH1 0x60 SWAP1 SWAP6 ADD CALLDATALOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP3 DUP3 JUMPDEST DUP6 DUP2 LT ISZERO PUSH3 0x419 JUMPI DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP1 DUP3 EQ PUSH3 0x405 JUMPI DUP6 DUP7 REVERT JUMPDEST DUP9 MSTORE POP SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH3 0x3CB JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MSTORE DUP3 DUP3 PUSH1 0x20 DUP7 ADD CALLDATACOPY DUP1 PUSH1 0x20 DUP5 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP6 ADD AND DUP6 ADD ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x60 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 PUSH1 0x20 PUSH1 0x80 DUP1 DUP5 ADD SWAP1 DUP3 DUP10 MUL DUP6 ADD ADD DUP10 DUP5 JUMPDEST DUP11 DUP2 LT ISZERO PUSH3 0x597 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80 DUP8 DUP5 SUB ADD DUP5 MSTORE DUP2 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC1 DUP14 CALLDATASIZE SUB ADD DUP2 SLT PUSH3 0x53F JUMPI DUP7 DUP8 REVERT JUMPDEST DUP13 ADD PUSH1 0x40 DUP7 DUP3 ADD PUSH3 0x55D DUP7 PUSH3 0x557 DUP4 DUP7 PUSH3 0x26F JUMP JUMPDEST PUSH3 0x3A2 JUMP JUMPDEST PUSH3 0x569 DUP2 DUP5 PUSH3 0x5CA JUMP JUMPDEST SWAP4 POP SWAP1 POP DUP2 DUP9 DUP8 ADD MSTORE PUSH3 0x581 DUP3 DUP8 ADD DUP5 DUP4 PUSH3 0x3BC JUMP JUMPDEST SWAP7 DUP9 ADD SWAP7 SWAP6 POP POP POP SWAP2 DUP6 ADD SWAP2 POP PUSH1 0x1 ADD PUSH3 0x4DD JUMP JUMPDEST POP POP PUSH3 0x5A7 DUP4 DUP7 ADD DUP10 PUSH3 0x3A2 JUMP JUMPDEST DUP5 DUP2 SUB PUSH1 0x40 DUP7 ADD MSTORE PUSH3 0x5BC DUP2 DUP8 DUP10 PUSH3 0x424 JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH3 0x5FF JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x20 DUP2 ADD SWAP3 POP CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x620 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP2 MUL CALLDATASIZE SUB DUP4 SGT ISZERO PUSH3 0x2DD JUMPI PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH3 0x3252 CODESIZE SUB DUP1 PUSH3 0x3252 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x26 SWAP2 PUSH3 0xCD2 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x3D PUSH3 0x56D PUSH1 0x20 SHL PUSH3 0xD5 OR PUSH1 0x20 SHR JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 PUSH1 0x0 PUSH1 0x40 MLOAD PUSH3 0x97 SWAP1 PUSH3 0xC54 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0xB4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD PUSH3 0xC7 SWAP1 PUSH3 0xC62 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0xE4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD PUSH3 0xF7 SWAP1 PUSH3 0xC70 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0x114 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x3 DUP1 DUP3 MSTORE PUSH1 0x80 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP PUSH1 0x60 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH3 0x13B PUSH3 0xC7E JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH3 0x131 JUMPI SWAP1 POP POP SWAP1 POP DUP4 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH3 0x160 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH3 0x1A7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP2 SWAP1 MSTORE POP PUSH4 0xE712B4E1 PUSH1 0xE0 SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH3 0x1CC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH3 0x1E5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE POP POP DUP3 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH3 0x216 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x5 DUP1 DUP3 MSTORE PUSH1 0xC0 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP2 DUP3 ADD PUSH1 0xA0 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH3 0x25C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP2 SWAP1 MSTORE POP PUSH4 0xADFCA15E PUSH1 0xE0 SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH3 0x281 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH3 0x29A JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP1 MLOAD PUSH4 0x7A0ED627 PUSH1 0xE0 SHL SWAP1 DUP3 SWAP1 PUSH1 0x1 SWAP1 DUP2 LT PUSH3 0x2CC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH3 0x2E5 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP1 MLOAD PUSH4 0x66FFD663 PUSH1 0xE1 SHL SWAP1 DUP3 SWAP1 PUSH1 0x1 SWAP1 DUP2 LT PUSH3 0x317 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH3 0x330 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP1 MLOAD PUSH4 0x14BBDACB PUSH1 0xE2 SHL SWAP1 DUP3 SWAP1 PUSH1 0x1 SWAP1 DUP2 LT PUSH3 0x362 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x3 DUP2 MLOAD DUP2 LT PUSH3 0x37B JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP1 MLOAD PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL SWAP1 DUP3 SWAP1 PUSH1 0x1 SWAP1 DUP2 LT PUSH3 0x3AD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x4 DUP2 MLOAD DUP2 LT PUSH3 0x3C6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE POP POP DUP2 DUP2 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH3 0x3F7 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP1 DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP DUP2 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH3 0x43F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP2 SWAP1 MSTORE POP PUSH4 0xF2FDE38B PUSH1 0xE0 SHL DUP2 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH3 0x464 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH3 0x47D JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP1 MLOAD PUSH4 0x8DA5CB5B PUSH1 0xE0 SHL SWAP1 DUP3 SWAP1 PUSH1 0x2 SWAP1 DUP2 LT PUSH3 0x4AF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH3 0x4C8 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD DUP3 ADD MSTORE PUSH3 0x4F6 SWAP1 DUP3 SWAP1 PUSH3 0xF9 PUSH3 0x591 DUP3 SHL OR SWAP1 SHR JUMP JUMPDEST POP POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 SWAP1 SWAP4 ADD PUSH1 0x20 MSTORE POP POP PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT SWAP1 DUP2 AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP3 SSTORE PUSH4 0xE712B4E1 PUSH1 0xE0 SHL DUP5 MSTORE DUP3 DUP5 KECCAK256 DUP1 SLOAD DUP3 AND DUP4 OR SWAP1 SSTORE PUSH4 0x48E2B093 PUSH1 0xE0 SHL DUP5 MSTORE DUP3 DUP5 KECCAK256 DUP1 SLOAD DUP3 AND DUP4 OR SWAP1 SSTORE PUSH4 0x7F5828D PUSH1 0xE4 SHL DUP5 MSTORE SWAP2 SWAP1 SWAP3 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SWAP2 OR SWAP1 SSTORE POP PUSH3 0xE61 JUMP JUMPDEST PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131C SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x5A8 PUSH3 0x56D PUSH1 0x20 SHL PUSH3 0xD5 OR PUSH1 0x20 SHR JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH3 0x802 JUMPI PUSH1 0x0 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH3 0x5C6 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD MLOAD SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH3 0x78B JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xFFFF AND DUP1 ISZERO DUP1 ISZERO PUSH3 0x62D JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP6 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO JUMPDEST ISZERO PUSH3 0x6AE JUMPI PUSH3 0x658 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x322E PUSH1 0x24 SWAP2 CODECOPY PUSH3 0x850 JUMP JUMPDEST POP PUSH1 0x3 DUP4 ADD DUP1 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP4 SSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 DUP1 DUP5 KECCAK256 DUP4 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP5 MSTORE PUSH1 0x2 DUP8 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP3 KECCAK256 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF DUP4 AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH3 0x6BE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH3 0x783 JUMPI PUSH1 0x0 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH3 0x6E2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH3 0x6FA JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP10 ADD SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH3 0x747 JUMPI PUSH3 0x741 DUP6 DUP4 PUSH3 0x883 JUMP JUMPDEST PUSH3 0x778 JUMP JUMPDEST DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH3 0x778 JUMPI PUSH3 0x76C DUP3 PUSH3 0x938 JUMP JUMPDEST PUSH3 0x778 DUP6 DUP4 PUSH3 0x883 JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH3 0x6B1 JUMP JUMPDEST POP POP PUSH3 0x7F8 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH3 0x79B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH3 0x7F6 JUMPI PUSH3 0x7ED DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH3 0x7C1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH3 0x7D9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH3 0x938 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x1 ADD PUSH3 0x78E JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH3 0x5AD JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP3 DUP4 SWAP1 MSTORE PUSH32 0x39725DD03D877043D78FDFE186295E46E6277EB0A3498F2ADB51071F42A2BDCB SWAP3 PUSH3 0x844 SWAP3 DUP7 SWAP3 SWAP2 PUSH3 0xDA3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST DUP2 EXTCODESIZE DUP2 DUP2 PUSH3 0x87D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x874 SWAP2 SWAP1 PUSH3 0xE4C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x89A PUSH3 0x56D PUSH1 0x20 SHL PUSH3 0xD5 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 DUP6 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP4 SSTORE SWAP2 DUP6 MSTORE DUP4 DUP6 KECCAK256 PUSH1 0x8 DUP3 DIV ADD DUP1 SLOAD PUSH1 0xE0 DUP11 SWAP1 SHR PUSH1 0x4 PUSH1 0x7 DUP6 AND MUL PUSH2 0x100 EXP SWAP1 DUP2 MUL PUSH4 0xFFFFFFFF SWAP1 SWAP2 MUL NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP8 AND DUP5 MSTORE SWAP1 SWAP7 ADD SWAP1 MSTORE SWAP4 SWAP1 SWAP4 KECCAK256 DUP1 SLOAD PUSH2 0xFFFF SWAP1 SWAP4 AND PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH2 0xFFFF PUSH1 0xA0 SHL NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP5 AND SWAP1 SWAP5 OR SWAP3 SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x94F PUSH3 0x56D PUSH1 0x20 SHL PUSH3 0xD5 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH3 0x985 JUMPI POP POP PUSH3 0xC51 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE PUSH1 0x2 DUP7 ADD SWAP1 SWAP3 MSTORE DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP3 DIV PUSH2 0xFFFF AND SWAP3 PUSH1 0x0 NOT DUP4 ADD SWAP3 SWAP1 SWAP2 SWAP1 DUP4 SWAP1 DUP2 LT PUSH3 0x9DC JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD PUSH1 0x4 MUL SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xE0 SHL SWAP1 POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND EQ PUSH3 0xAAF JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 SWAP2 SWAP1 DUP6 SWAP1 DUP2 LT PUSH3 0xA47 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x8 DUP4 DIV ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x7 SWAP1 SWAP5 AND PUSH1 0x4 MUL PUSH2 0x100 EXP SWAP4 DUP5 MUL NOT AND PUSH1 0xE0 SWAP6 SWAP1 SWAP6 SHR SWAP3 SWAP1 SWAP3 MUL SWAP4 SWAP1 SWAP4 OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND DUP2 MSTORE PUSH1 0x1 DUP8 ADD SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0xFFFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL PUSH2 0xFFFF DUP7 AND MUL OR SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP1 PUSH3 0xAD3 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 PUSH1 0x8 PUSH1 0x0 NOT SWAP1 SWAP5 ADD SWAP4 DUP5 DIV ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x4 PUSH1 0x7 DUP8 AND MUL PUSH2 0x100 EXP MUL NOT AND SWAP1 SSTORE SWAP2 SWAP1 SWAP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP9 AND DUP3 MSTORE PUSH1 0x1 DUP8 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xB0 SHL SUB NOT AND SWAP1 SSTORE DUP2 PUSH3 0xC4B JUMPI PUSH1 0x3 DUP6 ADD DUP1 SLOAD PUSH1 0x0 NOT DUP2 ADD SWAP2 PUSH1 0x0 SWAP2 DUP4 SWAP1 DUP2 LT PUSH3 0xB49 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND DUP1 DUP6 MSTORE PUSH1 0x2 DUP13 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 SWAP4 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP3 AND SWAP3 POP PUSH2 0xFFFF SWAP1 SWAP2 AND SWAP1 DUP3 EQ PUSH3 0xBE3 JUMPI DUP2 DUP9 PUSH1 0x3 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH3 0xB98 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP2 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND OR SWAP1 SSTORE SWAP2 DUP5 AND DUP2 MSTORE PUSH1 0x2 DUP11 ADD SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF DUP4 AND OR SWAP1 SSTORE JUMPDEST DUP8 PUSH1 0x3 ADD DUP1 SLOAD DUP1 PUSH3 0xBF1 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 DUP4 ADD PUSH1 0x0 NOT SWAP1 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE SWAP1 SWAP3 ADD SWAP1 SWAP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND DUP3 MSTORE PUSH1 0x2 DUP11 ADD SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 PUSH3 0xC3A DUP3 DUP3 PUSH3 0xC96 JUMP JUMPDEST POP PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND SWAP1 SSTORE POP POP POP JUMPDEST POP POP POP POP POP JUMPDEST POP JUMP JUMPDEST PUSH2 0xF5C DUP1 PUSH3 0x1916 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH2 0x73F DUP1 PUSH3 0x2872 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH2 0x27D DUP1 PUSH3 0x2FB1 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x0 DUP3 SSTORE PUSH1 0x7 ADD PUSH1 0x8 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH3 0xC51 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0xCCE JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0xCB8 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0xCE4 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0xCFB JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0xD4A JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH3 0xD22 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0xD7C JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH3 0xD5E JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH3 0xD8E JUMPI DUP3 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD PUSH1 0x60 DUP4 MSTORE DUP1 DUP7 MLOAD DUP1 DUP4 MSTORE PUSH1 0x80 DUP6 ADD SWAP2 POP PUSH1 0x20 SWAP3 POP PUSH1 0x80 DUP4 DUP3 MUL DUP7 ADD ADD DUP4 DUP10 ADD DUP6 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0xE1B JUMPI PUSH1 0x7F NOT DUP9 DUP5 SUB ADD DUP6 MSTORE DUP2 MLOAD PUSH1 0x40 PUSH3 0xDED DUP6 DUP4 MLOAD PUSH3 0xD02 JUMP JUMPDEST DUP8 DUP3 ADD MLOAD SWAP2 POP DUP1 DUP9 DUP7 ADD MSTORE PUSH3 0xE06 DUP2 DUP7 ADD DUP4 PUSH3 0xD0F JUMP JUMPDEST SWAP7 DUP9 ADD SWAP7 SWAP5 POP POP POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH3 0xDCA JUMP JUMPDEST POP POP PUSH3 0xE2B DUP5 DUP8 ADD DUP10 PUSH3 0xD02 JUMP JUMPDEST DUP6 DUP2 SUB PUSH1 0x40 DUP8 ADD MSTORE PUSH3 0xE3F DUP2 DUP9 PUSH3 0xD55 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH3 0xCFB PUSH1 0x20 DUP4 ADD DUP5 PUSH3 0xD55 JUMP JUMPDEST PUSH2 0xAA5 DUP1 PUSH3 0xE71 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE PUSH2 0xB JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131C SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0xB1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA8 SWAP1 PUSH2 0xA16 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLDATASIZE PUSH1 0x0 DUP1 CALLDATACOPY PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x0 DUP5 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY DUP1 DUP1 ISZERO PUSH2 0xD0 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131C SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x103 PUSH2 0xD5 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x345 JUMPI PUSH1 0x0 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x11F JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD MLOAD SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x2DC JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xFFFF AND DUP1 ISZERO DUP1 ISZERO PUSH2 0x184 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP6 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO JUMPDEST ISZERO PUSH2 0x20E JUMPI PUSH2 0x1AB DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA4C PUSH1 0x24 SWAP2 CODECOPY PUSH2 0x391 JUMP JUMPDEST POP PUSH1 0x3 DUP4 ADD DUP1 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP4 SSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 DUP1 DUP5 KECCAK256 DUP4 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP5 MSTORE PUSH1 0x2 DUP8 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP3 KECCAK256 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF DUP4 AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x21D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x2D5 JUMPI PUSH1 0x0 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x23F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x256 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP10 ADD SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x29F JUMPI PUSH2 0x29A DUP6 DUP4 PUSH2 0x3D2 JUMP JUMPDEST PUSH2 0x2CB JUMP JUMPDEST DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2CB JUMPI PUSH2 0x2C1 DUP3 PUSH2 0x4B2 JUMP JUMPDEST PUSH2 0x2CB DUP6 DUP4 PUSH2 0x3D2 JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x211 JUMP JUMPDEST POP POP PUSH2 0x33C JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2EB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x33A JUMPI PUSH2 0x332 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x30E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x325 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x4B2 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x2DF JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x108 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP3 DUP4 SWAP1 MSTORE PUSH32 0x39725DD03D877043D78FDFE186295E46E6277EB0A3498F2ADB51071F42A2BDCB SWAP3 PUSH2 0x385 SWAP3 DUP7 SWAP3 SWAP2 PUSH2 0x93F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST DUP2 EXTCODESIZE DUP2 DUP2 PUSH2 0x3CC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA8 SWAP2 SWAP1 PUSH2 0x9FC JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3DC PUSH2 0xD5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 DUP6 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP4 SSTORE SWAP2 DUP6 MSTORE DUP4 DUP6 KECCAK256 PUSH1 0x8 DUP3 DIV ADD DUP1 SLOAD PUSH1 0xE0 DUP11 SWAP1 SHR PUSH1 0x4 PUSH1 0x7 DUP6 AND MUL PUSH2 0x100 EXP SWAP1 DUP2 MUL PUSH4 0xFFFFFFFF SWAP1 SWAP2 MUL NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP8 AND DUP5 MSTORE SWAP1 SWAP7 ADD SWAP1 MSTORE SWAP4 SWAP1 SWAP4 KECCAK256 DUP1 SLOAD PUSH2 0xFFFF SWAP1 SWAP4 AND PUSH21 0x10000000000000000000000000000000000000000 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 SWAP5 AND SWAP1 SWAP5 OR SWAP3 SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4BC PUSH2 0xD5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x4F0 JUMPI POP POP PUSH2 0x849 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE PUSH1 0x2 DUP7 ADD SWAP1 SWAP3 MSTORE DUP3 KECCAK256 DUP1 SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP3 DIV PUSH2 0xFFFF AND SWAP3 PUSH1 0x0 NOT DUP4 ADD SWAP3 SWAP1 SWAP2 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x557 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD PUSH1 0x4 MUL SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xE0 SHL SWAP1 POP DUP6 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x67D JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 SWAP2 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 0x5EA JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x8 DUP4 DIV ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x7 SWAP1 SWAP5 AND PUSH1 0x4 MUL PUSH2 0x100 EXP SWAP4 DUP5 MUL NOT AND PUSH1 0xE0 SWAP6 SWAP1 SWAP6 SHR SWAP3 SWAP1 SWAP3 MUL SWAP4 SWAP1 SWAP4 OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND DUP2 MSTORE PUSH1 0x1 DUP8 ADD SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH21 0x10000000000000000000000000000000000000000 PUSH2 0xFFFF DUP7 AND MUL OR SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP1 PUSH2 0x6A0 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 PUSH1 0x8 PUSH1 0x0 NOT SWAP1 SWAP5 ADD SWAP4 DUP5 DIV ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x4 PUSH1 0x7 DUP8 AND MUL PUSH2 0x100 EXP MUL NOT AND SWAP1 SSTORE SWAP2 SWAP1 SWAP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP9 AND DUP3 MSTORE PUSH1 0x1 DUP8 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000000000000000 AND SWAP1 SSTORE DUP2 PUSH2 0x843 JUMPI PUSH1 0x3 DUP6 ADD DUP1 SLOAD PUSH1 0x0 NOT DUP2 ADD SWAP2 PUSH1 0x0 SWAP2 DUP4 SWAP1 DUP2 LT PUSH2 0x72C JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND DUP1 DUP6 MSTORE PUSH1 0x2 DUP13 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 SWAP4 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP3 AND SWAP3 POP PUSH2 0xFFFF SWAP1 SWAP2 AND SWAP1 DUP3 EQ PUSH2 0x7D1 JUMPI DUP2 DUP9 PUSH1 0x3 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x779 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP2 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND OR SWAP1 SSTORE SWAP2 DUP5 AND DUP2 MSTORE PUSH1 0x2 DUP11 ADD SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF DUP4 AND OR SWAP1 SSTORE JUMPDEST DUP8 PUSH1 0x3 ADD DUP1 SLOAD DUP1 PUSH2 0x7DE JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 DUP4 ADD PUSH1 0x0 NOT SWAP1 DUP2 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SSTORE SWAP1 SWAP3 ADD SWAP1 SWAP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND DUP3 MSTORE PUSH1 0x2 DUP11 ADD SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 PUSH2 0x832 DUP3 DUP3 PUSH2 0x84C JUMP JUMPDEST POP PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND SWAP1 SSTORE POP POP POP JUMPDEST POP POP POP POP POP JUMPDEST POP JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x0 DUP3 SSTORE PUSH1 0x7 ADD PUSH1 0x8 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x849 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x881 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x86D JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x8CB JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8A5 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x8FB JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x8DF JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x90C JUMPI DUP3 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD PUSH1 0x60 DUP4 MSTORE DUP1 DUP7 MLOAD DUP1 DUP4 MSTORE PUSH1 0x80 DUP6 ADD SWAP2 POP PUSH1 0x20 SWAP3 POP PUSH1 0x80 DUP4 DUP3 MUL DUP7 ADD ADD DUP4 DUP10 ADD DUP6 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9CF JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80 DUP9 DUP5 SUB ADD DUP6 MSTORE DUP2 MLOAD PUSH1 0x40 PUSH2 0x9A4 DUP6 DUP4 MLOAD PUSH2 0x885 JUMP JUMPDEST DUP8 DUP3 ADD MLOAD SWAP2 POP DUP1 DUP9 DUP7 ADD MSTORE PUSH2 0x9BB DUP2 DUP7 ADD DUP4 PUSH2 0x892 JUMP JUMPDEST SWAP7 DUP9 ADD SWAP7 SWAP5 POP POP POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x966 JUMP JUMPDEST POP POP PUSH2 0x9DD DUP5 DUP8 ADD DUP10 PUSH2 0x885 JUMP JUMPDEST DUP6 DUP2 SUB PUSH1 0x40 DUP8 ADD MSTORE PUSH2 0x9EF DUP2 DUP9 PUSH2 0x8D6 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0xA0F PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x8D6 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4469616D6F6E643A2046756E6374696F6E20646F6573206E6F74206578697374 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP INVALID 0x4C PUSH10 0x624469616D6F6E644375 PUSH21 0x3A204E657720666163657420686173206E6F20636F PUSH5 0x65A2646970 PUSH7 0x735822122012E7 0xED CALLDATALOAD 0xB4 LOG2 DUP5 PUSH28 0x23E9D014F8B7B3C729039992CBC88821D0901892D1F6BA3D64736F6C PUSH4 0x43000701 STOP CALLER PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF3C DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xE712B4E1 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x3E CALLDATASIZE PUSH1 0x4 PUSH2 0xA05 JUMP JUMPDEST PUSH2 0x45 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4F DUP6 DUP6 PUSH2 0x1C2 JUMP JUMPDEST PUSH32 0x39725DD03D877043D78FDFE186295E46E6277EB0A3498F2ADB51071F42A2BDCB DUP6 DUP6 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x86 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB83 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xC8 JUMPI DUP1 ISZERO PUSH2 0xC3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBA SWAP1 PUSH2 0xCEA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1BB JUMP JUMPDEST DUP1 PUSH2 0xE5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBA SWAP1 PUSH2 0xD47 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ADDRESS EQ PUSH2 0x117 JUMPI PUSH2 0x117 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xEB7 PUSH1 0x2A SWAP2 CODECOPY PUSH2 0x4B6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x135 SWAP3 SWAP2 SWAP1 PUSH2 0xB73 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x170 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x175 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x1B8 JUMPI DUP1 MLOAD ISZERO PUSH2 0x1A0 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBA SWAP2 SWAP1 PUSH2 0xC60 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBA SWAP1 PUSH2 0xDA4 JUMP JUMPDEST POP POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CC PUSH2 0x4D7 JUMP JUMPDEST DUP1 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBA SWAP1 PUSH2 0xCB3 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x4B0 JUMPI PUSH1 0x0 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x211 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x223 SWAP2 SWAP1 PUSH2 0xE4F JUMP JUMPDEST PUSH2 0x231 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x9E3 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x412 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xFFFF AND DUP1 ISZERO DUP1 ISZERO PUSH2 0x28A JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP6 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO JUMPDEST ISZERO PUSH2 0x314 JUMPI PUSH2 0x2B1 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xEE1 PUSH1 0x26 SWAP2 CODECOPY PUSH2 0x4B6 JUMP JUMPDEST POP PUSH1 0x3 DUP4 ADD DUP1 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP4 SSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 DUP1 DUP5 KECCAK256 DUP4 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP5 MSTORE PUSH1 0x2 DUP8 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP3 KECCAK256 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF DUP4 AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x0 JUMPDEST DUP7 DUP7 DUP6 DUP2 DUP2 LT PUSH2 0x323 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x335 SWAP2 SWAP1 PUSH2 0xE4F JUMP JUMPDEST PUSH2 0x343 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xE01 JUMP JUMPDEST SWAP1 POP DUP2 LT ISZERO PUSH2 0x40B JUMPI PUSH1 0x0 DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0x35A JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x36C SWAP2 SWAP1 PUSH2 0xE4F JUMP JUMPDEST PUSH2 0x37A SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xE01 JUMP JUMPDEST DUP4 DUP2 DUP2 LT PUSH2 0x384 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x399 SWAP2 SWAP1 PUSH2 0xAD8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP9 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x3D5 JUMPI PUSH2 0x3D0 DUP6 DUP4 PUSH2 0x4FB JUMP JUMPDEST PUSH2 0x401 JUMP JUMPDEST DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x401 JUMPI PUSH2 0x3F7 DUP3 PUSH2 0x5DB JUMP JUMPDEST PUSH2 0x401 DUP6 DUP4 PUSH2 0x4FB JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x317 JUMP JUMPDEST POP POP PUSH2 0x4A7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x421 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x433 SWAP2 SWAP1 PUSH2 0xE4F JUMP JUMPDEST PUSH2 0x441 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xE01 JUMP JUMPDEST SWAP1 POP DUP2 LT ISZERO PUSH2 0x4A5 JUMPI PUSH2 0x49D DUP7 DUP7 DUP6 DUP2 DUP2 LT PUSH2 0x459 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x46B SWAP2 SWAP1 PUSH2 0xE4F JUMP JUMPDEST PUSH2 0x479 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xE01 JUMP JUMPDEST DUP4 DUP2 DUP2 LT PUSH2 0x483 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x498 SWAP2 SWAP1 PUSH2 0xAD8 JUMP JUMPDEST PUSH2 0x5DB JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x415 JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1FB JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST DUP2 EXTCODESIZE DUP2 DUP2 PUSH2 0x4B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBA SWAP2 SWAP1 PUSH2 0xC60 JUMP JUMPDEST PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131C SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x505 PUSH2 0x4D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 DUP6 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP4 SSTORE SWAP2 DUP6 MSTORE DUP4 DUP6 KECCAK256 PUSH1 0x8 DUP3 DIV ADD DUP1 SLOAD PUSH1 0xE0 DUP11 SWAP1 SHR PUSH1 0x4 PUSH1 0x7 DUP6 AND MUL PUSH2 0x100 EXP SWAP1 DUP2 MUL PUSH4 0xFFFFFFFF SWAP1 SWAP2 MUL NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP8 AND DUP5 MSTORE SWAP1 SWAP7 ADD SWAP1 MSTORE SWAP4 SWAP1 SWAP4 KECCAK256 DUP1 SLOAD PUSH2 0xFFFF SWAP1 SWAP4 AND PUSH21 0x10000000000000000000000000000000000000000 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 SWAP5 AND SWAP1 SWAP5 OR SWAP3 SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5E5 PUSH2 0x4D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x619 JUMPI POP POP PUSH2 0x972 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE PUSH1 0x2 DUP7 ADD SWAP1 SWAP3 MSTORE DUP3 KECCAK256 DUP1 SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP3 DIV PUSH2 0xFFFF AND SWAP3 PUSH1 0x0 NOT DUP4 ADD SWAP3 SWAP1 SWAP2 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x680 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD PUSH1 0x4 MUL SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xE0 SHL SWAP1 POP DUP6 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x7A6 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 SWAP2 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 0x713 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x8 DUP4 DIV ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x7 SWAP1 SWAP5 AND PUSH1 0x4 MUL PUSH2 0x100 EXP SWAP4 DUP5 MUL NOT AND PUSH1 0xE0 SWAP6 SWAP1 SWAP6 SHR SWAP3 SWAP1 SWAP3 MUL SWAP4 SWAP1 SWAP4 OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND DUP2 MSTORE PUSH1 0x1 DUP8 ADD SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH21 0x10000000000000000000000000000000000000000 PUSH2 0xFFFF DUP7 AND MUL OR SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP1 PUSH2 0x7C9 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 PUSH1 0x8 PUSH1 0x0 NOT SWAP1 SWAP5 ADD SWAP4 DUP5 DIV ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x4 PUSH1 0x7 DUP8 AND MUL PUSH2 0x100 EXP MUL NOT AND SWAP1 SSTORE SWAP2 SWAP1 SWAP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP9 AND DUP3 MSTORE PUSH1 0x1 DUP8 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000000000000000 AND SWAP1 SSTORE DUP2 PUSH2 0x96C JUMPI PUSH1 0x3 DUP6 ADD DUP1 SLOAD PUSH1 0x0 NOT DUP2 ADD SWAP2 PUSH1 0x0 SWAP2 DUP4 SWAP1 DUP2 LT PUSH2 0x855 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND DUP1 DUP6 MSTORE PUSH1 0x2 DUP13 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 SWAP4 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP3 AND SWAP3 POP PUSH2 0xFFFF SWAP1 SWAP2 AND SWAP1 DUP3 EQ PUSH2 0x8FA JUMPI DUP2 DUP9 PUSH1 0x3 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x8A2 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP2 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND OR SWAP1 SSTORE SWAP2 DUP5 AND DUP2 MSTORE PUSH1 0x2 DUP11 ADD SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF DUP4 AND OR SWAP1 SSTORE JUMPDEST DUP8 PUSH1 0x3 ADD DUP1 SLOAD DUP1 PUSH2 0x907 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 DUP4 ADD PUSH1 0x0 NOT SWAP1 DUP2 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SSTORE SWAP1 SWAP3 ADD SWAP1 SWAP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND DUP3 MSTORE PUSH1 0x2 DUP11 ADD SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 PUSH2 0x95B DUP3 DUP3 PUSH2 0x975 JUMP JUMPDEST POP PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND SWAP1 SSTORE POP POP POP JUMPDEST POP POP POP POP POP JUMPDEST POP JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x0 DUP3 SSTORE PUSH1 0x7 ADD PUSH1 0x8 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x972 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x9AA JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x996 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x9C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x9C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9F4 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x9FE DUP4 DUP4 PUSH2 0x9AE JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xA1C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xA33 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA46 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xA54 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH1 0x20 DUP11 DUP2 DUP3 DUP5 MUL DUP7 ADD ADD GT ISZERO PUSH2 0xA68 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 DUP5 ADD SWAP9 POP DUP2 SWAP8 POP PUSH2 0xA7C DUP12 DUP3 DUP13 ADD PUSH2 0x9AE JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP11 ADD CALLDATALOAD SWAP4 POP DUP3 DUP5 GT ISZERO PUSH2 0xA91 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP4 DUP11 ADD SWAP4 POP DUP11 PUSH1 0x1F DUP6 ADD SLT PUSH2 0xAA4 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP2 POP DUP3 DUP3 GT ISZERO PUSH2 0xAB4 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP11 DUP2 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0xAC4 JUMPI DUP5 DUP6 REVERT JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP POP SWAP1 SWAP5 ADD SWAP4 POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAE9 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x9FE DUP4 DUP4 PUSH2 0x9CB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP3 DUP3 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0xB3E JUMPI DUP3 DUP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH2 0xB2D DUP3 DUP6 PUSH2 0x9CB JUMP JUMPDEST AND DUP9 MSTORE SWAP7 DUP4 ADD SWAP7 SWAP2 POP PUSH1 0x1 ADD PUSH2 0xB0F JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MSTORE DUP3 DUP3 PUSH1 0x20 DUP7 ADD CALLDATACOPY DUP1 PUSH1 0x20 DUP5 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP6 ADD AND DUP6 ADD ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 PUSH1 0x20 PUSH1 0x80 DUP1 DUP5 ADD SWAP1 DUP3 DUP10 MUL DUP6 ADD ADD DUP10 DUP5 JUMPDEST DUP11 DUP2 LT ISZERO PUSH2 0xC31 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80 DUP8 DUP5 SUB ADD DUP5 MSTORE DUP2 CALLDATALOAD PUSH1 0x3E NOT DUP14 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xBE2 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP13 ADD PUSH1 0x40 DUP7 DUP3 ADD PUSH2 0xBFC DUP7 PUSH2 0xBF7 DUP4 DUP7 PUSH2 0x9AE JUMP JUMPDEST PUSH2 0xAF3 JUMP JUMPDEST PUSH2 0xC06 DUP2 DUP5 PUSH2 0xE6E JUMP JUMPDEST SWAP4 POP SWAP1 POP DUP2 DUP9 DUP8 ADD MSTORE PUSH2 0xC1C DUP3 DUP8 ADD DUP5 DUP4 PUSH2 0xB00 JUMP JUMPDEST SWAP7 DUP9 ADD SWAP7 SWAP6 POP POP POP SWAP2 DUP6 ADD SWAP2 POP PUSH1 0x1 ADD PUSH2 0xBA0 JUMP JUMPDEST POP POP PUSH2 0xC3F DUP4 DUP7 ADD DUP10 PUSH2 0xAF3 JUMP JUMPDEST DUP5 DUP2 SUB PUSH1 0x40 DUP7 ADD MSTORE PUSH2 0xC52 DUP2 DUP8 DUP10 PUSH2 0xB49 JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xC8C JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0xC70 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xC9D JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D757374206F776E2074686520636F6E74726163742E00000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3E SWAP1 DUP3 ADD MSTORE PUSH32 0x4469616D6F6E6443757446616365743A205F696E697420697320616464726573 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x73283029206275745F63616C6C64617461206973206E6F7420656D7074790000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3F SWAP1 DUP3 ADD MSTORE PUSH32 0x4469616D6F6E6443757446616365743A205F63616C6C6461746120697320656D PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x70747920627574205F696E6974206973206E6F74206164647265737328302900 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x4469616D6F6E6443757446616365743A205F696E69742066756E6374696F6E20 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x7265766572746564000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xE17 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xE31 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 SWAP1 DUP2 ADD SWAP3 POP DUP2 MUL CALLDATASIZE SUB DUP3 SGT ISZERO PUSH2 0xE48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 CALLDATALOAD PUSH1 0x3E NOT DUP4 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xE64 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xE84 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x20 DUP2 ADD SWAP3 POP CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xEA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP2 MUL CALLDATASIZE SUB DUP4 SGT ISZERO PUSH2 0xE48 JUMPI PUSH1 0x0 DUP1 REVERT INVALID DIFFICULTY PUSH10 0x616D6F6E644375744661 PUSH4 0x65743A20 0x5F PUSH10 0x6E697420616464726573 PUSH20 0x20686173206E6F20636F64654469616D6F6E6443 PUSH22 0x7446616365743A204E65772066616365742068617320 PUSH15 0x6F20636F6465A26469706673582212 KECCAK256 0xD5 0x49 SWAP3 JUMPDEST 0xE7 CALL PUSH3 0xAD8BEE 0xE 0x5F 0xAA CALLCODE 0xF9 0xA9 0xE5 0x48 0xED PUSH6 0x80D804FBD4D 0xCD 0xB3 0xAA PUSH24 0x977264736F6C634300070100336080604052348015610010 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x71F DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x67 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7A0ED627 GT PUSH2 0x50 JUMPI DUP1 PUSH4 0x7A0ED627 EQ PUSH2 0xAA JUMPI DUP1 PUSH4 0xADFCA15E EQ PUSH2 0xBF JUMPI DUP1 PUSH4 0xCDFFACC6 EQ PUSH2 0xDF JUMPI PUSH2 0x67 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x6C JUMPI DUP1 PUSH4 0x52EF6B2C EQ PUSH2 0x95 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7F PUSH2 0x7A CALLDATASIZE PUSH1 0x4 PUSH2 0x50F JUMP JUMPDEST PUSH2 0xFF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0x6DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x9D PUSH2 0x14A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0x5CC JUMP JUMPDEST PUSH2 0xB2 PUSH2 0x1C3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0x639 JUMP JUMPDEST PUSH2 0xD2 PUSH2 0xCD CALLDATASIZE PUSH1 0x4 PUSH2 0x4D4 JUMP JUMPDEST PUSH2 0x370 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0x626 JUMP JUMPDEST PUSH2 0xF2 PUSH2 0xED CALLDATASIZE PUSH1 0x4 PUSH2 0x50F JUMP JUMPDEST PUSH2 0x43C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0x5AB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x10A PUSH2 0x498 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 SWAP1 SWAP2 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x156 PUSH2 0x498 JUMP JUMPDEST PUSH1 0x3 DUP2 ADD DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE SWAP4 SWAP5 POP DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x1B8 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x18D JUMPI JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x1CF PUSH2 0x498 JUMP JUMPDEST PUSH1 0x3 DUP2 ADD SLOAD SWAP1 SWAP2 POP DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x1EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x228 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x215 PUSH2 0x4BC JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x20D JUMPI SWAP1 POP JUMPDEST POP SWAP3 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x36A JUMPI PUSH1 0x0 DUP4 PUSH1 0x3 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x247 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP1 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x281 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND SWAP1 MSTORE SWAP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP7 ADD DUP3 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x342 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x4 ADD SWAP1 PUSH1 0x20 DUP3 PUSH1 0x3 ADD DIV SWAP3 DUP4 ADD SWAP3 PUSH1 0x1 SUB DUP3 MUL SWAP2 POP DUP1 DUP5 GT PUSH2 0x2EF JUMPI SWAP1 POP JUMPDEST POP POP POP POP POP DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x353 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x22E JUMP JUMPDEST POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x37C PUSH2 0x498 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD DUP4 MLOAD DUP2 DUP5 MUL DUP2 ADD DUP5 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE SWAP4 SWAP5 POP SWAP2 SWAP3 SWAP1 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x42F JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x4 ADD SWAP1 PUSH1 0x20 DUP3 PUSH1 0x3 ADD DIV SWAP3 DUP4 ADD SWAP3 PUSH1 0x1 SUB DUP3 MUL SWAP2 POP DUP1 DUP5 GT PUSH2 0x3DC JUMPI SWAP1 POP JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x447 PUSH2 0x498 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP4 ADD PUSH1 0x20 MSTORE POP POP PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131C SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4E5 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x508 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x520 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x508 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x5A0 JUMPI DUP2 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x562 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x61A JUMPI DUP4 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x5E8 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x508 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x54F JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP1 DUP5 MUL DUP7 ADD DUP4 ADD DUP8 DUP6 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x6D0 JUMPI DUP9 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0 ADD DUP6 MSTORE DUP2 MLOAD DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 MSTORE DUP8 ADD MLOAD DUP8 DUP5 ADD DUP8 SWAP1 MSTORE PUSH2 0x6BD DUP8 DUP6 ADD DUP3 PUSH2 0x54F JUMP JUMPDEST SWAP6 DUP9 ADD SWAP6 SWAP4 POP POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x65D JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE6 0xBC MSTORE 0xEF RETURN PUSH8 0xBFFA184F21FFF4B2 0xB1 0xE6 PUSH28 0x39A7F4EF10559888221813C6C7B50164736F6C634300070100336080 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25D DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x59 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x6E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x50 SWAP2 SWAP1 PUSH2 0x1CF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x6C PUSH2 0x67 CALLDATASIZE PUSH1 0x4 PUSH2 0x194 JUMP JUMPDEST PUSH2 0x96 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x79 PUSH2 0x170 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA0 PUSH2 0x170 JUMP JUMPDEST DUP1 SLOAD SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER DUP2 EQ PUSH2 0xFD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x1F0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND SWAP2 DUP3 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131C SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A5 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1C8 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D757374206F776E2074686520636F6E74726163742E00000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE4 0xEF SAR SWAP6 0xEB RETURN CALLDATALOAD 0xBA MSTORE CALLVALUE 0xAF PUSH27 0xA0A862982465BBDD5E9A39F9552B962AB297B95C64736F6C634300 SMOD ADD STOP CALLER 0x4C PUSH10 0x624469616D6F6E644375 PUSH21 0x3A204E657720666163657420686173206E6F20636F PUSH5 0x65A2646970 PUSH7 0x73582212206654 SWAP13 PUSH12 0x30B1C727BB6E120BC90407B2 RETURN SWAP3 DUP10 GASPRICE 0xC0 SELFBALANCE 0xEC 0x23 MOD 0xDA PUSH19 0xD62658073364736F6C63430007010033000000 ",
              "sourceMap": "155:819:0:-:0;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "immutableReferences": {},
              "linkReferences": {},
              "object": "608060405260043610620000205760003560e01c80635c948ae31462000025575b600080fd5b6200003c62000036366004620002e4565b62000054565b6040516200004b91906200049f565b60405180910390f35b60008115620000d2578187604051602001620000729291906200046c565b604051602081830303815290604052805190602001209150348290306040516200009c9062000261565b620000a891906200049f565b82906040518091039083f591505080158015620000c9573d6000803e3d6000fd5b50905062000110565b3430604051620000e29062000261565b620000ee91906200049f565b6040518091039082f09050801580156200010c573d6000803e3d6000fd5b5090505b7f644ca5b0a8b0418e9faf3880659eeb84eaad45ad838b0173808e5ca72f5efc49816040516200014191906200049f565b60405180910390a173ffffffffffffffffffffffffffffffffffffffff811663e712b4e18787866200017557600062000177565b845b88886040518663ffffffff1660e01b81526004016200019b959493929190620004c0565b600060405180830381600087803b158015620001b657600080fd5b505af1158015620001cb573d6000803e3d6000fd5b50506040517ff2fde38b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416925063f2fde38b915062000223908a906004016200049f565b600060405180830381600087803b1580156200023e57600080fd5b505af115801562000253573d6000803e3d6000fd5b505050509695505050505050565b613252806200063483390190565b803573ffffffffffffffffffffffffffffffffffffffff811681146200029457600080fd5b92915050565b60008083601f840112620002ac578182fd5b50813567ffffffffffffffff811115620002c4578182fd5b602083019150836020828501011115620002dd57600080fd5b9250929050565b60008060008060008060808789031215620002fd578182fd5b6200030988886200026f565b9550602087013567ffffffffffffffff8082111562000326578384fd5b818901915089601f8301126200033a578384fd5b81358181111562000349578485fd5b8a602080830285010111156200035d578485fd5b6020830197508096505060408901359150808211156200037b578384fd5b506200038a89828a016200029a565b979a9699509497949695606090950135949350505050565b73ffffffffffffffffffffffffffffffffffffffff169052565b60008284526020808501945082825b85811015620004195781357fffffffff00000000000000000000000000000000000000000000000000000000811680821462000405578586fd5b8852509582019590820190600101620003cb565b509495945050505050565b600082845282826020860137806020848601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011685010190509392505050565b91825260601b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016602082015260340190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b606080825281018590526000602060808084019082890285010189845b8a81101562000597577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8087840301845281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc18d36030181126200053f578687fd5b8c0160408682016200055d866200055783866200026f565b620003a2565b620005698184620005ca565b935090508188870152620005818287018483620003bc565b96880196955050509185019150600101620004dd565b5050620005a783860189620003a2565b8481036040860152620005bc81878962000424565b9a9950505050505050505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112620005ff578283fd5b830160208101925035905067ffffffffffffffff8111156200062057600080fd5b602081023603831315620002dd57600080fdfe60806040526040516200325238038062003252833981016040819052620000269162000cd2565b60006200003d6200056d60201b620000d51760201c565b80546001600160a01b0319166001600160a01b0384169081178255604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36000604051620000979062000c54565b604051809103906000f080158015620000b4573d6000803e3d6000fd5b5090506000604051620000c79062000c62565b604051809103906000f080158015620000e4573d6000803e3d6000fd5b5090506000604051620000f79062000c70565b604051809103906000f08015801562000114573d6000803e3d6000fd5b506040805160038082526080820190925291925060609190816020015b6200013b62000c7e565b8152602001906001900390816200013157905050905083816000815181106200016057fe5b60209081029190910101516001600160a01b03919091169052604080516001808252818301909252908160200160208202803683370190505081600081518110620001a757fe5b60200260200101516020018190525063e712b4e160e01b81600081518110620001cc57fe5b602002602001015160200151600081518110620001e557fe5b60200260200101906001600160e01b03191690816001600160e01b0319168152505082816001815181106200021657fe5b6020908102919091018101516001600160a01b039290921690915260408051600580825260c0820190925291820160a08036833701905050816001815181106200025c57fe5b60200260200101516020018190525063adfca15e60e01b816001815181106200028157fe5b6020026020010151602001516000815181106200029a57fe5b6001600160e01b0319909216602092830291909101909101528051637a0ed62760e01b9082906001908110620002cc57fe5b602002602001015160200151600181518110620002e557fe5b6001600160e01b03199092166020928302919091019091015280516366ffd66360e11b90829060019081106200031757fe5b6020026020010151602001516002815181106200033057fe5b6001600160e01b03199092166020928302919091019091015280516314bbdacb60e21b90829060019081106200036257fe5b6020026020010151602001516003815181106200037b57fe5b6001600160e01b03199092166020928302919091019091015280516301ffc9a760e01b9082906001908110620003ad57fe5b602002602001015160200151600481518110620003c657fe5b60200260200101906001600160e01b03191690816001600160e01b031916815250508181600281518110620003f757fe5b60209081029190910101516001600160a01b03919091169052604080516002808252606082019092529081602001602082028036833701905050816002815181106200043f57fe5b60200260200101516020018190525063f2fde38b60e01b816002815181106200046457fe5b6020026020010151602001516000815181106200047d57fe5b6001600160e01b0319909216602092830291909101909101528051638da5cb5b60e01b9082906002908110620004af57fe5b602002602001015160200151600181518110620004c857fe5b6001600160e01b0319909216602092830291909101820152620004f6908290620000f962000591821b17901c565b50506301ffc9a760e01b6000908152600490930160205250506040808220805460ff19908116600190811790925563e712b4e160e01b845282842080548216831790556348e2b09360e01b845282842080548216831790556307f5828d60e41b845291909220805490911690911790555062000e61565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b6000620005a86200056d60201b620000d51760201c565b905060005b825181101562000802576000838281518110620005c657fe5b60209081029190910101515190506001600160a01b038116156200078b576001600160a01b038116600090815260028401602052604090206001015461ffff16801580156200062d57506001600160a01b0382166000908152600285016020526040902054155b15620006ae5762000658826040518060600160405280602481526020016200322e6024913962000850565b506003830180546001808201835560009283526020808420830180546001600160a01b0319166001600160a01b03871690811790915584526002870190526040909220909101805461ffff191661ffff83161790555b60005b858481518110620006be57fe5b6020026020010151602001515181101562000783576000868581518110620006e257fe5b6020026020010151602001518281518110620006fa57fe5b6020908102919091018101516001600160e01b031981166000908152600189019092526040909120549091506001600160a01b031680620007475762000741858362000883565b62000778565b846001600160a01b0316816001600160a01b03161462000778576200076c8262000938565b62000778858362000883565b5050600101620006b1565b5050620007f8565b60005b8483815181106200079b57fe5b60200260200101516020015151811015620007f657620007ed858481518110620007c157fe5b6020026020010151602001518281518110620007d957fe5b60200260200101516200093860201b60201c565b6001016200078e565b505b50600101620005ad565b5060408051600080825260208201928390527f39725dd03d877043d78fdfe186295e46e6277eb0a3498f2adb51071f42a2bdcb92620008449286929162000da3565b60405180910390a15050565b813b81816200087d5760405162461bcd60e51b815260040162000874919062000e4c565b60405180910390fd5b50505050565b60006200089a6200056d60201b620000d51760201c565b6001600160a01b03909316600081815260028501602090815260408083208054600180820183559185528385206008820401805460e08a901c600460078516026101000a90810263ffffffff909102199091161790556001600160e01b03199097168452909601905293909320805461ffff909316600160a01b0261ffff60a01b196001600160a01b03199094169094179290921692909217905550565b60006200094f6200056d60201b620000d51760201c565b6001600160e01b0319831660009081526001820160205260409020549091506001600160a01b0316806200098557505062000c51565b6001600160e01b0319831660009081526001830160209081526040808320546001600160a01b03851684526002860190925282208054600160a01b90920461ffff169260001983019290919083908110620009dc57fe5b90600052602060002090600891828204019190066004029054906101000a900460e01b9050856001600160e01b031916816001600160e01b0319161462000aaf576001600160a01b0384166000908152600286016020526040902080548291908590811062000a4757fe5b600091825260208083206008830401805463ffffffff60079094166004026101000a938402191660e09590951c929092029390931790556001600160e01b0319831681526001870190915260409020805461ffff60a01b1916600160a01b61ffff8616021790555b6001600160a01b0384166000908152600286016020526040902080548062000ad357fe5b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b0319881682526001870190526040902080546001600160b01b03191690558162000c4b576003850180546000198101916000918390811062000b4957fe5b60009182526020808320909101546001600160a01b0389811680855260028c019093526040909320600101549216925061ffff90911690821462000be3578188600301828154811062000b9857fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055918416815260028a0190915260409020600101805461ffff191661ffff83161790555b8760030180548062000bf157fe5b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b038916825260028a019052604081209062000c3a828262000c96565b50600101805461ffff191690555050505b50505050505b50565b610f5c806200191683390190565b61073f806200287283390190565b61027d8062002fb183390190565b60408051808201909152600081526060602082015290565b50805460008255600701600890049060005260206000209081019062000c5191905b8082111562000cce576000815560010162000cb8565b5090565b60006020828403121562000ce4578081fd5b81516001600160a01b038116811462000cfb578182fd5b9392505050565b6001600160a01b03169052565b6000815180845260208085019450808401835b8381101562000d4a5781516001600160e01b0319168752958201959082019060010162000d22565b509495945050505050565b60008151808452815b8181101562000d7c5760208185018101518683018201520162000d5e565b8181111562000d8e5782602083870101525b50601f01601f19169290920160200192915050565b60006060820160608352808651808352608085019150602092506080838202860101838901855b8381101562000e1b57607f198884030185528151604062000ded85835162000d02565b878201519150808886015262000e068186018362000d0f565b96880196945050509085019060010162000dca565b505062000e2b8487018962000d02565b858103604087015262000e3f818862000d55565b9998505050505050505050565b60006020825262000cfb602083018462000d55565b610aa58062000e716000396000f3fe60806040523661000b57005b600080356001600160e01b03191681527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d60205260409020547fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c9081906001600160a01b0316806100b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100a890610a16565b60405180910390fd5b3660008037600080366000845af43d6000803e8080156100d0573d6000f35b3d6000fd5b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b60006101036100d5565b905060005b825181101561034557600083828151811061011f57fe5b60209081029190910101515190506001600160a01b038116156102dc576001600160a01b038116600090815260028401602052604090206001015461ffff168015801561018457506001600160a01b0382166000908152600285016020526040902054155b1561020e576101ab82604051806060016040528060248152602001610a4c60249139610391565b5060038301805460018082018355600092835260208084208301805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03871690811790915584526002870190526040909220909101805461ffff191661ffff83161790555b60005b85848151811061021d57fe5b602002602001015160200151518110156102d557600086858151811061023f57fe5b602002602001015160200151828151811061025657fe5b6020908102919091018101516001600160e01b031981166000908152600189019092526040909120549091506001600160a01b03168061029f5761029a85836103d2565b6102cb565b846001600160a01b0316816001600160a01b0316146102cb576102c1826104b2565b6102cb85836103d2565b5050600101610211565b505061033c565b60005b8483815181106102eb57fe5b6020026020010151602001515181101561033a5761033285848151811061030e57fe5b602002602001015160200151828151811061032557fe5b60200260200101516104b2565b6001016102df565b505b50600101610108565b5060408051600080825260208201928390527f39725dd03d877043d78fdfe186295e46e6277eb0a3498f2adb51071f42a2bdcb926103859286929161093f565b60405180910390a15050565b813b81816103cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100a891906109fc565b50505050565b60006103dc6100d5565b6001600160a01b03909316600081815260028501602090815260408083208054600180820183559185528385206008820401805460e08a901c600460078516026101000a90810263ffffffff909102199091161790556001600160e01b03199097168452909601905293909320805461ffff90931674010000000000000000000000000000000000000000027fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff73ffffffffffffffffffffffffffffffffffffffff199094169094179290921692909217905550565b60006104bc6100d5565b6001600160e01b0319831660009081526001820160205260409020549091506001600160a01b0316806104f0575050610849565b6001600160e01b0319831660009081526001830160209081526040808320546001600160a01b038516845260028601909252822080547401000000000000000000000000000000000000000090920461ffff16926000198301929091908390811061055757fe5b90600052602060002090600891828204019190066004029054906101000a900460e01b9050857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461067d576001600160a01b038416600090815260028601602052604090208054829190859081106105ea57fe5b600091825260208083206008830401805463ffffffff60079094166004026101000a938402191660e09590951c929092029390931790556001600160e01b031983168152600187019091526040902080547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000061ffff8616021790555b6001600160a01b038416600090815260028601602052604090208054806106a057fe5b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b0319881682526001870190526040902080547fffffffffffffffffffff0000000000000000000000000000000000000000000016905581610843576003850180546000198101916000918390811061072c57fe5b60009182526020808320909101546001600160a01b0389811680855260028c019093526040909320600101549216925061ffff9091169082146107d1578188600301828154811061077957fe5b6000918252602080832091909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03948516179055918416815260028a0190915260409020600101805461ffff191661ffff83161790555b876003018054806107de57fe5b600082815260208082208301600019908101805473ffffffffffffffffffffffffffffffffffffffff191690559092019092556001600160a01b038916825260028a0190526040812090610832828261084c565b50600101805461ffff191690555050505b50505050505b50565b50805460008255600701600890049060005260206000209081019061084991905b80821115610881576000815560010161086d565b5090565b6001600160a01b03169052565b6000815180845260208085019450808401835b838110156108cb5781516001600160e01b031916875295820195908201906001016108a5565b509495945050505050565b60008151808452815b818110156108fb576020818501810151868301820152016108df565b8181111561090c5782602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60006060820160608352808651808352608085019150602092506080838202860101838901855b838110156109cf577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80888403018552815160406109a4858351610885565b87820151915080888601526109bb81860183610892565b968801969450505090850190600101610966565b50506109dd84870189610885565b85810360408701526109ef81886108d6565b9998505050505050505050565b600060208252610a0f60208301846108d6565b9392505050565b6020808252818101527f4469616d6f6e643a2046756e6374696f6e20646f6573206e6f7420657869737460408201526060019056fe4c69624469616d6f6e644375743a204e657720666163657420686173206e6f20636f6465a264697066735822122012e7ed35b4a2847b23e9d014f8b7b3c729039992cbc88821d0901892d1f6ba3d64736f6c63430007010033608060405234801561001057600080fd5b50610f3c806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063e712b4e114610030575b600080fd5b61004361003e366004610a05565b610045565b005b61004f85856101c2565b7f39725dd03d877043d78fdfe186295e46e6277eb0a3498f2adb51071f42a2bdcb8585858585604051610086959493929190610b83565b60405180910390a16001600160a01b0383166100c85780156100c35760405162461bcd60e51b81526004016100ba90610cea565b60405180910390fd5b6101bb565b806100e55760405162461bcd60e51b81526004016100ba90610d47565b6001600160a01b038316301461011757610117836040518060600160405280602a8152602001610eb7602a91396104b6565b60006060846001600160a01b03168484604051610135929190610b73565b600060405180830381855af49150503d8060008114610170576040519150601f19603f3d011682016040523d82523d6000602084013e610175565b606091505b5091509150816101b8578051156101a0578060405162461bcd60e51b81526004016100ba9190610c60565b60405162461bcd60e51b81526004016100ba90610da4565b50505b5050505050565b60006101cc6104d7565b80549091506001600160a01b031633146101f85760405162461bcd60e51b81526004016100ba90610cb3565b60005b828110156104b057600084848381811061021157fe5b90506020028101906102239190610e4f565b6102319060208101906109e3565b90506001600160a01b03811615610412576001600160a01b038116600090815260028401602052604090206001015461ffff168015801561028a57506001600160a01b0382166000908152600285016020526040902054155b15610314576102b182604051806060016040528060268152602001610ee1602691396104b6565b5060038301805460018082018355600092835260208084208301805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03871690811790915584526002870190526040909220909101805461ffff191661ffff83161790555b60005b86868581811061032357fe5b90506020028101906103359190610e4f565b610343906020810190610e01565b905081101561040b57600087878681811061035a57fe5b905060200281019061036c9190610e4f565b61037a906020810190610e01565b8381811061038457fe5b90506020020160208101906103999190610ad8565b6001600160e01b0319811660009081526001880160205260409020549091506001600160a01b0316806103d5576103d085836104fb565b610401565b846001600160a01b0316816001600160a01b031614610401576103f7826105db565b61040185836104fb565b5050600101610317565b50506104a7565b60005b85858481811061042157fe5b90506020028101906104339190610e4f565b610441906020810190610e01565b90508110156104a55761049d86868581811061045957fe5b905060200281019061046b9190610e4f565b610479906020810190610e01565b8381811061048357fe5b90506020020160208101906104989190610ad8565b6105db565b600101610415565b505b506001016101fb565b50505050565b813b81816104b05760405162461bcd60e51b81526004016100ba9190610c60565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b60006105056104d7565b6001600160a01b03909316600081815260028501602090815260408083208054600180820183559185528385206008820401805460e08a901c600460078516026101000a90810263ffffffff909102199091161790556001600160e01b03199097168452909601905293909320805461ffff90931674010000000000000000000000000000000000000000027fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff73ffffffffffffffffffffffffffffffffffffffff199094169094179290921692909217905550565b60006105e56104d7565b6001600160e01b0319831660009081526001820160205260409020549091506001600160a01b031680610619575050610972565b6001600160e01b0319831660009081526001830160209081526040808320546001600160a01b038516845260028601909252822080547401000000000000000000000000000000000000000090920461ffff16926000198301929091908390811061068057fe5b90600052602060002090600891828204019190066004029054906101000a900460e01b9050857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146107a6576001600160a01b0384166000908152600286016020526040902080548291908590811061071357fe5b600091825260208083206008830401805463ffffffff60079094166004026101000a938402191660e09590951c929092029390931790556001600160e01b031983168152600187019091526040902080547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000061ffff8616021790555b6001600160a01b038416600090815260028601602052604090208054806107c957fe5b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b0319881682526001870190526040902080547fffffffffffffffffffff000000000000000000000000000000000000000000001690558161096c576003850180546000198101916000918390811061085557fe5b60009182526020808320909101546001600160a01b0389811680855260028c019093526040909320600101549216925061ffff9091169082146108fa57818860030182815481106108a257fe5b6000918252602080832091909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03948516179055918416815260028a0190915260409020600101805461ffff191661ffff83161790555b8760030180548061090757fe5b600082815260208082208301600019908101805473ffffffffffffffffffffffffffffffffffffffff191690559092019092556001600160a01b038916825260028a019052604081209061095b8282610975565b50600101805461ffff191690555050505b50505050505b50565b50805460008255600701600890049060005260206000209081019061097291905b808211156109aa5760008155600101610996565b5090565b80356001600160a01b03811681146109c557600080fd5b92915050565b80356001600160e01b0319811681146109c557600080fd5b6000602082840312156109f4578081fd5b6109fe83836109ae565b9392505050565b600080600080600060608688031215610a1c578081fd5b853567ffffffffffffffff80821115610a33578283fd5b818801915088601f830112610a46578283fd5b813581811115610a54578384fd5b60208a818284028601011115610a68578485fd5b8084019850819750610a7c8b828c016109ae565b965060408a0135935082841115610a91578485fd5b838a0193508a601f850112610aa4578485fd5b8335915082821115610ab4578485fd5b8a81838601011115610ac4578485fd5b979a96995094975050909401935090919050565b600060208284031215610ae9578081fd5b6109fe83836109cb565b6001600160a01b03169052565b60008284526020808501945082825b85811015610b3e578282016001600160e01b0319610b2d82856109cb565b168852968301969150600101610b0f565b509495945050505050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b6000828483379101908152919050565b606080825281018590526000602060808084019082890285010189845b8a811015610c31577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808784030184528135603e198d3603018112610be2578687fd5b8c016040868201610bfc86610bf783866109ae565b610af3565b610c068184610e6e565b935090508188870152610c1c8287018483610b00565b96880196955050509185019150600101610ba0565b5050610c3f83860189610af3565b8481036040860152610c52818789610b49565b9a9950505050505050505050565b6000602080835283518082850152825b81811015610c8c57858101830151858201604001528201610c70565b81811115610c9d5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526016908201527f4d757374206f776e2074686520636f6e74726163742e00000000000000000000604082015260600190565b6020808252603e908201527f4469616d6f6e6443757446616365743a205f696e69742069732061646472657360408201527f73283029206275745f63616c6c64617461206973206e6f7420656d7074790000606082015260800190565b6020808252603f908201527f4469616d6f6e6443757446616365743a205f63616c6c6461746120697320656d60408201527f70747920627574205f696e6974206973206e6f74206164647265737328302900606082015260800190565b60208082526028908201527f4469616d6f6e6443757446616365743a205f696e69742066756e6374696f6e2060408201527f7265766572746564000000000000000000000000000000000000000000000000606082015260800190565b6000808335601e19843603018112610e17578283fd5b83018035915067ffffffffffffffff821115610e31578283fd5b6020908101925081023603821315610e4857600080fd5b9250929050565b60008235603e19833603018112610e64578182fd5b9190910192915050565b6000808335601e19843603018112610e84578283fd5b830160208101925035905067ffffffffffffffff811115610ea457600080fd5b602081023603831315610e4857600080fdfe4469616d6f6e6443757446616365743a205f696e6974206164647265737320686173206e6f20636f64654469616d6f6e6443757446616365743a204e657720666163657420686173206e6f20636f6465a2646970667358221220d549925be7f162ad8bee0e5faaf2f9a9e548ed65080d804fbd4dcdb3aa77977264736f6c63430007010033608060405234801561001057600080fd5b5061071f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80637a0ed627116100505780637a0ed627146100aa578063adfca15e146100bf578063cdffacc6146100df57610067565b806301ffc9a71461006c57806352ef6b2c14610095575b600080fd5b61007f61007a36600461050f565b6100ff565b60405161008c91906106de565b60405180910390f35b61009d61014a565b60405161008c91906105cc565b6100b26101c3565b60405161008c9190610639565b6100d26100cd3660046104d4565b610370565b60405161008c9190610626565b6100f26100ed36600461050f565b61043c565b60405161008c91906105ab565b60008061010a610498565b7fffffffff00000000000000000000000000000000000000000000000000000000841660009081526004909101602052604090205460ff16915050919050565b60606000610156610498565b600381018054604080516020808402820181019092528281529394508301828280156101b857602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161018d575b505050505091505090565b606060006101cf610498565b60038101549091508067ffffffffffffffff811180156101ee57600080fd5b5060405190808252806020026020018201604052801561022857816020015b6102156104bc565b81526020019060019003908161020d5790505b50925060005b8181101561036a57600083600301828154811061024757fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508085838151811061028157fe5b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff928316905290821660009081526002860182526040908190208054825181850281018501909352808352919290919083018282801561034257602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116102ef5790505b505050505085838151811061035357fe5b60209081029190910181015101525060010161022e565b50505090565b6060600061037c610498565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600282016020908152604091829020805483518184028101840190945280845293945091929083018282801561042f57602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116103dc5790505b5050505050915050919050565b600080610447610498565b7fffffffff00000000000000000000000000000000000000000000000000000000909316600090815260019093016020525050604090205473ffffffffffffffffffffffffffffffffffffffff1690565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b60408051808201909152600081526060602082015290565b6000602082840312156104e5578081fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610508578182fd5b9392505050565b600060208284031215610520578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610508578182fd5b6000815180845260208085019450808401835b838110156105a05781517fffffffff000000000000000000000000000000000000000000000000000000001687529582019590820190600101610562565b509495945050505050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6020808252825182820181905260009190848201906040850190845b8181101561061a57835173ffffffffffffffffffffffffffffffffffffffff16835292840192918401916001016105e8565b50909695505050505050565b600060208252610508602083018461054f565b60208082528251828201819052600091906040908185019080840286018301878501865b838110156106d0578883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00185528151805173ffffffffffffffffffffffffffffffffffffffff1684528701518784018790526106bd8785018261054f565b958801959350509086019060010161065d565b509098975050505050505050565b90151581526020019056fea2646970667358221220e6bc52eff367bffa184f21fff4b2b1e67b39a7f4ef10559888221813c6c7b50164736f6c63430007010033608060405234801561001057600080fd5b5061025d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80638da5cb5b1461003b578063f2fde38b14610059575b600080fd5b61004361006e565b60405161005091906101cf565b60405180910390f35b61006c610067366004610194565b610096565b005b600080610079610170565b5473ffffffffffffffffffffffffffffffffffffffff1691505090565b60006100a0610170565b805490915073ffffffffffffffffffffffffffffffffffffffff163381146100fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f4906101f0565b60405180910390fd5b81547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8481169182178455604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b6000602082840312156101a5578081fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146101c8578182fd5b9392505050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b60208082526016908201527f4d757374206f776e2074686520636f6e74726163742e0000000000000000000060408201526060019056fea2646970667358221220e4ef1d95ebf335ba5234af7aa0a862982465bbdd5e9a39f9552b962ab297b95c64736f6c634300070100334c69624469616d6f6e644375743a204e657720666163657420686173206e6f20636f6465a264697066735822122066549c6b30b1c727bb6e120bc90407b2f392893ac047ec2306da72d62658073364736f6c63430007010033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH3 0x20 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5C948AE3 EQ PUSH3 0x25 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x3C PUSH3 0x36 CALLDATASIZE PUSH1 0x4 PUSH3 0x2E4 JUMP JUMPDEST PUSH3 0x54 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x4B SWAP2 SWAP1 PUSH3 0x49F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP2 ISZERO PUSH3 0xD2 JUMPI DUP2 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x72 SWAP3 SWAP2 SWAP1 PUSH3 0x46C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP2 POP CALLVALUE DUP3 SWAP1 ADDRESS PUSH1 0x40 MLOAD PUSH3 0x9C SWAP1 PUSH3 0x261 JUMP JUMPDEST PUSH3 0xA8 SWAP2 SWAP1 PUSH3 0x49F JUMP JUMPDEST DUP3 SWAP1 PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 DUP4 CREATE2 SWAP2 POP POP DUP1 ISZERO DUP1 ISZERO PUSH3 0xC9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP1 POP PUSH3 0x110 JUMP JUMPDEST CALLVALUE ADDRESS PUSH1 0x40 MLOAD PUSH3 0xE2 SWAP1 PUSH3 0x261 JUMP JUMPDEST PUSH3 0xEE SWAP2 SWAP1 PUSH3 0x49F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 DUP3 CREATE SWAP1 POP DUP1 ISZERO DUP1 ISZERO PUSH3 0x10C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP1 POP JUMPDEST PUSH32 0x644CA5B0A8B0418E9FAF3880659EEB84EAAD45AD838B0173808E5CA72F5EFC49 DUP2 PUSH1 0x40 MLOAD PUSH3 0x141 SWAP2 SWAP1 PUSH3 0x49F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH4 0xE712B4E1 DUP8 DUP8 DUP7 PUSH3 0x175 JUMPI PUSH1 0x0 PUSH3 0x177 JUMP JUMPDEST DUP5 JUMPDEST DUP9 DUP9 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x19B SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x4C0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x1B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x1CB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xF2FDE38B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP3 POP PUSH4 0xF2FDE38B SWAP2 POP PUSH3 0x223 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH3 0x49F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x23E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x253 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x3252 DUP1 PUSH3 0x634 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH3 0x294 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH3 0x2AC JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x2C4 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH3 0x2DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP8 DUP10 SUB SLT ISZERO PUSH3 0x2FD JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH3 0x309 DUP9 DUP9 PUSH3 0x26F JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH3 0x326 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP10 ADD SWAP2 POP DUP10 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x33A JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH3 0x349 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP11 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH3 0x35D JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP8 POP DUP1 SWAP7 POP POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x37B JUMPI DUP4 DUP5 REVERT JUMPDEST POP PUSH3 0x38A DUP10 DUP3 DUP11 ADD PUSH3 0x29A JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP5 SWAP7 SWAP6 PUSH1 0x60 SWAP1 SWAP6 ADD CALLDATALOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP3 DUP3 JUMPDEST DUP6 DUP2 LT ISZERO PUSH3 0x419 JUMPI DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP1 DUP3 EQ PUSH3 0x405 JUMPI DUP6 DUP7 REVERT JUMPDEST DUP9 MSTORE POP SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH3 0x3CB JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MSTORE DUP3 DUP3 PUSH1 0x20 DUP7 ADD CALLDATACOPY DUP1 PUSH1 0x20 DUP5 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP6 ADD AND DUP6 ADD ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x60 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 PUSH1 0x20 PUSH1 0x80 DUP1 DUP5 ADD SWAP1 DUP3 DUP10 MUL DUP6 ADD ADD DUP10 DUP5 JUMPDEST DUP11 DUP2 LT ISZERO PUSH3 0x597 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80 DUP8 DUP5 SUB ADD DUP5 MSTORE DUP2 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC1 DUP14 CALLDATASIZE SUB ADD DUP2 SLT PUSH3 0x53F JUMPI DUP7 DUP8 REVERT JUMPDEST DUP13 ADD PUSH1 0x40 DUP7 DUP3 ADD PUSH3 0x55D DUP7 PUSH3 0x557 DUP4 DUP7 PUSH3 0x26F JUMP JUMPDEST PUSH3 0x3A2 JUMP JUMPDEST PUSH3 0x569 DUP2 DUP5 PUSH3 0x5CA JUMP JUMPDEST SWAP4 POP SWAP1 POP DUP2 DUP9 DUP8 ADD MSTORE PUSH3 0x581 DUP3 DUP8 ADD DUP5 DUP4 PUSH3 0x3BC JUMP JUMPDEST SWAP7 DUP9 ADD SWAP7 SWAP6 POP POP POP SWAP2 DUP6 ADD SWAP2 POP PUSH1 0x1 ADD PUSH3 0x4DD JUMP JUMPDEST POP POP PUSH3 0x5A7 DUP4 DUP7 ADD DUP10 PUSH3 0x3A2 JUMP JUMPDEST DUP5 DUP2 SUB PUSH1 0x40 DUP7 ADD MSTORE PUSH3 0x5BC DUP2 DUP8 DUP10 PUSH3 0x424 JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH3 0x5FF JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x20 DUP2 ADD SWAP3 POP CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x620 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP2 MUL CALLDATASIZE SUB DUP4 SGT ISZERO PUSH3 0x2DD JUMPI PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH3 0x3252 CODESIZE SUB DUP1 PUSH3 0x3252 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x26 SWAP2 PUSH3 0xCD2 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x3D PUSH3 0x56D PUSH1 0x20 SHL PUSH3 0xD5 OR PUSH1 0x20 SHR JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 PUSH1 0x0 PUSH1 0x40 MLOAD PUSH3 0x97 SWAP1 PUSH3 0xC54 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0xB4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD PUSH3 0xC7 SWAP1 PUSH3 0xC62 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0xE4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD PUSH3 0xF7 SWAP1 PUSH3 0xC70 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0x114 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x3 DUP1 DUP3 MSTORE PUSH1 0x80 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP PUSH1 0x60 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH3 0x13B PUSH3 0xC7E JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH3 0x131 JUMPI SWAP1 POP POP SWAP1 POP DUP4 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH3 0x160 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH3 0x1A7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP2 SWAP1 MSTORE POP PUSH4 0xE712B4E1 PUSH1 0xE0 SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH3 0x1CC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH3 0x1E5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE POP POP DUP3 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH3 0x216 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x5 DUP1 DUP3 MSTORE PUSH1 0xC0 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP2 DUP3 ADD PUSH1 0xA0 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH3 0x25C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP2 SWAP1 MSTORE POP PUSH4 0xADFCA15E PUSH1 0xE0 SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH3 0x281 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH3 0x29A JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP1 MLOAD PUSH4 0x7A0ED627 PUSH1 0xE0 SHL SWAP1 DUP3 SWAP1 PUSH1 0x1 SWAP1 DUP2 LT PUSH3 0x2CC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH3 0x2E5 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP1 MLOAD PUSH4 0x66FFD663 PUSH1 0xE1 SHL SWAP1 DUP3 SWAP1 PUSH1 0x1 SWAP1 DUP2 LT PUSH3 0x317 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH3 0x330 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP1 MLOAD PUSH4 0x14BBDACB PUSH1 0xE2 SHL SWAP1 DUP3 SWAP1 PUSH1 0x1 SWAP1 DUP2 LT PUSH3 0x362 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x3 DUP2 MLOAD DUP2 LT PUSH3 0x37B JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP1 MLOAD PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL SWAP1 DUP3 SWAP1 PUSH1 0x1 SWAP1 DUP2 LT PUSH3 0x3AD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x4 DUP2 MLOAD DUP2 LT PUSH3 0x3C6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE POP POP DUP2 DUP2 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH3 0x3F7 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP1 DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP DUP2 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH3 0x43F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP2 SWAP1 MSTORE POP PUSH4 0xF2FDE38B PUSH1 0xE0 SHL DUP2 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH3 0x464 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH3 0x47D JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP1 MLOAD PUSH4 0x8DA5CB5B PUSH1 0xE0 SHL SWAP1 DUP3 SWAP1 PUSH1 0x2 SWAP1 DUP2 LT PUSH3 0x4AF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH3 0x4C8 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD DUP3 ADD MSTORE PUSH3 0x4F6 SWAP1 DUP3 SWAP1 PUSH3 0xF9 PUSH3 0x591 DUP3 SHL OR SWAP1 SHR JUMP JUMPDEST POP POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 SWAP1 SWAP4 ADD PUSH1 0x20 MSTORE POP POP PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT SWAP1 DUP2 AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP3 SSTORE PUSH4 0xE712B4E1 PUSH1 0xE0 SHL DUP5 MSTORE DUP3 DUP5 KECCAK256 DUP1 SLOAD DUP3 AND DUP4 OR SWAP1 SSTORE PUSH4 0x48E2B093 PUSH1 0xE0 SHL DUP5 MSTORE DUP3 DUP5 KECCAK256 DUP1 SLOAD DUP3 AND DUP4 OR SWAP1 SSTORE PUSH4 0x7F5828D PUSH1 0xE4 SHL DUP5 MSTORE SWAP2 SWAP1 SWAP3 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SWAP2 OR SWAP1 SSTORE POP PUSH3 0xE61 JUMP JUMPDEST PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131C SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x5A8 PUSH3 0x56D PUSH1 0x20 SHL PUSH3 0xD5 OR PUSH1 0x20 SHR JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH3 0x802 JUMPI PUSH1 0x0 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH3 0x5C6 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD MLOAD SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH3 0x78B JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xFFFF AND DUP1 ISZERO DUP1 ISZERO PUSH3 0x62D JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP6 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO JUMPDEST ISZERO PUSH3 0x6AE JUMPI PUSH3 0x658 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x322E PUSH1 0x24 SWAP2 CODECOPY PUSH3 0x850 JUMP JUMPDEST POP PUSH1 0x3 DUP4 ADD DUP1 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP4 SSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 DUP1 DUP5 KECCAK256 DUP4 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP5 MSTORE PUSH1 0x2 DUP8 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP3 KECCAK256 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF DUP4 AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH3 0x6BE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH3 0x783 JUMPI PUSH1 0x0 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH3 0x6E2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH3 0x6FA JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP10 ADD SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH3 0x747 JUMPI PUSH3 0x741 DUP6 DUP4 PUSH3 0x883 JUMP JUMPDEST PUSH3 0x778 JUMP JUMPDEST DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH3 0x778 JUMPI PUSH3 0x76C DUP3 PUSH3 0x938 JUMP JUMPDEST PUSH3 0x778 DUP6 DUP4 PUSH3 0x883 JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH3 0x6B1 JUMP JUMPDEST POP POP PUSH3 0x7F8 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH3 0x79B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH3 0x7F6 JUMPI PUSH3 0x7ED DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH3 0x7C1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH3 0x7D9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH3 0x938 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x1 ADD PUSH3 0x78E JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH3 0x5AD JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP3 DUP4 SWAP1 MSTORE PUSH32 0x39725DD03D877043D78FDFE186295E46E6277EB0A3498F2ADB51071F42A2BDCB SWAP3 PUSH3 0x844 SWAP3 DUP7 SWAP3 SWAP2 PUSH3 0xDA3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST DUP2 EXTCODESIZE DUP2 DUP2 PUSH3 0x87D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x874 SWAP2 SWAP1 PUSH3 0xE4C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x89A PUSH3 0x56D PUSH1 0x20 SHL PUSH3 0xD5 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 DUP6 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP4 SSTORE SWAP2 DUP6 MSTORE DUP4 DUP6 KECCAK256 PUSH1 0x8 DUP3 DIV ADD DUP1 SLOAD PUSH1 0xE0 DUP11 SWAP1 SHR PUSH1 0x4 PUSH1 0x7 DUP6 AND MUL PUSH2 0x100 EXP SWAP1 DUP2 MUL PUSH4 0xFFFFFFFF SWAP1 SWAP2 MUL NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP8 AND DUP5 MSTORE SWAP1 SWAP7 ADD SWAP1 MSTORE SWAP4 SWAP1 SWAP4 KECCAK256 DUP1 SLOAD PUSH2 0xFFFF SWAP1 SWAP4 AND PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH2 0xFFFF PUSH1 0xA0 SHL NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP5 AND SWAP1 SWAP5 OR SWAP3 SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x94F PUSH3 0x56D PUSH1 0x20 SHL PUSH3 0xD5 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH3 0x985 JUMPI POP POP PUSH3 0xC51 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE PUSH1 0x2 DUP7 ADD SWAP1 SWAP3 MSTORE DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP3 DIV PUSH2 0xFFFF AND SWAP3 PUSH1 0x0 NOT DUP4 ADD SWAP3 SWAP1 SWAP2 SWAP1 DUP4 SWAP1 DUP2 LT PUSH3 0x9DC JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD PUSH1 0x4 MUL SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xE0 SHL SWAP1 POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND EQ PUSH3 0xAAF JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 SWAP2 SWAP1 DUP6 SWAP1 DUP2 LT PUSH3 0xA47 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x8 DUP4 DIV ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x7 SWAP1 SWAP5 AND PUSH1 0x4 MUL PUSH2 0x100 EXP SWAP4 DUP5 MUL NOT AND PUSH1 0xE0 SWAP6 SWAP1 SWAP6 SHR SWAP3 SWAP1 SWAP3 MUL SWAP4 SWAP1 SWAP4 OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND DUP2 MSTORE PUSH1 0x1 DUP8 ADD SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0xFFFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL PUSH2 0xFFFF DUP7 AND MUL OR SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP1 PUSH3 0xAD3 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 PUSH1 0x8 PUSH1 0x0 NOT SWAP1 SWAP5 ADD SWAP4 DUP5 DIV ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x4 PUSH1 0x7 DUP8 AND MUL PUSH2 0x100 EXP MUL NOT AND SWAP1 SSTORE SWAP2 SWAP1 SWAP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP9 AND DUP3 MSTORE PUSH1 0x1 DUP8 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xB0 SHL SUB NOT AND SWAP1 SSTORE DUP2 PUSH3 0xC4B JUMPI PUSH1 0x3 DUP6 ADD DUP1 SLOAD PUSH1 0x0 NOT DUP2 ADD SWAP2 PUSH1 0x0 SWAP2 DUP4 SWAP1 DUP2 LT PUSH3 0xB49 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND DUP1 DUP6 MSTORE PUSH1 0x2 DUP13 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 SWAP4 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP3 AND SWAP3 POP PUSH2 0xFFFF SWAP1 SWAP2 AND SWAP1 DUP3 EQ PUSH3 0xBE3 JUMPI DUP2 DUP9 PUSH1 0x3 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH3 0xB98 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP2 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND OR SWAP1 SSTORE SWAP2 DUP5 AND DUP2 MSTORE PUSH1 0x2 DUP11 ADD SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF DUP4 AND OR SWAP1 SSTORE JUMPDEST DUP8 PUSH1 0x3 ADD DUP1 SLOAD DUP1 PUSH3 0xBF1 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 DUP4 ADD PUSH1 0x0 NOT SWAP1 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE SWAP1 SWAP3 ADD SWAP1 SWAP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND DUP3 MSTORE PUSH1 0x2 DUP11 ADD SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 PUSH3 0xC3A DUP3 DUP3 PUSH3 0xC96 JUMP JUMPDEST POP PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND SWAP1 SSTORE POP POP POP JUMPDEST POP POP POP POP POP JUMPDEST POP JUMP JUMPDEST PUSH2 0xF5C DUP1 PUSH3 0x1916 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH2 0x73F DUP1 PUSH3 0x2872 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH2 0x27D DUP1 PUSH3 0x2FB1 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x0 DUP3 SSTORE PUSH1 0x7 ADD PUSH1 0x8 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH3 0xC51 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0xCCE JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0xCB8 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0xCE4 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0xCFB JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0xD4A JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH3 0xD22 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0xD7C JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH3 0xD5E JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH3 0xD8E JUMPI DUP3 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD PUSH1 0x60 DUP4 MSTORE DUP1 DUP7 MLOAD DUP1 DUP4 MSTORE PUSH1 0x80 DUP6 ADD SWAP2 POP PUSH1 0x20 SWAP3 POP PUSH1 0x80 DUP4 DUP3 MUL DUP7 ADD ADD DUP4 DUP10 ADD DUP6 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0xE1B JUMPI PUSH1 0x7F NOT DUP9 DUP5 SUB ADD DUP6 MSTORE DUP2 MLOAD PUSH1 0x40 PUSH3 0xDED DUP6 DUP4 MLOAD PUSH3 0xD02 JUMP JUMPDEST DUP8 DUP3 ADD MLOAD SWAP2 POP DUP1 DUP9 DUP7 ADD MSTORE PUSH3 0xE06 DUP2 DUP7 ADD DUP4 PUSH3 0xD0F JUMP JUMPDEST SWAP7 DUP9 ADD SWAP7 SWAP5 POP POP POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH3 0xDCA JUMP JUMPDEST POP POP PUSH3 0xE2B DUP5 DUP8 ADD DUP10 PUSH3 0xD02 JUMP JUMPDEST DUP6 DUP2 SUB PUSH1 0x40 DUP8 ADD MSTORE PUSH3 0xE3F DUP2 DUP9 PUSH3 0xD55 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH3 0xCFB PUSH1 0x20 DUP4 ADD DUP5 PUSH3 0xD55 JUMP JUMPDEST PUSH2 0xAA5 DUP1 PUSH3 0xE71 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE PUSH2 0xB JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131C SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0xB1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA8 SWAP1 PUSH2 0xA16 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLDATASIZE PUSH1 0x0 DUP1 CALLDATACOPY PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x0 DUP5 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY DUP1 DUP1 ISZERO PUSH2 0xD0 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131C SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x103 PUSH2 0xD5 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x345 JUMPI PUSH1 0x0 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x11F JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD MLOAD SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x2DC JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xFFFF AND DUP1 ISZERO DUP1 ISZERO PUSH2 0x184 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP6 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO JUMPDEST ISZERO PUSH2 0x20E JUMPI PUSH2 0x1AB DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA4C PUSH1 0x24 SWAP2 CODECOPY PUSH2 0x391 JUMP JUMPDEST POP PUSH1 0x3 DUP4 ADD DUP1 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP4 SSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 DUP1 DUP5 KECCAK256 DUP4 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP5 MSTORE PUSH1 0x2 DUP8 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP3 KECCAK256 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF DUP4 AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x21D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x2D5 JUMPI PUSH1 0x0 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x23F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x256 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP10 ADD SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x29F JUMPI PUSH2 0x29A DUP6 DUP4 PUSH2 0x3D2 JUMP JUMPDEST PUSH2 0x2CB JUMP JUMPDEST DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2CB JUMPI PUSH2 0x2C1 DUP3 PUSH2 0x4B2 JUMP JUMPDEST PUSH2 0x2CB DUP6 DUP4 PUSH2 0x3D2 JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x211 JUMP JUMPDEST POP POP PUSH2 0x33C JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2EB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x33A JUMPI PUSH2 0x332 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x30E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x325 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x4B2 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x2DF JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x108 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP3 DUP4 SWAP1 MSTORE PUSH32 0x39725DD03D877043D78FDFE186295E46E6277EB0A3498F2ADB51071F42A2BDCB SWAP3 PUSH2 0x385 SWAP3 DUP7 SWAP3 SWAP2 PUSH2 0x93F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST DUP2 EXTCODESIZE DUP2 DUP2 PUSH2 0x3CC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA8 SWAP2 SWAP1 PUSH2 0x9FC JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3DC PUSH2 0xD5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 DUP6 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP4 SSTORE SWAP2 DUP6 MSTORE DUP4 DUP6 KECCAK256 PUSH1 0x8 DUP3 DIV ADD DUP1 SLOAD PUSH1 0xE0 DUP11 SWAP1 SHR PUSH1 0x4 PUSH1 0x7 DUP6 AND MUL PUSH2 0x100 EXP SWAP1 DUP2 MUL PUSH4 0xFFFFFFFF SWAP1 SWAP2 MUL NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP8 AND DUP5 MSTORE SWAP1 SWAP7 ADD SWAP1 MSTORE SWAP4 SWAP1 SWAP4 KECCAK256 DUP1 SLOAD PUSH2 0xFFFF SWAP1 SWAP4 AND PUSH21 0x10000000000000000000000000000000000000000 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 SWAP5 AND SWAP1 SWAP5 OR SWAP3 SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4BC PUSH2 0xD5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x4F0 JUMPI POP POP PUSH2 0x849 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE PUSH1 0x2 DUP7 ADD SWAP1 SWAP3 MSTORE DUP3 KECCAK256 DUP1 SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP3 DIV PUSH2 0xFFFF AND SWAP3 PUSH1 0x0 NOT DUP4 ADD SWAP3 SWAP1 SWAP2 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x557 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD PUSH1 0x4 MUL SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xE0 SHL SWAP1 POP DUP6 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x67D JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 SWAP2 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 0x5EA JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x8 DUP4 DIV ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x7 SWAP1 SWAP5 AND PUSH1 0x4 MUL PUSH2 0x100 EXP SWAP4 DUP5 MUL NOT AND PUSH1 0xE0 SWAP6 SWAP1 SWAP6 SHR SWAP3 SWAP1 SWAP3 MUL SWAP4 SWAP1 SWAP4 OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND DUP2 MSTORE PUSH1 0x1 DUP8 ADD SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH21 0x10000000000000000000000000000000000000000 PUSH2 0xFFFF DUP7 AND MUL OR SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP1 PUSH2 0x6A0 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 PUSH1 0x8 PUSH1 0x0 NOT SWAP1 SWAP5 ADD SWAP4 DUP5 DIV ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x4 PUSH1 0x7 DUP8 AND MUL PUSH2 0x100 EXP MUL NOT AND SWAP1 SSTORE SWAP2 SWAP1 SWAP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP9 AND DUP3 MSTORE PUSH1 0x1 DUP8 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000000000000000 AND SWAP1 SSTORE DUP2 PUSH2 0x843 JUMPI PUSH1 0x3 DUP6 ADD DUP1 SLOAD PUSH1 0x0 NOT DUP2 ADD SWAP2 PUSH1 0x0 SWAP2 DUP4 SWAP1 DUP2 LT PUSH2 0x72C JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND DUP1 DUP6 MSTORE PUSH1 0x2 DUP13 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 SWAP4 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP3 AND SWAP3 POP PUSH2 0xFFFF SWAP1 SWAP2 AND SWAP1 DUP3 EQ PUSH2 0x7D1 JUMPI DUP2 DUP9 PUSH1 0x3 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x779 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP2 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND OR SWAP1 SSTORE SWAP2 DUP5 AND DUP2 MSTORE PUSH1 0x2 DUP11 ADD SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF DUP4 AND OR SWAP1 SSTORE JUMPDEST DUP8 PUSH1 0x3 ADD DUP1 SLOAD DUP1 PUSH2 0x7DE JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 DUP4 ADD PUSH1 0x0 NOT SWAP1 DUP2 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SSTORE SWAP1 SWAP3 ADD SWAP1 SWAP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND DUP3 MSTORE PUSH1 0x2 DUP11 ADD SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 PUSH2 0x832 DUP3 DUP3 PUSH2 0x84C JUMP JUMPDEST POP PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND SWAP1 SSTORE POP POP POP JUMPDEST POP POP POP POP POP JUMPDEST POP JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x0 DUP3 SSTORE PUSH1 0x7 ADD PUSH1 0x8 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x849 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x881 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x86D JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x8CB JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8A5 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x8FB JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x8DF JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x90C JUMPI DUP3 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD PUSH1 0x60 DUP4 MSTORE DUP1 DUP7 MLOAD DUP1 DUP4 MSTORE PUSH1 0x80 DUP6 ADD SWAP2 POP PUSH1 0x20 SWAP3 POP PUSH1 0x80 DUP4 DUP3 MUL DUP7 ADD ADD DUP4 DUP10 ADD DUP6 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9CF JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80 DUP9 DUP5 SUB ADD DUP6 MSTORE DUP2 MLOAD PUSH1 0x40 PUSH2 0x9A4 DUP6 DUP4 MLOAD PUSH2 0x885 JUMP JUMPDEST DUP8 DUP3 ADD MLOAD SWAP2 POP DUP1 DUP9 DUP7 ADD MSTORE PUSH2 0x9BB DUP2 DUP7 ADD DUP4 PUSH2 0x892 JUMP JUMPDEST SWAP7 DUP9 ADD SWAP7 SWAP5 POP POP POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x966 JUMP JUMPDEST POP POP PUSH2 0x9DD DUP5 DUP8 ADD DUP10 PUSH2 0x885 JUMP JUMPDEST DUP6 DUP2 SUB PUSH1 0x40 DUP8 ADD MSTORE PUSH2 0x9EF DUP2 DUP9 PUSH2 0x8D6 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0xA0F PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x8D6 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4469616D6F6E643A2046756E6374696F6E20646F6573206E6F74206578697374 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP INVALID 0x4C PUSH10 0x624469616D6F6E644375 PUSH21 0x3A204E657720666163657420686173206E6F20636F PUSH5 0x65A2646970 PUSH7 0x735822122012E7 0xED CALLDATALOAD 0xB4 LOG2 DUP5 PUSH28 0x23E9D014F8B7B3C729039992CBC88821D0901892D1F6BA3D64736F6C PUSH4 0x43000701 STOP CALLER PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF3C DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xE712B4E1 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x3E CALLDATASIZE PUSH1 0x4 PUSH2 0xA05 JUMP JUMPDEST PUSH2 0x45 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4F DUP6 DUP6 PUSH2 0x1C2 JUMP JUMPDEST PUSH32 0x39725DD03D877043D78FDFE186295E46E6277EB0A3498F2ADB51071F42A2BDCB DUP6 DUP6 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x86 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB83 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xC8 JUMPI DUP1 ISZERO PUSH2 0xC3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBA SWAP1 PUSH2 0xCEA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1BB JUMP JUMPDEST DUP1 PUSH2 0xE5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBA SWAP1 PUSH2 0xD47 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ADDRESS EQ PUSH2 0x117 JUMPI PUSH2 0x117 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xEB7 PUSH1 0x2A SWAP2 CODECOPY PUSH2 0x4B6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x135 SWAP3 SWAP2 SWAP1 PUSH2 0xB73 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x170 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x175 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x1B8 JUMPI DUP1 MLOAD ISZERO PUSH2 0x1A0 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBA SWAP2 SWAP1 PUSH2 0xC60 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBA SWAP1 PUSH2 0xDA4 JUMP JUMPDEST POP POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CC PUSH2 0x4D7 JUMP JUMPDEST DUP1 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBA SWAP1 PUSH2 0xCB3 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x4B0 JUMPI PUSH1 0x0 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x211 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x223 SWAP2 SWAP1 PUSH2 0xE4F JUMP JUMPDEST PUSH2 0x231 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x9E3 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x412 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xFFFF AND DUP1 ISZERO DUP1 ISZERO PUSH2 0x28A JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP6 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO JUMPDEST ISZERO PUSH2 0x314 JUMPI PUSH2 0x2B1 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xEE1 PUSH1 0x26 SWAP2 CODECOPY PUSH2 0x4B6 JUMP JUMPDEST POP PUSH1 0x3 DUP4 ADD DUP1 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP4 SSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 DUP1 DUP5 KECCAK256 DUP4 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP5 MSTORE PUSH1 0x2 DUP8 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP3 KECCAK256 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF DUP4 AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x0 JUMPDEST DUP7 DUP7 DUP6 DUP2 DUP2 LT PUSH2 0x323 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x335 SWAP2 SWAP1 PUSH2 0xE4F JUMP JUMPDEST PUSH2 0x343 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xE01 JUMP JUMPDEST SWAP1 POP DUP2 LT ISZERO PUSH2 0x40B JUMPI PUSH1 0x0 DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0x35A JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x36C SWAP2 SWAP1 PUSH2 0xE4F JUMP JUMPDEST PUSH2 0x37A SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xE01 JUMP JUMPDEST DUP4 DUP2 DUP2 LT PUSH2 0x384 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x399 SWAP2 SWAP1 PUSH2 0xAD8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP9 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x3D5 JUMPI PUSH2 0x3D0 DUP6 DUP4 PUSH2 0x4FB JUMP JUMPDEST PUSH2 0x401 JUMP JUMPDEST DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x401 JUMPI PUSH2 0x3F7 DUP3 PUSH2 0x5DB JUMP JUMPDEST PUSH2 0x401 DUP6 DUP4 PUSH2 0x4FB JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x317 JUMP JUMPDEST POP POP PUSH2 0x4A7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x421 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x433 SWAP2 SWAP1 PUSH2 0xE4F JUMP JUMPDEST PUSH2 0x441 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xE01 JUMP JUMPDEST SWAP1 POP DUP2 LT ISZERO PUSH2 0x4A5 JUMPI PUSH2 0x49D DUP7 DUP7 DUP6 DUP2 DUP2 LT PUSH2 0x459 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x46B SWAP2 SWAP1 PUSH2 0xE4F JUMP JUMPDEST PUSH2 0x479 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xE01 JUMP JUMPDEST DUP4 DUP2 DUP2 LT PUSH2 0x483 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x498 SWAP2 SWAP1 PUSH2 0xAD8 JUMP JUMPDEST PUSH2 0x5DB JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x415 JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1FB JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST DUP2 EXTCODESIZE DUP2 DUP2 PUSH2 0x4B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBA SWAP2 SWAP1 PUSH2 0xC60 JUMP JUMPDEST PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131C SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x505 PUSH2 0x4D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 DUP6 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP4 SSTORE SWAP2 DUP6 MSTORE DUP4 DUP6 KECCAK256 PUSH1 0x8 DUP3 DIV ADD DUP1 SLOAD PUSH1 0xE0 DUP11 SWAP1 SHR PUSH1 0x4 PUSH1 0x7 DUP6 AND MUL PUSH2 0x100 EXP SWAP1 DUP2 MUL PUSH4 0xFFFFFFFF SWAP1 SWAP2 MUL NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP8 AND DUP5 MSTORE SWAP1 SWAP7 ADD SWAP1 MSTORE SWAP4 SWAP1 SWAP4 KECCAK256 DUP1 SLOAD PUSH2 0xFFFF SWAP1 SWAP4 AND PUSH21 0x10000000000000000000000000000000000000000 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 SWAP5 AND SWAP1 SWAP5 OR SWAP3 SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5E5 PUSH2 0x4D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x619 JUMPI POP POP PUSH2 0x972 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE PUSH1 0x2 DUP7 ADD SWAP1 SWAP3 MSTORE DUP3 KECCAK256 DUP1 SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP3 DIV PUSH2 0xFFFF AND SWAP3 PUSH1 0x0 NOT DUP4 ADD SWAP3 SWAP1 SWAP2 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x680 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD PUSH1 0x4 MUL SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xE0 SHL SWAP1 POP DUP6 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x7A6 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 SWAP2 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 0x713 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x8 DUP4 DIV ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x7 SWAP1 SWAP5 AND PUSH1 0x4 MUL PUSH2 0x100 EXP SWAP4 DUP5 MUL NOT AND PUSH1 0xE0 SWAP6 SWAP1 SWAP6 SHR SWAP3 SWAP1 SWAP3 MUL SWAP4 SWAP1 SWAP4 OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND DUP2 MSTORE PUSH1 0x1 DUP8 ADD SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH21 0x10000000000000000000000000000000000000000 PUSH2 0xFFFF DUP7 AND MUL OR SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP1 PUSH2 0x7C9 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 PUSH1 0x8 PUSH1 0x0 NOT SWAP1 SWAP5 ADD SWAP4 DUP5 DIV ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x4 PUSH1 0x7 DUP8 AND MUL PUSH2 0x100 EXP MUL NOT AND SWAP1 SSTORE SWAP2 SWAP1 SWAP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP9 AND DUP3 MSTORE PUSH1 0x1 DUP8 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000000000000000 AND SWAP1 SSTORE DUP2 PUSH2 0x96C JUMPI PUSH1 0x3 DUP6 ADD DUP1 SLOAD PUSH1 0x0 NOT DUP2 ADD SWAP2 PUSH1 0x0 SWAP2 DUP4 SWAP1 DUP2 LT PUSH2 0x855 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND DUP1 DUP6 MSTORE PUSH1 0x2 DUP13 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 SWAP4 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP3 AND SWAP3 POP PUSH2 0xFFFF SWAP1 SWAP2 AND SWAP1 DUP3 EQ PUSH2 0x8FA JUMPI DUP2 DUP9 PUSH1 0x3 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x8A2 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP2 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND OR SWAP1 SSTORE SWAP2 DUP5 AND DUP2 MSTORE PUSH1 0x2 DUP11 ADD SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF DUP4 AND OR SWAP1 SSTORE JUMPDEST DUP8 PUSH1 0x3 ADD DUP1 SLOAD DUP1 PUSH2 0x907 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 DUP4 ADD PUSH1 0x0 NOT SWAP1 DUP2 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SSTORE SWAP1 SWAP3 ADD SWAP1 SWAP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND DUP3 MSTORE PUSH1 0x2 DUP11 ADD SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 PUSH2 0x95B DUP3 DUP3 PUSH2 0x975 JUMP JUMPDEST POP PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND SWAP1 SSTORE POP POP POP JUMPDEST POP POP POP POP POP JUMPDEST POP JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x0 DUP3 SSTORE PUSH1 0x7 ADD PUSH1 0x8 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x972 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x9AA JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x996 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x9C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x9C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9F4 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x9FE DUP4 DUP4 PUSH2 0x9AE JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xA1C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xA33 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA46 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xA54 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH1 0x20 DUP11 DUP2 DUP3 DUP5 MUL DUP7 ADD ADD GT ISZERO PUSH2 0xA68 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 DUP5 ADD SWAP9 POP DUP2 SWAP8 POP PUSH2 0xA7C DUP12 DUP3 DUP13 ADD PUSH2 0x9AE JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP11 ADD CALLDATALOAD SWAP4 POP DUP3 DUP5 GT ISZERO PUSH2 0xA91 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP4 DUP11 ADD SWAP4 POP DUP11 PUSH1 0x1F DUP6 ADD SLT PUSH2 0xAA4 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP2 POP DUP3 DUP3 GT ISZERO PUSH2 0xAB4 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP11 DUP2 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0xAC4 JUMPI DUP5 DUP6 REVERT JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP POP SWAP1 SWAP5 ADD SWAP4 POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAE9 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x9FE DUP4 DUP4 PUSH2 0x9CB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP3 DUP3 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0xB3E JUMPI DUP3 DUP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH2 0xB2D DUP3 DUP6 PUSH2 0x9CB JUMP JUMPDEST AND DUP9 MSTORE SWAP7 DUP4 ADD SWAP7 SWAP2 POP PUSH1 0x1 ADD PUSH2 0xB0F JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MSTORE DUP3 DUP3 PUSH1 0x20 DUP7 ADD CALLDATACOPY DUP1 PUSH1 0x20 DUP5 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP6 ADD AND DUP6 ADD ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 PUSH1 0x20 PUSH1 0x80 DUP1 DUP5 ADD SWAP1 DUP3 DUP10 MUL DUP6 ADD ADD DUP10 DUP5 JUMPDEST DUP11 DUP2 LT ISZERO PUSH2 0xC31 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80 DUP8 DUP5 SUB ADD DUP5 MSTORE DUP2 CALLDATALOAD PUSH1 0x3E NOT DUP14 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xBE2 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP13 ADD PUSH1 0x40 DUP7 DUP3 ADD PUSH2 0xBFC DUP7 PUSH2 0xBF7 DUP4 DUP7 PUSH2 0x9AE JUMP JUMPDEST PUSH2 0xAF3 JUMP JUMPDEST PUSH2 0xC06 DUP2 DUP5 PUSH2 0xE6E JUMP JUMPDEST SWAP4 POP SWAP1 POP DUP2 DUP9 DUP8 ADD MSTORE PUSH2 0xC1C DUP3 DUP8 ADD DUP5 DUP4 PUSH2 0xB00 JUMP JUMPDEST SWAP7 DUP9 ADD SWAP7 SWAP6 POP POP POP SWAP2 DUP6 ADD SWAP2 POP PUSH1 0x1 ADD PUSH2 0xBA0 JUMP JUMPDEST POP POP PUSH2 0xC3F DUP4 DUP7 ADD DUP10 PUSH2 0xAF3 JUMP JUMPDEST DUP5 DUP2 SUB PUSH1 0x40 DUP7 ADD MSTORE PUSH2 0xC52 DUP2 DUP8 DUP10 PUSH2 0xB49 JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xC8C JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0xC70 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xC9D JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D757374206F776E2074686520636F6E74726163742E00000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3E SWAP1 DUP3 ADD MSTORE PUSH32 0x4469616D6F6E6443757446616365743A205F696E697420697320616464726573 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x73283029206275745F63616C6C64617461206973206E6F7420656D7074790000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3F SWAP1 DUP3 ADD MSTORE PUSH32 0x4469616D6F6E6443757446616365743A205F63616C6C6461746120697320656D PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x70747920627574205F696E6974206973206E6F74206164647265737328302900 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x4469616D6F6E6443757446616365743A205F696E69742066756E6374696F6E20 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x7265766572746564000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xE17 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xE31 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 SWAP1 DUP2 ADD SWAP3 POP DUP2 MUL CALLDATASIZE SUB DUP3 SGT ISZERO PUSH2 0xE48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 CALLDATALOAD PUSH1 0x3E NOT DUP4 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xE64 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xE84 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x20 DUP2 ADD SWAP3 POP CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xEA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP2 MUL CALLDATASIZE SUB DUP4 SGT ISZERO PUSH2 0xE48 JUMPI PUSH1 0x0 DUP1 REVERT INVALID DIFFICULTY PUSH10 0x616D6F6E644375744661 PUSH4 0x65743A20 0x5F PUSH10 0x6E697420616464726573 PUSH20 0x20686173206E6F20636F64654469616D6F6E6443 PUSH22 0x7446616365743A204E65772066616365742068617320 PUSH15 0x6F20636F6465A26469706673582212 KECCAK256 0xD5 0x49 SWAP3 JUMPDEST 0xE7 CALL PUSH3 0xAD8BEE 0xE 0x5F 0xAA CALLCODE 0xF9 0xA9 0xE5 0x48 0xED PUSH6 0x80D804FBD4D 0xCD 0xB3 0xAA PUSH24 0x977264736F6C634300070100336080604052348015610010 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x71F DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x67 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7A0ED627 GT PUSH2 0x50 JUMPI DUP1 PUSH4 0x7A0ED627 EQ PUSH2 0xAA JUMPI DUP1 PUSH4 0xADFCA15E EQ PUSH2 0xBF JUMPI DUP1 PUSH4 0xCDFFACC6 EQ PUSH2 0xDF JUMPI PUSH2 0x67 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x6C JUMPI DUP1 PUSH4 0x52EF6B2C EQ PUSH2 0x95 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7F PUSH2 0x7A CALLDATASIZE PUSH1 0x4 PUSH2 0x50F JUMP JUMPDEST PUSH2 0xFF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0x6DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x9D PUSH2 0x14A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0x5CC JUMP JUMPDEST PUSH2 0xB2 PUSH2 0x1C3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0x639 JUMP JUMPDEST PUSH2 0xD2 PUSH2 0xCD CALLDATASIZE PUSH1 0x4 PUSH2 0x4D4 JUMP JUMPDEST PUSH2 0x370 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0x626 JUMP JUMPDEST PUSH2 0xF2 PUSH2 0xED CALLDATASIZE PUSH1 0x4 PUSH2 0x50F JUMP JUMPDEST PUSH2 0x43C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0x5AB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x10A PUSH2 0x498 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 SWAP1 SWAP2 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x156 PUSH2 0x498 JUMP JUMPDEST PUSH1 0x3 DUP2 ADD DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE SWAP4 SWAP5 POP DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x1B8 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x18D JUMPI JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x1CF PUSH2 0x498 JUMP JUMPDEST PUSH1 0x3 DUP2 ADD SLOAD SWAP1 SWAP2 POP DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x1EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x228 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x215 PUSH2 0x4BC JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x20D JUMPI SWAP1 POP JUMPDEST POP SWAP3 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x36A JUMPI PUSH1 0x0 DUP4 PUSH1 0x3 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x247 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP1 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x281 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND SWAP1 MSTORE SWAP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP7 ADD DUP3 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x342 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x4 ADD SWAP1 PUSH1 0x20 DUP3 PUSH1 0x3 ADD DIV SWAP3 DUP4 ADD SWAP3 PUSH1 0x1 SUB DUP3 MUL SWAP2 POP DUP1 DUP5 GT PUSH2 0x2EF JUMPI SWAP1 POP JUMPDEST POP POP POP POP POP DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x353 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x22E JUMP JUMPDEST POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x37C PUSH2 0x498 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD DUP4 MLOAD DUP2 DUP5 MUL DUP2 ADD DUP5 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE SWAP4 SWAP5 POP SWAP2 SWAP3 SWAP1 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x42F JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x4 ADD SWAP1 PUSH1 0x20 DUP3 PUSH1 0x3 ADD DIV SWAP3 DUP4 ADD SWAP3 PUSH1 0x1 SUB DUP3 MUL SWAP2 POP DUP1 DUP5 GT PUSH2 0x3DC JUMPI SWAP1 POP JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x447 PUSH2 0x498 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP4 ADD PUSH1 0x20 MSTORE POP POP PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131C SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4E5 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x508 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x520 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x508 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x5A0 JUMPI DUP2 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x562 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x61A JUMPI DUP4 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x5E8 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x508 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x54F JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP1 DUP5 MUL DUP7 ADD DUP4 ADD DUP8 DUP6 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x6D0 JUMPI DUP9 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0 ADD DUP6 MSTORE DUP2 MLOAD DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 MSTORE DUP8 ADD MLOAD DUP8 DUP5 ADD DUP8 SWAP1 MSTORE PUSH2 0x6BD DUP8 DUP6 ADD DUP3 PUSH2 0x54F JUMP JUMPDEST SWAP6 DUP9 ADD SWAP6 SWAP4 POP POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x65D JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE6 0xBC MSTORE 0xEF RETURN PUSH8 0xBFFA184F21FFF4B2 0xB1 0xE6 PUSH28 0x39A7F4EF10559888221813C6C7B50164736F6C634300070100336080 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25D DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x59 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x6E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x50 SWAP2 SWAP1 PUSH2 0x1CF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x6C PUSH2 0x67 CALLDATASIZE PUSH1 0x4 PUSH2 0x194 JUMP JUMPDEST PUSH2 0x96 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x79 PUSH2 0x170 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA0 PUSH2 0x170 JUMP JUMPDEST DUP1 SLOAD SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER DUP2 EQ PUSH2 0xFD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x1F0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND SWAP2 DUP3 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131C SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A5 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1C8 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D757374206F776E2074686520636F6E74726163742E00000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE4 0xEF SAR SWAP6 0xEB RETURN CALLDATALOAD 0xBA MSTORE CALLVALUE 0xAF PUSH27 0xA0A862982465BBDD5E9A39F9552B962AB297B95C64736F6C634300 SMOD ADD STOP CALLER 0x4C PUSH10 0x624469616D6F6E644375 PUSH21 0x3A204E657720666163657420686173206E6F20636F PUSH5 0x65A2646970 PUSH7 0x73582212206654 SWAP13 PUSH12 0x30B1C727BB6E120BC90407B2 RETURN SWAP3 DUP10 GASPRICE 0xC0 SELFBALANCE 0xEC 0x23 MOD 0xDA PUSH19 0xD62658073364736F6C63430007010033000000 ",
              "sourceMap": "155:819:0:-:0;;;;;;;;;;;;;;;;;;;;;226:746;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;405:15;436:74;;432:317;;560:4;566:5;543:29;;;;;;;;;:::i;:::-;;;;;;;;;;;;;533:40;;;;;;526:47;;616:9;633:4;597:56;647:4;597:56;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;597:56:0;;;;;;;;;;;;;;;587:66;;432:317;;;713:9;732:4;694:44;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;684:54;;432:317;763:23;778:7;763:23;;;;;;:::i;:::-;;;;;;;;797:40;;;;838:11;;851:15;:47;;896:1;851:47;;;877:7;851:47;900:4;;797:108;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;915:50:0;;;;;:43;;;;-1:-1:-1;915:43:0;;-1:-1:-1;915:50:0;;959:5;;915:50;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;226:746;;;;;;;;:::o;-1:-1:-1:-;;;;;;;;:::o;5:130::-;72:20;;10733:42;10722:54;;12162:35;;12152:2;;12211:1;;12201:12;12152:2;57:78;;;;:::o;847:336::-;;;961:3;954:4;946:6;942:17;938:27;928:2;;-1:-1;;969:12;928:2;-1:-1;999:20;;1039:18;1028:30;;1025:2;;;-1:-1;;1061:12;1025:2;1105:4;1097:6;1093:17;1081:29;;1156:3;1105:4;1136:17;1097:6;1122:32;;1119:41;1116:2;;;1173:1;;1163:12;1116:2;921:262;;;;;:::o;1191:945::-;;;;;;;1424:3;1412:9;1403:7;1399:23;1395:33;1392:2;;;-1:-1;;1431:12;1392:2;1493:53;1538:7;1514:22;1493:53;:::i;:::-;1483:63;;1611:2;1600:9;1596:18;1583:32;1635:18;;1627:6;1624:30;1621:2;;;-1:-1;;1657:12;1621:2;1782:6;1771:9;1767:22;;;331:3;324:4;316:6;312:17;308:27;298:2;;-1:-1;;339:12;298:2;382:6;369:20;1635:18;401:6;398:30;395:2;;;-1:-1;;431:12;395:2;526:3;1611:2;;510:6;506:17;467:6;492:32;;489:41;486:2;;;-1:-1;;533:12;486:2;1611;467:6;463:17;1677:122;;;;;;1864:2;1853:9;1849:18;1836:32;1822:46;;1635:18;1880:6;1877:30;1874:2;;;-1:-1;;1910:12;1874:2;;1948:64;2004:7;1995:6;1984:9;1980:22;1948:64;:::i;:::-;1386:750;;;;-1:-1;1386:750;;;;;2049:2;2088:22;;;628:20;;1386:750;-1:-1;;;;1386:750::o;2575:142::-;10733:42;10722:54;2654:58;;2648:69::o;3142:637::-;;8808:6;8803:3;8796:19;8845:4;;8840:3;8836:14;3277:82;;3443:21;-1:-1;3470:287;3495:6;3492:1;3489:13;3470:287;;;777:6;764:20;10581:66;12436:5;10570:78;;12412:5;12409:34;12399:2;;-1:-1;;12447:12;12399:2;5087:36;;-1:-1;2293:14;;;;9996:12;;;;3517:1;3510:9;3470:287;;;-1:-1;3763:10;;3264:515;-1:-1;;;;;3264:515::o;5158:297::-;;8808:6;8803:3;8796:19;11545:6;11540:3;8845:4;8840:3;8836:14;11522:30;-1:-1;8845:4;11592:6;8840:3;11583:16;;11576:27;8845:4;11980:7;11984:2;5441:6;11964:14;11960:28;8840:3;5410:39;;5403:46;;5258:197;;;;;:::o;6424:392::-;4958:58;;;12075:2;12071:14;;;6677:2;6668:12;;3043:58;6779:12;;;6568:248::o;6823:222::-;10733:42;10722:54;;;;2785:37;;6950:2;6935:18;;6921:124::o;7052:824::-;7377:2;7391:47;;;7362:18;;8796:19;;;7052:824;8845:4;8836:14;;;;;4213:17;;;4204:27;;;4340:21;7052:824;4367:455;4392:6;4389:1;4386:13;4367:455;;;4444:20;7366:9;4448:4;4444:20;;4439:3;4432:33;10153:3;10140:17;10197:48;10221:8;10205:14;10201:29;10197:48;10177:18;10173:73;10163:2;;-1:-1;;10250:12;10163:2;10279:33;;5838:4;9345:12;;;5968:63;6016:14;9319:39;9345:12;10279:33;9319:39;:::i;:::-;5968:63;:::i;:::-;6120:76;6179:16;6172:5;6120:76;:::i;:::-;6086:110;;;;5838:4;8845;6220:3;6216:14;6209:38;6262:117;5838:4;5833:3;5829:14;6360:12;6346;6262:117;:::i;:::-;4801:14;;;;4566:118;-1:-1;;;8521:14;;;;-1:-1;4414:1;4407:9;4367:455;;;4371:14;;7627:80;8845:4;7692:9;7688:18;7679:6;7627:80;:::i;:::-;7755:9;7749:4;7745:20;5838:4;7729:9;7725:18;7718:48;7780:86;7861:4;7852:6;7844;7780:86;:::i;:::-;7772:94;7348:528;-1:-1;;;;;;;;;;7348:528::o;9373:516::-;;;9512:3;9499:17;9556:48;9580:8;9564:14;9560:29;9556:48;9536:18;9532:73;9522:2;;-1:-1;;9609:12;9522:2;9638:33;;9595:4;9727:16;;;-1:-1;9693:19;;-1:-1;9763:18;9752:30;;9749:2;;;9795:1;;9785:12;9749:2;9595:4;9846:6;9842:17;9564:14;9822:38;9812:8;9808:53;9805:2;;;9874:1;;9864:12"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "2904600",
                "executionCost": "3177",
                "totalCost": "2907777"
              },
              "external": {
                "createDiamond(address,(address,bytes4[])[],bytes,bytes32)": "infinite"
              }
            },
            "methodIdentifiers": {
              "createDiamond(address,(address,bytes4[])[],bytes,bytes32)": "5c948ae3"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract Diamond\",\"name\":\"diamond\",\"type\":\"address\"}],\"name\":\"DiamondCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.Facet[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"createDiamond\",\"outputs\":[{\"internalType\":\"contract Diamond\",\"name\":\"diamond\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solc_0.7/diamond/Diamantaire.sol\":\"Diamantaire\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"solc_0.7/diamond/Diamantaire.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/IDiamondCut.sol\\\";\\nimport \\\"./Diamond.sol\\\";\\n\\ncontract Diamantaire {\\n    event DiamondCreated(Diamond diamond);\\n\\n    function createDiamond(\\n        address owner,\\n        IDiamondCut.Facet[] calldata _diamondCut,\\n        bytes calldata data,\\n        bytes32 salt\\n    ) external payable returns (Diamond diamond) {\\n        if (salt != 0x0000000000000000000000000000000000000000000000000000000000000000) {\\n            salt = keccak256(abi.encodePacked(salt, owner));\\n            diamond = new Diamond{value: msg.value, salt: salt}(address(this));\\n        } else {\\n            diamond = new Diamond{value: msg.value}(address(this));\\n        }\\n        emit DiamondCreated(diamond);\\n\\n        IDiamondCut(address(diamond)).diamondCut(_diamondCut, data.length > 0 ? address(diamond) : address(0), data);\\n        IERC173(address(diamond)).transferOwnership(owner);\\n    }\\n}\\n\",\"keccak256\":\"0xfe7e212a078bb6658bd9824a32d10a652a9494f4e3b776f1b4dbaf16dd55f046\",\"license\":\"MIT\"},\"solc_0.7/diamond/Diamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge\\n*\\n* Implementation of an example of a diamond.\\n/******************************************************************************/\\n\\nimport \\\"./libraries/LibDiamondStorage.sol\\\";\\nimport \\\"./libraries/LibDiamondCut.sol\\\";\\nimport \\\"./facets/OwnershipFacet.sol\\\";\\nimport \\\"./facets/DiamondCutFacet.sol\\\";\\nimport \\\"./facets/DiamondLoupeFacet.sol\\\";\\n\\ncontract Diamond {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor(address owner) payable {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        ds.contractOwner = owner;\\n        emit OwnershipTransferred(address(0), owner);\\n\\n        DiamondCutFacet diamondCutFacet = new DiamondCutFacet();\\n\\n        DiamondLoupeFacet diamondLoupeFacet = new DiamondLoupeFacet();\\n\\n        // Create a OwnershipFacet contract which implements the ERC-173 Ownership interface\\n        OwnershipFacet ownershipFacet = new OwnershipFacet();\\n\\n        IDiamondCut.Facet[] memory diamondCut = new IDiamondCut.Facet[](3);\\n\\n        // adding diamondCut function\\n        diamondCut[0].facetAddress = address(diamondCutFacet);\\n        diamondCut[0].functionSelectors = new bytes4[](1);\\n        diamondCut[0].functionSelectors[0] = DiamondCutFacet.diamondCut.selector;\\n\\n        // adding diamond loupe functions\\n        diamondCut[1].facetAddress = address(diamondLoupeFacet);\\n        diamondCut[1].functionSelectors = new bytes4[](5);\\n        diamondCut[1].functionSelectors[0] = DiamondLoupeFacet.facetFunctionSelectors.selector;\\n        diamondCut[1].functionSelectors[1] = DiamondLoupeFacet.facets.selector;\\n        diamondCut[1].functionSelectors[2] = DiamondLoupeFacet.facetAddress.selector;\\n        diamondCut[1].functionSelectors[3] = DiamondLoupeFacet.facetAddresses.selector;\\n        diamondCut[1].functionSelectors[4] = DiamondLoupeFacet.supportsInterface.selector;\\n\\n        // adding ownership functions\\n        diamondCut[2].facetAddress = address(ownershipFacet);\\n        diamondCut[2].functionSelectors = new bytes4[](2);\\n        diamondCut[2].functionSelectors[0] = OwnershipFacet.transferOwnership.selector;\\n        diamondCut[2].functionSelectors[1] = OwnershipFacet.owner.selector;\\n\\n        // execute non-standard internal diamondCut function to add functions\\n        LibDiamondCut.diamondCut(diamondCut);\\n\\n        // adding ERC165 data\\n        // ERC165\\n        ds.supportedInterfaces[IERC165.supportsInterface.selector] = true;\\n\\n        // DiamondCut\\n        ds.supportedInterfaces[DiamondCutFacet.diamondCut.selector] = true;\\n\\n        // DiamondLoupe\\n        bytes4 interfaceID = IDiamondLoupe.facets.selector ^\\n            IDiamondLoupe.facetFunctionSelectors.selector ^\\n            IDiamondLoupe.facetAddresses.selector ^\\n            IDiamondLoupe.facetAddress.selector;\\n        ds.supportedInterfaces[interfaceID] = true;\\n\\n        // ERC173\\n        ds.supportedInterfaces[IERC173.transferOwnership.selector ^ IERC173.owner.selector] = true;\\n    }\\n\\n    // Find facet for function that is called and execute the\\n    // function if a facet is found and return any value.\\n    fallback() external payable {\\n        LibDiamondStorage.DiamondStorage storage ds;\\n        bytes32 position = LibDiamondStorage.DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n        address facet = ds.selectorToFacetAndPosition[msg.sig].facetAddress;\\n        require(facet != address(0), \\\"Diamond: Function does not exist\\\");\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\\n            returndatacopy(0, 0, returndatasize())\\n            switch result\\n                case 0 {\\n                    revert(0, returndatasize())\\n                }\\n                default {\\n                    return(0, returndatasize())\\n                }\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x5d2e73e1c35ca41c6164e04a56398470a65f7c259613dc85b786a4bece4f781d\",\"license\":\"MIT\"},\"solc_0.7/diamond/facets/DiamondCutFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n*\\n* Implementation of diamondCut external function.\\n/******************************************************************************/\\n\\nimport \\\"../libraries/LibDiamondStorage.sol\\\";\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\nimport \\\"../libraries/LibDiamondCut.sol\\\";\\n\\ncontract DiamondCutFacet is IDiamondCut {\\n    // Standard diamondCut external function\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        Facet[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external override {\\n        externalCut(_diamondCut);\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"DiamondCutFacet: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"DiamondCutFacet: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                LibDiamondCut.hasContractCode(_init, \\\"DiamondCutFacet: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"DiamondCutFacet: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    // diamondCut helper function\\n    // This code is almost the same as the internal diamondCut function,\\n    // except it is using 'Facets[] calldata _diamondCut' instead of\\n    // 'Facet[] memory _diamondCut', and it does not issue the DiamondCut event.\\n    // The code is duplicated to prevent copying calldata to memory which\\n    // causes a Solidity error for two dimensional arrays.\\n    function externalCut(Facet[] calldata _diamondCut) internal {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        require(msg.sender == ds.contractOwner, \\\"Must own the contract.\\\");\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            address newFacetAddress = _diamondCut[facetIndex].facetAddress;\\n            // add or replace function\\n            if (newFacetAddress != address(0)) {\\n                uint256 facetAddressPosition = ds.facetFunctionSelectors[newFacetAddress].facetAddressPosition;\\n                // add new facet address if it does not exist\\n                if (facetAddressPosition == 0 && ds.facetFunctionSelectors[newFacetAddress].functionSelectors.length == 0) {\\n                    LibDiamondCut.hasContractCode(newFacetAddress, \\\"DiamondCutFacet: New facet has no code\\\");\\n                    facetAddressPosition = ds.facetAddresses.length;\\n                    ds.facetAddresses.push(newFacetAddress);\\n                    ds.facetFunctionSelectors[newFacetAddress].facetAddressPosition = uint16(facetAddressPosition);\\n                }\\n                // add or replace selectors\\n                for (uint256 selectorIndex; selectorIndex < _diamondCut[facetIndex].functionSelectors.length; selectorIndex++) {\\n                    bytes4 selector = _diamondCut[facetIndex].functionSelectors[selectorIndex];\\n                    address oldFacet = ds.selectorToFacetAndPosition[selector].facetAddress;\\n                    // add\\n                    if (oldFacet == address(0)) {\\n                        LibDiamondCut.addSelector(newFacetAddress, selector);\\n                    } else {\\n                        // replace\\n                        if (oldFacet != newFacetAddress) {\\n                            LibDiamondCut.removeSelector(selector);\\n                            LibDiamondCut.addSelector(newFacetAddress, selector);\\n                        }\\n                    }\\n                }\\n            } else {\\n                // remove selectors\\n                for (uint256 selectorIndex; selectorIndex < _diamondCut[facetIndex].functionSelectors.length; selectorIndex++) {\\n                    LibDiamondCut.removeSelector(_diamondCut[facetIndex].functionSelectors[selectorIndex]);\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe5cefda560bdf00d7e412ef747e28f2076d07b32221ccdfaa607aaab0ca30029\",\"license\":\"MIT\"},\"solc_0.7/diamond/facets/DiamondLoupeFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n*\\n* Implementation of DiamondLoupe interface.\\n/******************************************************************************/\\n\\nimport \\\"../libraries/LibDiamondStorage.sol\\\";\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\nimport \\\"../interfaces/IDiamondLoupe.sol\\\";\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\ncontract DiamondLoupeFacet is IDiamondLoupe, IERC165 {\\n    // Diamond Loupe Functions\\n    ////////////////////////////////////////////////////////////////////\\n    /// These functions are expected to be called frequently\\n    /// by tools. Therefore the return values are tightly\\n    /// packed for efficiency. That means no padding with zeros.\\n\\n    // struct Facet {\\n    //     address facetAddress;\\n    //     bytes4[] functionSelectors;\\n    // }\\n\\n    /// @notice Gets all facets and their selectors.\\n    /// @return facets_ Facet\\n    function facets() external override view returns (Facet[] memory facets_) {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        uint256 numFacets = ds.facetAddresses.length;\\n        facets_ = new Facet[](numFacets);\\n        for (uint256 i; i < numFacets; i++) {\\n            address facetAddress = ds.facetAddresses[i];\\n            facets_[i].facetAddress = facetAddress;\\n            facets_[i].functionSelectors = ds.facetFunctionSelectors[facetAddress].functionSelectors;\\n        }\\n    }\\n\\n    /// @notice Gets all the function selectors provided by a facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet) external override view returns (bytes4[] memory facetFunctionSelectors_) {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        facetFunctionSelectors_ = ds.facetFunctionSelectors[_facet].functionSelectors;\\n    }\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external override view returns (address[] memory facetAddresses_) {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        facetAddresses_ = ds.facetAddresses;\\n    }\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external override view returns (address facetAddress_) {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        facetAddress_ = ds.selectorToFacetAndPosition[_functionSelector].facetAddress;\\n    }\\n\\n    // This implements ERC-165.\\n    function supportsInterface(bytes4 _interfaceId) external override view returns (bool) {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        return ds.supportedInterfaces[_interfaceId];\\n    }\\n}\\n\",\"keccak256\":\"0x4b7366bd3fe648aaa728031852007fa2fb83da852a99fb9914ca00ace29453a0\",\"license\":\"MIT\"},\"solc_0.7/diamond/facets/OwnershipFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n/******************************************************************************/\\n\\nimport \\\"../libraries/LibDiamondStorage.sol\\\";\\nimport \\\"../interfaces/IERC173.sol\\\";\\n\\ncontract OwnershipFacet is IERC173 {\\n    function transferOwnership(address newOwner) external override {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        address currentOwner = ds.contractOwner;\\n        require(msg.sender == currentOwner, \\\"Must own the contract.\\\");\\n        ds.contractOwner = newOwner;\\n        emit OwnershipTransferred(currentOwner, newOwner);\\n    }\\n\\n    function owner() external override view returns (address) {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        return ds.contractOwner;\\n    }\\n}\\n\",\"keccak256\":\"0xe09014d34261a3f4275e5a8e0f7081fe576bc0e4cb15a4760df156a9b423e579\",\"license\":\"MIT\"},\"solc_0.7/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        Facet[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(Facet[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xba9cbedda8b486e17512639ee5ca6a4de1638b55c26b130e61cbbaa632acdef5\",\"license\":\"MIT\"},\"solc_0.7/diamond/interfaces/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n/******************************************************************************/\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\n}\\n\",\"keccak256\":\"0xde77c3530df288849ad2cc13a6a1a00b0216c019875b153a929b3e770667f07d\",\"license\":\"MIT\"},\"solc_0.7/diamond/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc19b99fbeaeb943b6d12e6d631b6ae1738aaa498ee49f67caaccc6238fd0d458\",\"license\":\"MIT\"},\"solc_0.7/diamond/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n/* is ERC165 */\\ninterface IERC173 {\\n    /// @dev This emits when ownership of a contract changes.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Get the address of the owner\\n    /// @return The address of the owner.\\n    function owner() external view returns (address);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0xdb5c5f069a9337daa33b88c6c9fe72edb31b9ff91bf4a923caf02cb9e95d4b12\",\"license\":\"MIT\"},\"solc_0.7/diamond/libraries/LibDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n*\\n* Implementation of internal diamondCut function.\\n/******************************************************************************/\\n\\nimport \\\"./LibDiamondStorage.sol\\\";\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamondCut {\\n    event DiamondCut(IDiamondCut.Facet[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Non-standard internal function version of diamondCut\\n    // This code is almost the same as externalCut, except it is using\\n    // 'Facet[] memory _diamondCut' instead of 'Facet[] calldata _diamondCut'\\n    // and it DOES issue the DiamondCut event\\n    // The code is duplicated to prevent copying calldata to memory which\\n    // causes a Solidity error for a two dimensional array.\\n    function diamondCut(IDiamondCut.Facet[] memory _diamondCut) internal {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            address newFacetAddress = _diamondCut[facetIndex].facetAddress;\\n            // add or replace function\\n            if (newFacetAddress != address(0)) {\\n                uint256 facetAddressPosition = ds.facetFunctionSelectors[newFacetAddress].facetAddressPosition;\\n                // add new facet address if it does not exist\\n                if (facetAddressPosition == 0 && ds.facetFunctionSelectors[newFacetAddress].functionSelectors.length == 0) {\\n                    hasContractCode(newFacetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n                    facetAddressPosition = ds.facetAddresses.length;\\n                    ds.facetAddresses.push(newFacetAddress);\\n                    ds.facetFunctionSelectors[newFacetAddress].facetAddressPosition = uint16(facetAddressPosition);\\n                }\\n                // add or replace selectors\\n                for (uint256 selectorIndex; selectorIndex < _diamondCut[facetIndex].functionSelectors.length; selectorIndex++) {\\n                    bytes4 selector = _diamondCut[facetIndex].functionSelectors[selectorIndex];\\n                    address oldFacet = ds.selectorToFacetAndPosition[selector].facetAddress;\\n                    // add\\n                    if (oldFacet == address(0)) {\\n                        addSelector(newFacetAddress, selector);\\n                    } else {\\n                        // replace\\n                        if (oldFacet != newFacetAddress) {\\n                            removeSelector(selector);\\n                            addSelector(newFacetAddress, selector);\\n                        }\\n                    }\\n                }\\n            } else {\\n                // remove selectors\\n                for (uint256 selectorIndex; selectorIndex < _diamondCut[facetIndex].functionSelectors.length; selectorIndex++) {\\n                    removeSelector(_diamondCut[facetIndex].functionSelectors[selectorIndex]);\\n                }\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, address(0), new bytes(0));\\n    }\\n\\n    function addSelector(address _newFacet, bytes4 _selector) internal {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        uint256 selectorPosition = ds.facetFunctionSelectors[_newFacet].functionSelectors.length;\\n        ds.facetFunctionSelectors[_newFacet].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _newFacet;\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = uint16(selectorPosition);\\n    }\\n\\n    function removeSelector(bytes4 _selector) internal {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        address oldFacet = ds.selectorToFacetAndPosition[_selector].facetAddress;\\n        // if function does not exist then do nothing and return\\n        if (oldFacet == address(0)) {\\n            return;\\n        }\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[oldFacet].functionSelectors.length - 1;\\n        bytes4 lastSelector = ds.facetFunctionSelectors[oldFacet].functionSelectors[lastSelectorPosition];\\n        // if not the same then replace _selector with lastSelector\\n        if (lastSelector != _selector) {\\n            ds.facetFunctionSelectors[oldFacet].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint16(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[oldFacet].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[oldFacet].facetAddressPosition;\\n            if (oldFacet != lastFacetAddress) {\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = uint16(facetAddressPosition);\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[oldFacet];\\n        }\\n    }\\n\\n    function hasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2b0552b7626a43189f62e6b8e7ac6e257a0d6ebe6f03a44d2da12c931a96155b\",\"license\":\"MIT\"},\"solc_0.7/diamond/libraries/LibDiamondStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n/******************************************************************************/\\n\\nlibrary LibDiamondStorage {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // owner of the contract\\n        address contractOwner;\\n        // maps function selector to the facet address and        \\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe775d2cb83a52f9bc6341b6331acd86527a7870dca3193cfcad3db6206017ed2\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "solc_0.7/diamond/Diamond.sol": {
        "Diamond": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "stateMutability": "payable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "stateMutability": "payable",
              "type": "fallback"
            },
            {
              "stateMutability": "payable",
              "type": "receive"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "60806040526040516200325238038062003252833981016040819052620000269162000cd2565b60006200003d6200056d60201b620000d51760201c565b80546001600160a01b0319166001600160a01b0384169081178255604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36000604051620000979062000c54565b604051809103906000f080158015620000b4573d6000803e3d6000fd5b5090506000604051620000c79062000c62565b604051809103906000f080158015620000e4573d6000803e3d6000fd5b5090506000604051620000f79062000c70565b604051809103906000f08015801562000114573d6000803e3d6000fd5b506040805160038082526080820190925291925060609190816020015b6200013b62000c7e565b8152602001906001900390816200013157905050905083816000815181106200016057fe5b60209081029190910101516001600160a01b03919091169052604080516001808252818301909252908160200160208202803683370190505081600081518110620001a757fe5b60200260200101516020018190525063e712b4e160e01b81600081518110620001cc57fe5b602002602001015160200151600081518110620001e557fe5b60200260200101906001600160e01b03191690816001600160e01b0319168152505082816001815181106200021657fe5b6020908102919091018101516001600160a01b039290921690915260408051600580825260c0820190925291820160a08036833701905050816001815181106200025c57fe5b60200260200101516020018190525063adfca15e60e01b816001815181106200028157fe5b6020026020010151602001516000815181106200029a57fe5b6001600160e01b0319909216602092830291909101909101528051637a0ed62760e01b9082906001908110620002cc57fe5b602002602001015160200151600181518110620002e557fe5b6001600160e01b03199092166020928302919091019091015280516366ffd66360e11b90829060019081106200031757fe5b6020026020010151602001516002815181106200033057fe5b6001600160e01b03199092166020928302919091019091015280516314bbdacb60e21b90829060019081106200036257fe5b6020026020010151602001516003815181106200037b57fe5b6001600160e01b03199092166020928302919091019091015280516301ffc9a760e01b9082906001908110620003ad57fe5b602002602001015160200151600481518110620003c657fe5b60200260200101906001600160e01b03191690816001600160e01b031916815250508181600281518110620003f757fe5b60209081029190910101516001600160a01b03919091169052604080516002808252606082019092529081602001602082028036833701905050816002815181106200043f57fe5b60200260200101516020018190525063f2fde38b60e01b816002815181106200046457fe5b6020026020010151602001516000815181106200047d57fe5b6001600160e01b0319909216602092830291909101909101528051638da5cb5b60e01b9082906002908110620004af57fe5b602002602001015160200151600181518110620004c857fe5b6001600160e01b0319909216602092830291909101820152620004f6908290620000f962000591821b17901c565b50506301ffc9a760e01b6000908152600490930160205250506040808220805460ff19908116600190811790925563e712b4e160e01b845282842080548216831790556348e2b09360e01b845282842080548216831790556307f5828d60e41b845291909220805490911690911790555062000e61565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b6000620005a86200056d60201b620000d51760201c565b905060005b825181101562000802576000838281518110620005c657fe5b60209081029190910101515190506001600160a01b038116156200078b576001600160a01b038116600090815260028401602052604090206001015461ffff16801580156200062d57506001600160a01b0382166000908152600285016020526040902054155b15620006ae5762000658826040518060600160405280602481526020016200322e6024913962000850565b506003830180546001808201835560009283526020808420830180546001600160a01b0319166001600160a01b03871690811790915584526002870190526040909220909101805461ffff191661ffff83161790555b60005b858481518110620006be57fe5b6020026020010151602001515181101562000783576000868581518110620006e257fe5b6020026020010151602001518281518110620006fa57fe5b6020908102919091018101516001600160e01b031981166000908152600189019092526040909120549091506001600160a01b031680620007475762000741858362000883565b62000778565b846001600160a01b0316816001600160a01b03161462000778576200076c8262000938565b62000778858362000883565b5050600101620006b1565b5050620007f8565b60005b8483815181106200079b57fe5b60200260200101516020015151811015620007f657620007ed858481518110620007c157fe5b6020026020010151602001518281518110620007d957fe5b60200260200101516200093860201b60201c565b6001016200078e565b505b50600101620005ad565b5060408051600080825260208201928390527f39725dd03d877043d78fdfe186295e46e6277eb0a3498f2adb51071f42a2bdcb92620008449286929162000da3565b60405180910390a15050565b813b81816200087d5760405162461bcd60e51b815260040162000874919062000e4c565b60405180910390fd5b50505050565b60006200089a6200056d60201b620000d51760201c565b6001600160a01b03909316600081815260028501602090815260408083208054600180820183559185528385206008820401805460e08a901c600460078516026101000a90810263ffffffff909102199091161790556001600160e01b03199097168452909601905293909320805461ffff909316600160a01b0261ffff60a01b196001600160a01b03199094169094179290921692909217905550565b60006200094f6200056d60201b620000d51760201c565b6001600160e01b0319831660009081526001820160205260409020549091506001600160a01b0316806200098557505062000c51565b6001600160e01b0319831660009081526001830160209081526040808320546001600160a01b03851684526002860190925282208054600160a01b90920461ffff169260001983019290919083908110620009dc57fe5b90600052602060002090600891828204019190066004029054906101000a900460e01b9050856001600160e01b031916816001600160e01b0319161462000aaf576001600160a01b0384166000908152600286016020526040902080548291908590811062000a4757fe5b600091825260208083206008830401805463ffffffff60079094166004026101000a938402191660e09590951c929092029390931790556001600160e01b0319831681526001870190915260409020805461ffff60a01b1916600160a01b61ffff8616021790555b6001600160a01b0384166000908152600286016020526040902080548062000ad357fe5b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b0319881682526001870190526040902080546001600160b01b03191690558162000c4b576003850180546000198101916000918390811062000b4957fe5b60009182526020808320909101546001600160a01b0389811680855260028c019093526040909320600101549216925061ffff90911690821462000be3578188600301828154811062000b9857fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055918416815260028a0190915260409020600101805461ffff191661ffff83161790555b8760030180548062000bf157fe5b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b038916825260028a019052604081209062000c3a828262000c96565b50600101805461ffff191690555050505b50505050505b50565b610f5c806200191683390190565b61073f806200287283390190565b61027d8062002fb183390190565b60408051808201909152600081526060602082015290565b50805460008255600701600890049060005260206000209081019062000c5191905b8082111562000cce576000815560010162000cb8565b5090565b60006020828403121562000ce4578081fd5b81516001600160a01b038116811462000cfb578182fd5b9392505050565b6001600160a01b03169052565b6000815180845260208085019450808401835b8381101562000d4a5781516001600160e01b0319168752958201959082019060010162000d22565b509495945050505050565b60008151808452815b8181101562000d7c5760208185018101518683018201520162000d5e565b8181111562000d8e5782602083870101525b50601f01601f19169290920160200192915050565b60006060820160608352808651808352608085019150602092506080838202860101838901855b8381101562000e1b57607f198884030185528151604062000ded85835162000d02565b878201519150808886015262000e068186018362000d0f565b96880196945050509085019060010162000dca565b505062000e2b8487018962000d02565b858103604087015262000e3f818862000d55565b9998505050505050505050565b60006020825262000cfb602083018462000d55565b610aa58062000e716000396000f3fe60806040523661000b57005b600080356001600160e01b03191681527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d60205260409020547fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c9081906001600160a01b0316806100b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100a890610a16565b60405180910390fd5b3660008037600080366000845af43d6000803e8080156100d0573d6000f35b3d6000fd5b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b60006101036100d5565b905060005b825181101561034557600083828151811061011f57fe5b60209081029190910101515190506001600160a01b038116156102dc576001600160a01b038116600090815260028401602052604090206001015461ffff168015801561018457506001600160a01b0382166000908152600285016020526040902054155b1561020e576101ab82604051806060016040528060248152602001610a4c60249139610391565b5060038301805460018082018355600092835260208084208301805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03871690811790915584526002870190526040909220909101805461ffff191661ffff83161790555b60005b85848151811061021d57fe5b602002602001015160200151518110156102d557600086858151811061023f57fe5b602002602001015160200151828151811061025657fe5b6020908102919091018101516001600160e01b031981166000908152600189019092526040909120549091506001600160a01b03168061029f5761029a85836103d2565b6102cb565b846001600160a01b0316816001600160a01b0316146102cb576102c1826104b2565b6102cb85836103d2565b5050600101610211565b505061033c565b60005b8483815181106102eb57fe5b6020026020010151602001515181101561033a5761033285848151811061030e57fe5b602002602001015160200151828151811061032557fe5b60200260200101516104b2565b6001016102df565b505b50600101610108565b5060408051600080825260208201928390527f39725dd03d877043d78fdfe186295e46e6277eb0a3498f2adb51071f42a2bdcb926103859286929161093f565b60405180910390a15050565b813b81816103cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100a891906109fc565b50505050565b60006103dc6100d5565b6001600160a01b03909316600081815260028501602090815260408083208054600180820183559185528385206008820401805460e08a901c600460078516026101000a90810263ffffffff909102199091161790556001600160e01b03199097168452909601905293909320805461ffff90931674010000000000000000000000000000000000000000027fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff73ffffffffffffffffffffffffffffffffffffffff199094169094179290921692909217905550565b60006104bc6100d5565b6001600160e01b0319831660009081526001820160205260409020549091506001600160a01b0316806104f0575050610849565b6001600160e01b0319831660009081526001830160209081526040808320546001600160a01b038516845260028601909252822080547401000000000000000000000000000000000000000090920461ffff16926000198301929091908390811061055757fe5b90600052602060002090600891828204019190066004029054906101000a900460e01b9050857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461067d576001600160a01b038416600090815260028601602052604090208054829190859081106105ea57fe5b600091825260208083206008830401805463ffffffff60079094166004026101000a938402191660e09590951c929092029390931790556001600160e01b031983168152600187019091526040902080547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000061ffff8616021790555b6001600160a01b038416600090815260028601602052604090208054806106a057fe5b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b0319881682526001870190526040902080547fffffffffffffffffffff0000000000000000000000000000000000000000000016905581610843576003850180546000198101916000918390811061072c57fe5b60009182526020808320909101546001600160a01b0389811680855260028c019093526040909320600101549216925061ffff9091169082146107d1578188600301828154811061077957fe5b6000918252602080832091909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03948516179055918416815260028a0190915260409020600101805461ffff191661ffff83161790555b876003018054806107de57fe5b600082815260208082208301600019908101805473ffffffffffffffffffffffffffffffffffffffff191690559092019092556001600160a01b038916825260028a0190526040812090610832828261084c565b50600101805461ffff191690555050505b50505050505b50565b50805460008255600701600890049060005260206000209081019061084991905b80821115610881576000815560010161086d565b5090565b6001600160a01b03169052565b6000815180845260208085019450808401835b838110156108cb5781516001600160e01b031916875295820195908201906001016108a5565b509495945050505050565b60008151808452815b818110156108fb576020818501810151868301820152016108df565b8181111561090c5782602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60006060820160608352808651808352608085019150602092506080838202860101838901855b838110156109cf577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80888403018552815160406109a4858351610885565b87820151915080888601526109bb81860183610892565b968801969450505090850190600101610966565b50506109dd84870189610885565b85810360408701526109ef81886108d6565b9998505050505050505050565b600060208252610a0f60208301846108d6565b9392505050565b6020808252818101527f4469616d6f6e643a2046756e6374696f6e20646f6573206e6f7420657869737460408201526060019056fe4c69624469616d6f6e644375743a204e657720666163657420686173206e6f20636f6465a264697066735822122012e7ed35b4a2847b23e9d014f8b7b3c729039992cbc88821d0901892d1f6ba3d64736f6c63430007010033608060405234801561001057600080fd5b50610f3c806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063e712b4e114610030575b600080fd5b61004361003e366004610a05565b610045565b005b61004f85856101c2565b7f39725dd03d877043d78fdfe186295e46e6277eb0a3498f2adb51071f42a2bdcb8585858585604051610086959493929190610b83565b60405180910390a16001600160a01b0383166100c85780156100c35760405162461bcd60e51b81526004016100ba90610cea565b60405180910390fd5b6101bb565b806100e55760405162461bcd60e51b81526004016100ba90610d47565b6001600160a01b038316301461011757610117836040518060600160405280602a8152602001610eb7602a91396104b6565b60006060846001600160a01b03168484604051610135929190610b73565b600060405180830381855af49150503d8060008114610170576040519150601f19603f3d011682016040523d82523d6000602084013e610175565b606091505b5091509150816101b8578051156101a0578060405162461bcd60e51b81526004016100ba9190610c60565b60405162461bcd60e51b81526004016100ba90610da4565b50505b5050505050565b60006101cc6104d7565b80549091506001600160a01b031633146101f85760405162461bcd60e51b81526004016100ba90610cb3565b60005b828110156104b057600084848381811061021157fe5b90506020028101906102239190610e4f565b6102319060208101906109e3565b90506001600160a01b03811615610412576001600160a01b038116600090815260028401602052604090206001015461ffff168015801561028a57506001600160a01b0382166000908152600285016020526040902054155b15610314576102b182604051806060016040528060268152602001610ee1602691396104b6565b5060038301805460018082018355600092835260208084208301805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03871690811790915584526002870190526040909220909101805461ffff191661ffff83161790555b60005b86868581811061032357fe5b90506020028101906103359190610e4f565b610343906020810190610e01565b905081101561040b57600087878681811061035a57fe5b905060200281019061036c9190610e4f565b61037a906020810190610e01565b8381811061038457fe5b90506020020160208101906103999190610ad8565b6001600160e01b0319811660009081526001880160205260409020549091506001600160a01b0316806103d5576103d085836104fb565b610401565b846001600160a01b0316816001600160a01b031614610401576103f7826105db565b61040185836104fb565b5050600101610317565b50506104a7565b60005b85858481811061042157fe5b90506020028101906104339190610e4f565b610441906020810190610e01565b90508110156104a55761049d86868581811061045957fe5b905060200281019061046b9190610e4f565b610479906020810190610e01565b8381811061048357fe5b90506020020160208101906104989190610ad8565b6105db565b600101610415565b505b506001016101fb565b50505050565b813b81816104b05760405162461bcd60e51b81526004016100ba9190610c60565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b60006105056104d7565b6001600160a01b03909316600081815260028501602090815260408083208054600180820183559185528385206008820401805460e08a901c600460078516026101000a90810263ffffffff909102199091161790556001600160e01b03199097168452909601905293909320805461ffff90931674010000000000000000000000000000000000000000027fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff73ffffffffffffffffffffffffffffffffffffffff199094169094179290921692909217905550565b60006105e56104d7565b6001600160e01b0319831660009081526001820160205260409020549091506001600160a01b031680610619575050610972565b6001600160e01b0319831660009081526001830160209081526040808320546001600160a01b038516845260028601909252822080547401000000000000000000000000000000000000000090920461ffff16926000198301929091908390811061068057fe5b90600052602060002090600891828204019190066004029054906101000a900460e01b9050857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146107a6576001600160a01b0384166000908152600286016020526040902080548291908590811061071357fe5b600091825260208083206008830401805463ffffffff60079094166004026101000a938402191660e09590951c929092029390931790556001600160e01b031983168152600187019091526040902080547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000061ffff8616021790555b6001600160a01b038416600090815260028601602052604090208054806107c957fe5b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b0319881682526001870190526040902080547fffffffffffffffffffff000000000000000000000000000000000000000000001690558161096c576003850180546000198101916000918390811061085557fe5b60009182526020808320909101546001600160a01b0389811680855260028c019093526040909320600101549216925061ffff9091169082146108fa57818860030182815481106108a257fe5b6000918252602080832091909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03948516179055918416815260028a0190915260409020600101805461ffff191661ffff83161790555b8760030180548061090757fe5b600082815260208082208301600019908101805473ffffffffffffffffffffffffffffffffffffffff191690559092019092556001600160a01b038916825260028a019052604081209061095b8282610975565b50600101805461ffff191690555050505b50505050505b50565b50805460008255600701600890049060005260206000209081019061097291905b808211156109aa5760008155600101610996565b5090565b80356001600160a01b03811681146109c557600080fd5b92915050565b80356001600160e01b0319811681146109c557600080fd5b6000602082840312156109f4578081fd5b6109fe83836109ae565b9392505050565b600080600080600060608688031215610a1c578081fd5b853567ffffffffffffffff80821115610a33578283fd5b818801915088601f830112610a46578283fd5b813581811115610a54578384fd5b60208a818284028601011115610a68578485fd5b8084019850819750610a7c8b828c016109ae565b965060408a0135935082841115610a91578485fd5b838a0193508a601f850112610aa4578485fd5b8335915082821115610ab4578485fd5b8a81838601011115610ac4578485fd5b979a96995094975050909401935090919050565b600060208284031215610ae9578081fd5b6109fe83836109cb565b6001600160a01b03169052565b60008284526020808501945082825b85811015610b3e578282016001600160e01b0319610b2d82856109cb565b168852968301969150600101610b0f565b509495945050505050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b6000828483379101908152919050565b606080825281018590526000602060808084019082890285010189845b8a811015610c31577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808784030184528135603e198d3603018112610be2578687fd5b8c016040868201610bfc86610bf783866109ae565b610af3565b610c068184610e6e565b935090508188870152610c1c8287018483610b00565b96880196955050509185019150600101610ba0565b5050610c3f83860189610af3565b8481036040860152610c52818789610b49565b9a9950505050505050505050565b6000602080835283518082850152825b81811015610c8c57858101830151858201604001528201610c70565b81811115610c9d5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526016908201527f4d757374206f776e2074686520636f6e74726163742e00000000000000000000604082015260600190565b6020808252603e908201527f4469616d6f6e6443757446616365743a205f696e69742069732061646472657360408201527f73283029206275745f63616c6c64617461206973206e6f7420656d7074790000606082015260800190565b6020808252603f908201527f4469616d6f6e6443757446616365743a205f63616c6c6461746120697320656d60408201527f70747920627574205f696e6974206973206e6f74206164647265737328302900606082015260800190565b60208082526028908201527f4469616d6f6e6443757446616365743a205f696e69742066756e6374696f6e2060408201527f7265766572746564000000000000000000000000000000000000000000000000606082015260800190565b6000808335601e19843603018112610e17578283fd5b83018035915067ffffffffffffffff821115610e31578283fd5b6020908101925081023603821315610e4857600080fd5b9250929050565b60008235603e19833603018112610e64578182fd5b9190910192915050565b6000808335601e19843603018112610e84578283fd5b830160208101925035905067ffffffffffffffff811115610ea457600080fd5b602081023603831315610e4857600080fdfe4469616d6f6e6443757446616365743a205f696e6974206164647265737320686173206e6f20636f64654469616d6f6e6443757446616365743a204e657720666163657420686173206e6f20636f6465a2646970667358221220d549925be7f162ad8bee0e5faaf2f9a9e548ed65080d804fbd4dcdb3aa77977264736f6c63430007010033608060405234801561001057600080fd5b5061071f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80637a0ed627116100505780637a0ed627146100aa578063adfca15e146100bf578063cdffacc6146100df57610067565b806301ffc9a71461006c57806352ef6b2c14610095575b600080fd5b61007f61007a36600461050f565b6100ff565b60405161008c91906106de565b60405180910390f35b61009d61014a565b60405161008c91906105cc565b6100b26101c3565b60405161008c9190610639565b6100d26100cd3660046104d4565b610370565b60405161008c9190610626565b6100f26100ed36600461050f565b61043c565b60405161008c91906105ab565b60008061010a610498565b7fffffffff00000000000000000000000000000000000000000000000000000000841660009081526004909101602052604090205460ff16915050919050565b60606000610156610498565b600381018054604080516020808402820181019092528281529394508301828280156101b857602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161018d575b505050505091505090565b606060006101cf610498565b60038101549091508067ffffffffffffffff811180156101ee57600080fd5b5060405190808252806020026020018201604052801561022857816020015b6102156104bc565b81526020019060019003908161020d5790505b50925060005b8181101561036a57600083600301828154811061024757fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508085838151811061028157fe5b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff928316905290821660009081526002860182526040908190208054825181850281018501909352808352919290919083018282801561034257602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116102ef5790505b505050505085838151811061035357fe5b60209081029190910181015101525060010161022e565b50505090565b6060600061037c610498565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600282016020908152604091829020805483518184028101840190945280845293945091929083018282801561042f57602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116103dc5790505b5050505050915050919050565b600080610447610498565b7fffffffff00000000000000000000000000000000000000000000000000000000909316600090815260019093016020525050604090205473ffffffffffffffffffffffffffffffffffffffff1690565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b60408051808201909152600081526060602082015290565b6000602082840312156104e5578081fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610508578182fd5b9392505050565b600060208284031215610520578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610508578182fd5b6000815180845260208085019450808401835b838110156105a05781517fffffffff000000000000000000000000000000000000000000000000000000001687529582019590820190600101610562565b509495945050505050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6020808252825182820181905260009190848201906040850190845b8181101561061a57835173ffffffffffffffffffffffffffffffffffffffff16835292840192918401916001016105e8565b50909695505050505050565b600060208252610508602083018461054f565b60208082528251828201819052600091906040908185019080840286018301878501865b838110156106d0578883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00185528151805173ffffffffffffffffffffffffffffffffffffffff1684528701518784018790526106bd8785018261054f565b958801959350509086019060010161065d565b509098975050505050505050565b90151581526020019056fea2646970667358221220e6bc52eff367bffa184f21fff4b2b1e67b39a7f4ef10559888221813c6c7b50164736f6c63430007010033608060405234801561001057600080fd5b5061025d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80638da5cb5b1461003b578063f2fde38b14610059575b600080fd5b61004361006e565b60405161005091906101cf565b60405180910390f35b61006c610067366004610194565b610096565b005b600080610079610170565b5473ffffffffffffffffffffffffffffffffffffffff1691505090565b60006100a0610170565b805490915073ffffffffffffffffffffffffffffffffffffffff163381146100fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f4906101f0565b60405180910390fd5b81547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8481169182178455604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b6000602082840312156101a5578081fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146101c8578182fd5b9392505050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b60208082526016908201527f4d757374206f776e2074686520636f6e74726163742e0000000000000000000060408201526060019056fea2646970667358221220e4ef1d95ebf335ba5234af7aa0a862982465bbdd5e9a39f9552b962ab297b95c64736f6c634300070100334c69624469616d6f6e644375743a204e657720666163657420686173206e6f20636f6465",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH3 0x3252 CODESIZE SUB DUP1 PUSH3 0x3252 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x26 SWAP2 PUSH3 0xCD2 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x3D PUSH3 0x56D PUSH1 0x20 SHL PUSH3 0xD5 OR PUSH1 0x20 SHR JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 PUSH1 0x0 PUSH1 0x40 MLOAD PUSH3 0x97 SWAP1 PUSH3 0xC54 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0xB4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD PUSH3 0xC7 SWAP1 PUSH3 0xC62 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0xE4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD PUSH3 0xF7 SWAP1 PUSH3 0xC70 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0x114 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x3 DUP1 DUP3 MSTORE PUSH1 0x80 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP PUSH1 0x60 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH3 0x13B PUSH3 0xC7E JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH3 0x131 JUMPI SWAP1 POP POP SWAP1 POP DUP4 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH3 0x160 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH3 0x1A7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP2 SWAP1 MSTORE POP PUSH4 0xE712B4E1 PUSH1 0xE0 SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH3 0x1CC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH3 0x1E5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE POP POP DUP3 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH3 0x216 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x5 DUP1 DUP3 MSTORE PUSH1 0xC0 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP2 DUP3 ADD PUSH1 0xA0 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH3 0x25C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP2 SWAP1 MSTORE POP PUSH4 0xADFCA15E PUSH1 0xE0 SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH3 0x281 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH3 0x29A JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP1 MLOAD PUSH4 0x7A0ED627 PUSH1 0xE0 SHL SWAP1 DUP3 SWAP1 PUSH1 0x1 SWAP1 DUP2 LT PUSH3 0x2CC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH3 0x2E5 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP1 MLOAD PUSH4 0x66FFD663 PUSH1 0xE1 SHL SWAP1 DUP3 SWAP1 PUSH1 0x1 SWAP1 DUP2 LT PUSH3 0x317 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH3 0x330 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP1 MLOAD PUSH4 0x14BBDACB PUSH1 0xE2 SHL SWAP1 DUP3 SWAP1 PUSH1 0x1 SWAP1 DUP2 LT PUSH3 0x362 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x3 DUP2 MLOAD DUP2 LT PUSH3 0x37B JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP1 MLOAD PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL SWAP1 DUP3 SWAP1 PUSH1 0x1 SWAP1 DUP2 LT PUSH3 0x3AD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x4 DUP2 MLOAD DUP2 LT PUSH3 0x3C6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE POP POP DUP2 DUP2 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH3 0x3F7 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP1 DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP DUP2 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH3 0x43F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP2 SWAP1 MSTORE POP PUSH4 0xF2FDE38B PUSH1 0xE0 SHL DUP2 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH3 0x464 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH3 0x47D JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP1 MLOAD PUSH4 0x8DA5CB5B PUSH1 0xE0 SHL SWAP1 DUP3 SWAP1 PUSH1 0x2 SWAP1 DUP2 LT PUSH3 0x4AF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH3 0x4C8 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD DUP3 ADD MSTORE PUSH3 0x4F6 SWAP1 DUP3 SWAP1 PUSH3 0xF9 PUSH3 0x591 DUP3 SHL OR SWAP1 SHR JUMP JUMPDEST POP POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 SWAP1 SWAP4 ADD PUSH1 0x20 MSTORE POP POP PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT SWAP1 DUP2 AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP3 SSTORE PUSH4 0xE712B4E1 PUSH1 0xE0 SHL DUP5 MSTORE DUP3 DUP5 KECCAK256 DUP1 SLOAD DUP3 AND DUP4 OR SWAP1 SSTORE PUSH4 0x48E2B093 PUSH1 0xE0 SHL DUP5 MSTORE DUP3 DUP5 KECCAK256 DUP1 SLOAD DUP3 AND DUP4 OR SWAP1 SSTORE PUSH4 0x7F5828D PUSH1 0xE4 SHL DUP5 MSTORE SWAP2 SWAP1 SWAP3 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SWAP2 OR SWAP1 SSTORE POP PUSH3 0xE61 JUMP JUMPDEST PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131C SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x5A8 PUSH3 0x56D PUSH1 0x20 SHL PUSH3 0xD5 OR PUSH1 0x20 SHR JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH3 0x802 JUMPI PUSH1 0x0 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH3 0x5C6 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD MLOAD SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH3 0x78B JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xFFFF AND DUP1 ISZERO DUP1 ISZERO PUSH3 0x62D JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP6 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO JUMPDEST ISZERO PUSH3 0x6AE JUMPI PUSH3 0x658 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x322E PUSH1 0x24 SWAP2 CODECOPY PUSH3 0x850 JUMP JUMPDEST POP PUSH1 0x3 DUP4 ADD DUP1 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP4 SSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 DUP1 DUP5 KECCAK256 DUP4 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP5 MSTORE PUSH1 0x2 DUP8 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP3 KECCAK256 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF DUP4 AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH3 0x6BE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH3 0x783 JUMPI PUSH1 0x0 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH3 0x6E2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH3 0x6FA JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP10 ADD SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH3 0x747 JUMPI PUSH3 0x741 DUP6 DUP4 PUSH3 0x883 JUMP JUMPDEST PUSH3 0x778 JUMP JUMPDEST DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH3 0x778 JUMPI PUSH3 0x76C DUP3 PUSH3 0x938 JUMP JUMPDEST PUSH3 0x778 DUP6 DUP4 PUSH3 0x883 JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH3 0x6B1 JUMP JUMPDEST POP POP PUSH3 0x7F8 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH3 0x79B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH3 0x7F6 JUMPI PUSH3 0x7ED DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH3 0x7C1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH3 0x7D9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH3 0x938 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x1 ADD PUSH3 0x78E JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH3 0x5AD JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP3 DUP4 SWAP1 MSTORE PUSH32 0x39725DD03D877043D78FDFE186295E46E6277EB0A3498F2ADB51071F42A2BDCB SWAP3 PUSH3 0x844 SWAP3 DUP7 SWAP3 SWAP2 PUSH3 0xDA3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST DUP2 EXTCODESIZE DUP2 DUP2 PUSH3 0x87D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x874 SWAP2 SWAP1 PUSH3 0xE4C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x89A PUSH3 0x56D PUSH1 0x20 SHL PUSH3 0xD5 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 DUP6 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP4 SSTORE SWAP2 DUP6 MSTORE DUP4 DUP6 KECCAK256 PUSH1 0x8 DUP3 DIV ADD DUP1 SLOAD PUSH1 0xE0 DUP11 SWAP1 SHR PUSH1 0x4 PUSH1 0x7 DUP6 AND MUL PUSH2 0x100 EXP SWAP1 DUP2 MUL PUSH4 0xFFFFFFFF SWAP1 SWAP2 MUL NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP8 AND DUP5 MSTORE SWAP1 SWAP7 ADD SWAP1 MSTORE SWAP4 SWAP1 SWAP4 KECCAK256 DUP1 SLOAD PUSH2 0xFFFF SWAP1 SWAP4 AND PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH2 0xFFFF PUSH1 0xA0 SHL NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP5 AND SWAP1 SWAP5 OR SWAP3 SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x94F PUSH3 0x56D PUSH1 0x20 SHL PUSH3 0xD5 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH3 0x985 JUMPI POP POP PUSH3 0xC51 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE PUSH1 0x2 DUP7 ADD SWAP1 SWAP3 MSTORE DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP3 DIV PUSH2 0xFFFF AND SWAP3 PUSH1 0x0 NOT DUP4 ADD SWAP3 SWAP1 SWAP2 SWAP1 DUP4 SWAP1 DUP2 LT PUSH3 0x9DC JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD PUSH1 0x4 MUL SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xE0 SHL SWAP1 POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND EQ PUSH3 0xAAF JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 SWAP2 SWAP1 DUP6 SWAP1 DUP2 LT PUSH3 0xA47 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x8 DUP4 DIV ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x7 SWAP1 SWAP5 AND PUSH1 0x4 MUL PUSH2 0x100 EXP SWAP4 DUP5 MUL NOT AND PUSH1 0xE0 SWAP6 SWAP1 SWAP6 SHR SWAP3 SWAP1 SWAP3 MUL SWAP4 SWAP1 SWAP4 OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND DUP2 MSTORE PUSH1 0x1 DUP8 ADD SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0xFFFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL PUSH2 0xFFFF DUP7 AND MUL OR SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP1 PUSH3 0xAD3 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 PUSH1 0x8 PUSH1 0x0 NOT SWAP1 SWAP5 ADD SWAP4 DUP5 DIV ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x4 PUSH1 0x7 DUP8 AND MUL PUSH2 0x100 EXP MUL NOT AND SWAP1 SSTORE SWAP2 SWAP1 SWAP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP9 AND DUP3 MSTORE PUSH1 0x1 DUP8 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xB0 SHL SUB NOT AND SWAP1 SSTORE DUP2 PUSH3 0xC4B JUMPI PUSH1 0x3 DUP6 ADD DUP1 SLOAD PUSH1 0x0 NOT DUP2 ADD SWAP2 PUSH1 0x0 SWAP2 DUP4 SWAP1 DUP2 LT PUSH3 0xB49 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND DUP1 DUP6 MSTORE PUSH1 0x2 DUP13 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 SWAP4 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP3 AND SWAP3 POP PUSH2 0xFFFF SWAP1 SWAP2 AND SWAP1 DUP3 EQ PUSH3 0xBE3 JUMPI DUP2 DUP9 PUSH1 0x3 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH3 0xB98 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP2 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND OR SWAP1 SSTORE SWAP2 DUP5 AND DUP2 MSTORE PUSH1 0x2 DUP11 ADD SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF DUP4 AND OR SWAP1 SSTORE JUMPDEST DUP8 PUSH1 0x3 ADD DUP1 SLOAD DUP1 PUSH3 0xBF1 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 DUP4 ADD PUSH1 0x0 NOT SWAP1 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE SWAP1 SWAP3 ADD SWAP1 SWAP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND DUP3 MSTORE PUSH1 0x2 DUP11 ADD SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 PUSH3 0xC3A DUP3 DUP3 PUSH3 0xC96 JUMP JUMPDEST POP PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND SWAP1 SSTORE POP POP POP JUMPDEST POP POP POP POP POP JUMPDEST POP JUMP JUMPDEST PUSH2 0xF5C DUP1 PUSH3 0x1916 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH2 0x73F DUP1 PUSH3 0x2872 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH2 0x27D DUP1 PUSH3 0x2FB1 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x0 DUP3 SSTORE PUSH1 0x7 ADD PUSH1 0x8 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH3 0xC51 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0xCCE JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0xCB8 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0xCE4 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0xCFB JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0xD4A JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH3 0xD22 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0xD7C JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH3 0xD5E JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH3 0xD8E JUMPI DUP3 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD PUSH1 0x60 DUP4 MSTORE DUP1 DUP7 MLOAD DUP1 DUP4 MSTORE PUSH1 0x80 DUP6 ADD SWAP2 POP PUSH1 0x20 SWAP3 POP PUSH1 0x80 DUP4 DUP3 MUL DUP7 ADD ADD DUP4 DUP10 ADD DUP6 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0xE1B JUMPI PUSH1 0x7F NOT DUP9 DUP5 SUB ADD DUP6 MSTORE DUP2 MLOAD PUSH1 0x40 PUSH3 0xDED DUP6 DUP4 MLOAD PUSH3 0xD02 JUMP JUMPDEST DUP8 DUP3 ADD MLOAD SWAP2 POP DUP1 DUP9 DUP7 ADD MSTORE PUSH3 0xE06 DUP2 DUP7 ADD DUP4 PUSH3 0xD0F JUMP JUMPDEST SWAP7 DUP9 ADD SWAP7 SWAP5 POP POP POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH3 0xDCA JUMP JUMPDEST POP POP PUSH3 0xE2B DUP5 DUP8 ADD DUP10 PUSH3 0xD02 JUMP JUMPDEST DUP6 DUP2 SUB PUSH1 0x40 DUP8 ADD MSTORE PUSH3 0xE3F DUP2 DUP9 PUSH3 0xD55 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH3 0xCFB PUSH1 0x20 DUP4 ADD DUP5 PUSH3 0xD55 JUMP JUMPDEST PUSH2 0xAA5 DUP1 PUSH3 0xE71 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE PUSH2 0xB JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131C SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0xB1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA8 SWAP1 PUSH2 0xA16 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLDATASIZE PUSH1 0x0 DUP1 CALLDATACOPY PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x0 DUP5 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY DUP1 DUP1 ISZERO PUSH2 0xD0 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131C SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x103 PUSH2 0xD5 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x345 JUMPI PUSH1 0x0 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x11F JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD MLOAD SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x2DC JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xFFFF AND DUP1 ISZERO DUP1 ISZERO PUSH2 0x184 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP6 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO JUMPDEST ISZERO PUSH2 0x20E JUMPI PUSH2 0x1AB DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA4C PUSH1 0x24 SWAP2 CODECOPY PUSH2 0x391 JUMP JUMPDEST POP PUSH1 0x3 DUP4 ADD DUP1 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP4 SSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 DUP1 DUP5 KECCAK256 DUP4 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP5 MSTORE PUSH1 0x2 DUP8 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP3 KECCAK256 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF DUP4 AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x21D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x2D5 JUMPI PUSH1 0x0 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x23F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x256 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP10 ADD SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x29F JUMPI PUSH2 0x29A DUP6 DUP4 PUSH2 0x3D2 JUMP JUMPDEST PUSH2 0x2CB JUMP JUMPDEST DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2CB JUMPI PUSH2 0x2C1 DUP3 PUSH2 0x4B2 JUMP JUMPDEST PUSH2 0x2CB DUP6 DUP4 PUSH2 0x3D2 JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x211 JUMP JUMPDEST POP POP PUSH2 0x33C JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2EB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x33A JUMPI PUSH2 0x332 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x30E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x325 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x4B2 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x2DF JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x108 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP3 DUP4 SWAP1 MSTORE PUSH32 0x39725DD03D877043D78FDFE186295E46E6277EB0A3498F2ADB51071F42A2BDCB SWAP3 PUSH2 0x385 SWAP3 DUP7 SWAP3 SWAP2 PUSH2 0x93F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST DUP2 EXTCODESIZE DUP2 DUP2 PUSH2 0x3CC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA8 SWAP2 SWAP1 PUSH2 0x9FC JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3DC PUSH2 0xD5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 DUP6 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP4 SSTORE SWAP2 DUP6 MSTORE DUP4 DUP6 KECCAK256 PUSH1 0x8 DUP3 DIV ADD DUP1 SLOAD PUSH1 0xE0 DUP11 SWAP1 SHR PUSH1 0x4 PUSH1 0x7 DUP6 AND MUL PUSH2 0x100 EXP SWAP1 DUP2 MUL PUSH4 0xFFFFFFFF SWAP1 SWAP2 MUL NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP8 AND DUP5 MSTORE SWAP1 SWAP7 ADD SWAP1 MSTORE SWAP4 SWAP1 SWAP4 KECCAK256 DUP1 SLOAD PUSH2 0xFFFF SWAP1 SWAP4 AND PUSH21 0x10000000000000000000000000000000000000000 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 SWAP5 AND SWAP1 SWAP5 OR SWAP3 SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4BC PUSH2 0xD5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x4F0 JUMPI POP POP PUSH2 0x849 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE PUSH1 0x2 DUP7 ADD SWAP1 SWAP3 MSTORE DUP3 KECCAK256 DUP1 SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP3 DIV PUSH2 0xFFFF AND SWAP3 PUSH1 0x0 NOT DUP4 ADD SWAP3 SWAP1 SWAP2 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x557 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD PUSH1 0x4 MUL SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xE0 SHL SWAP1 POP DUP6 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x67D JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 SWAP2 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 0x5EA JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x8 DUP4 DIV ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x7 SWAP1 SWAP5 AND PUSH1 0x4 MUL PUSH2 0x100 EXP SWAP4 DUP5 MUL NOT AND PUSH1 0xE0 SWAP6 SWAP1 SWAP6 SHR SWAP3 SWAP1 SWAP3 MUL SWAP4 SWAP1 SWAP4 OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND DUP2 MSTORE PUSH1 0x1 DUP8 ADD SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH21 0x10000000000000000000000000000000000000000 PUSH2 0xFFFF DUP7 AND MUL OR SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP1 PUSH2 0x6A0 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 PUSH1 0x8 PUSH1 0x0 NOT SWAP1 SWAP5 ADD SWAP4 DUP5 DIV ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x4 PUSH1 0x7 DUP8 AND MUL PUSH2 0x100 EXP MUL NOT AND SWAP1 SSTORE SWAP2 SWAP1 SWAP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP9 AND DUP3 MSTORE PUSH1 0x1 DUP8 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000000000000000 AND SWAP1 SSTORE DUP2 PUSH2 0x843 JUMPI PUSH1 0x3 DUP6 ADD DUP1 SLOAD PUSH1 0x0 NOT DUP2 ADD SWAP2 PUSH1 0x0 SWAP2 DUP4 SWAP1 DUP2 LT PUSH2 0x72C JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND DUP1 DUP6 MSTORE PUSH1 0x2 DUP13 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 SWAP4 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP3 AND SWAP3 POP PUSH2 0xFFFF SWAP1 SWAP2 AND SWAP1 DUP3 EQ PUSH2 0x7D1 JUMPI DUP2 DUP9 PUSH1 0x3 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x779 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP2 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND OR SWAP1 SSTORE SWAP2 DUP5 AND DUP2 MSTORE PUSH1 0x2 DUP11 ADD SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF DUP4 AND OR SWAP1 SSTORE JUMPDEST DUP8 PUSH1 0x3 ADD DUP1 SLOAD DUP1 PUSH2 0x7DE JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 DUP4 ADD PUSH1 0x0 NOT SWAP1 DUP2 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SSTORE SWAP1 SWAP3 ADD SWAP1 SWAP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND DUP3 MSTORE PUSH1 0x2 DUP11 ADD SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 PUSH2 0x832 DUP3 DUP3 PUSH2 0x84C JUMP JUMPDEST POP PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND SWAP1 SSTORE POP POP POP JUMPDEST POP POP POP POP POP JUMPDEST POP JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x0 DUP3 SSTORE PUSH1 0x7 ADD PUSH1 0x8 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x849 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x881 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x86D JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x8CB JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8A5 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x8FB JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x8DF JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x90C JUMPI DUP3 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD PUSH1 0x60 DUP4 MSTORE DUP1 DUP7 MLOAD DUP1 DUP4 MSTORE PUSH1 0x80 DUP6 ADD SWAP2 POP PUSH1 0x20 SWAP3 POP PUSH1 0x80 DUP4 DUP3 MUL DUP7 ADD ADD DUP4 DUP10 ADD DUP6 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9CF JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80 DUP9 DUP5 SUB ADD DUP6 MSTORE DUP2 MLOAD PUSH1 0x40 PUSH2 0x9A4 DUP6 DUP4 MLOAD PUSH2 0x885 JUMP JUMPDEST DUP8 DUP3 ADD MLOAD SWAP2 POP DUP1 DUP9 DUP7 ADD MSTORE PUSH2 0x9BB DUP2 DUP7 ADD DUP4 PUSH2 0x892 JUMP JUMPDEST SWAP7 DUP9 ADD SWAP7 SWAP5 POP POP POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x966 JUMP JUMPDEST POP POP PUSH2 0x9DD DUP5 DUP8 ADD DUP10 PUSH2 0x885 JUMP JUMPDEST DUP6 DUP2 SUB PUSH1 0x40 DUP8 ADD MSTORE PUSH2 0x9EF DUP2 DUP9 PUSH2 0x8D6 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0xA0F PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x8D6 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4469616D6F6E643A2046756E6374696F6E20646F6573206E6F74206578697374 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP INVALID 0x4C PUSH10 0x624469616D6F6E644375 PUSH21 0x3A204E657720666163657420686173206E6F20636F PUSH5 0x65A2646970 PUSH7 0x735822122012E7 0xED CALLDATALOAD 0xB4 LOG2 DUP5 PUSH28 0x23E9D014F8B7B3C729039992CBC88821D0901892D1F6BA3D64736F6C PUSH4 0x43000701 STOP CALLER PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF3C DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xE712B4E1 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x3E CALLDATASIZE PUSH1 0x4 PUSH2 0xA05 JUMP JUMPDEST PUSH2 0x45 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4F DUP6 DUP6 PUSH2 0x1C2 JUMP JUMPDEST PUSH32 0x39725DD03D877043D78FDFE186295E46E6277EB0A3498F2ADB51071F42A2BDCB DUP6 DUP6 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x86 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB83 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xC8 JUMPI DUP1 ISZERO PUSH2 0xC3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBA SWAP1 PUSH2 0xCEA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1BB JUMP JUMPDEST DUP1 PUSH2 0xE5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBA SWAP1 PUSH2 0xD47 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ADDRESS EQ PUSH2 0x117 JUMPI PUSH2 0x117 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xEB7 PUSH1 0x2A SWAP2 CODECOPY PUSH2 0x4B6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x135 SWAP3 SWAP2 SWAP1 PUSH2 0xB73 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x170 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x175 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x1B8 JUMPI DUP1 MLOAD ISZERO PUSH2 0x1A0 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBA SWAP2 SWAP1 PUSH2 0xC60 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBA SWAP1 PUSH2 0xDA4 JUMP JUMPDEST POP POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CC PUSH2 0x4D7 JUMP JUMPDEST DUP1 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBA SWAP1 PUSH2 0xCB3 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x4B0 JUMPI PUSH1 0x0 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x211 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x223 SWAP2 SWAP1 PUSH2 0xE4F JUMP JUMPDEST PUSH2 0x231 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x9E3 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x412 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xFFFF AND DUP1 ISZERO DUP1 ISZERO PUSH2 0x28A JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP6 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO JUMPDEST ISZERO PUSH2 0x314 JUMPI PUSH2 0x2B1 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xEE1 PUSH1 0x26 SWAP2 CODECOPY PUSH2 0x4B6 JUMP JUMPDEST POP PUSH1 0x3 DUP4 ADD DUP1 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP4 SSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 DUP1 DUP5 KECCAK256 DUP4 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP5 MSTORE PUSH1 0x2 DUP8 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP3 KECCAK256 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF DUP4 AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x0 JUMPDEST DUP7 DUP7 DUP6 DUP2 DUP2 LT PUSH2 0x323 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x335 SWAP2 SWAP1 PUSH2 0xE4F JUMP JUMPDEST PUSH2 0x343 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xE01 JUMP JUMPDEST SWAP1 POP DUP2 LT ISZERO PUSH2 0x40B JUMPI PUSH1 0x0 DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0x35A JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x36C SWAP2 SWAP1 PUSH2 0xE4F JUMP JUMPDEST PUSH2 0x37A SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xE01 JUMP JUMPDEST DUP4 DUP2 DUP2 LT PUSH2 0x384 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x399 SWAP2 SWAP1 PUSH2 0xAD8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP9 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x3D5 JUMPI PUSH2 0x3D0 DUP6 DUP4 PUSH2 0x4FB JUMP JUMPDEST PUSH2 0x401 JUMP JUMPDEST DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x401 JUMPI PUSH2 0x3F7 DUP3 PUSH2 0x5DB JUMP JUMPDEST PUSH2 0x401 DUP6 DUP4 PUSH2 0x4FB JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x317 JUMP JUMPDEST POP POP PUSH2 0x4A7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x421 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x433 SWAP2 SWAP1 PUSH2 0xE4F JUMP JUMPDEST PUSH2 0x441 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xE01 JUMP JUMPDEST SWAP1 POP DUP2 LT ISZERO PUSH2 0x4A5 JUMPI PUSH2 0x49D DUP7 DUP7 DUP6 DUP2 DUP2 LT PUSH2 0x459 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x46B SWAP2 SWAP1 PUSH2 0xE4F JUMP JUMPDEST PUSH2 0x479 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xE01 JUMP JUMPDEST DUP4 DUP2 DUP2 LT PUSH2 0x483 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x498 SWAP2 SWAP1 PUSH2 0xAD8 JUMP JUMPDEST PUSH2 0x5DB JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x415 JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1FB JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST DUP2 EXTCODESIZE DUP2 DUP2 PUSH2 0x4B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBA SWAP2 SWAP1 PUSH2 0xC60 JUMP JUMPDEST PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131C SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x505 PUSH2 0x4D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 DUP6 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP4 SSTORE SWAP2 DUP6 MSTORE DUP4 DUP6 KECCAK256 PUSH1 0x8 DUP3 DIV ADD DUP1 SLOAD PUSH1 0xE0 DUP11 SWAP1 SHR PUSH1 0x4 PUSH1 0x7 DUP6 AND MUL PUSH2 0x100 EXP SWAP1 DUP2 MUL PUSH4 0xFFFFFFFF SWAP1 SWAP2 MUL NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP8 AND DUP5 MSTORE SWAP1 SWAP7 ADD SWAP1 MSTORE SWAP4 SWAP1 SWAP4 KECCAK256 DUP1 SLOAD PUSH2 0xFFFF SWAP1 SWAP4 AND PUSH21 0x10000000000000000000000000000000000000000 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 SWAP5 AND SWAP1 SWAP5 OR SWAP3 SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5E5 PUSH2 0x4D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x619 JUMPI POP POP PUSH2 0x972 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE PUSH1 0x2 DUP7 ADD SWAP1 SWAP3 MSTORE DUP3 KECCAK256 DUP1 SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP3 DIV PUSH2 0xFFFF AND SWAP3 PUSH1 0x0 NOT DUP4 ADD SWAP3 SWAP1 SWAP2 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x680 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD PUSH1 0x4 MUL SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xE0 SHL SWAP1 POP DUP6 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x7A6 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 SWAP2 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 0x713 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x8 DUP4 DIV ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x7 SWAP1 SWAP5 AND PUSH1 0x4 MUL PUSH2 0x100 EXP SWAP4 DUP5 MUL NOT AND PUSH1 0xE0 SWAP6 SWAP1 SWAP6 SHR SWAP3 SWAP1 SWAP3 MUL SWAP4 SWAP1 SWAP4 OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND DUP2 MSTORE PUSH1 0x1 DUP8 ADD SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH21 0x10000000000000000000000000000000000000000 PUSH2 0xFFFF DUP7 AND MUL OR SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP1 PUSH2 0x7C9 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 PUSH1 0x8 PUSH1 0x0 NOT SWAP1 SWAP5 ADD SWAP4 DUP5 DIV ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x4 PUSH1 0x7 DUP8 AND MUL PUSH2 0x100 EXP MUL NOT AND SWAP1 SSTORE SWAP2 SWAP1 SWAP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP9 AND DUP3 MSTORE PUSH1 0x1 DUP8 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000000000000000 AND SWAP1 SSTORE DUP2 PUSH2 0x96C JUMPI PUSH1 0x3 DUP6 ADD DUP1 SLOAD PUSH1 0x0 NOT DUP2 ADD SWAP2 PUSH1 0x0 SWAP2 DUP4 SWAP1 DUP2 LT PUSH2 0x855 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND DUP1 DUP6 MSTORE PUSH1 0x2 DUP13 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 SWAP4 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP3 AND SWAP3 POP PUSH2 0xFFFF SWAP1 SWAP2 AND SWAP1 DUP3 EQ PUSH2 0x8FA JUMPI DUP2 DUP9 PUSH1 0x3 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x8A2 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP2 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND OR SWAP1 SSTORE SWAP2 DUP5 AND DUP2 MSTORE PUSH1 0x2 DUP11 ADD SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF DUP4 AND OR SWAP1 SSTORE JUMPDEST DUP8 PUSH1 0x3 ADD DUP1 SLOAD DUP1 PUSH2 0x907 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 DUP4 ADD PUSH1 0x0 NOT SWAP1 DUP2 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SSTORE SWAP1 SWAP3 ADD SWAP1 SWAP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND DUP3 MSTORE PUSH1 0x2 DUP11 ADD SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 PUSH2 0x95B DUP3 DUP3 PUSH2 0x975 JUMP JUMPDEST POP PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND SWAP1 SSTORE POP POP POP JUMPDEST POP POP POP POP POP JUMPDEST POP JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x0 DUP3 SSTORE PUSH1 0x7 ADD PUSH1 0x8 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x972 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x9AA JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x996 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x9C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x9C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9F4 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x9FE DUP4 DUP4 PUSH2 0x9AE JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xA1C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xA33 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA46 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xA54 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH1 0x20 DUP11 DUP2 DUP3 DUP5 MUL DUP7 ADD ADD GT ISZERO PUSH2 0xA68 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 DUP5 ADD SWAP9 POP DUP2 SWAP8 POP PUSH2 0xA7C DUP12 DUP3 DUP13 ADD PUSH2 0x9AE JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP11 ADD CALLDATALOAD SWAP4 POP DUP3 DUP5 GT ISZERO PUSH2 0xA91 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP4 DUP11 ADD SWAP4 POP DUP11 PUSH1 0x1F DUP6 ADD SLT PUSH2 0xAA4 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP2 POP DUP3 DUP3 GT ISZERO PUSH2 0xAB4 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP11 DUP2 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0xAC4 JUMPI DUP5 DUP6 REVERT JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP POP SWAP1 SWAP5 ADD SWAP4 POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAE9 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x9FE DUP4 DUP4 PUSH2 0x9CB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP3 DUP3 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0xB3E JUMPI DUP3 DUP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH2 0xB2D DUP3 DUP6 PUSH2 0x9CB JUMP JUMPDEST AND DUP9 MSTORE SWAP7 DUP4 ADD SWAP7 SWAP2 POP PUSH1 0x1 ADD PUSH2 0xB0F JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MSTORE DUP3 DUP3 PUSH1 0x20 DUP7 ADD CALLDATACOPY DUP1 PUSH1 0x20 DUP5 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP6 ADD AND DUP6 ADD ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 PUSH1 0x20 PUSH1 0x80 DUP1 DUP5 ADD SWAP1 DUP3 DUP10 MUL DUP6 ADD ADD DUP10 DUP5 JUMPDEST DUP11 DUP2 LT ISZERO PUSH2 0xC31 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80 DUP8 DUP5 SUB ADD DUP5 MSTORE DUP2 CALLDATALOAD PUSH1 0x3E NOT DUP14 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xBE2 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP13 ADD PUSH1 0x40 DUP7 DUP3 ADD PUSH2 0xBFC DUP7 PUSH2 0xBF7 DUP4 DUP7 PUSH2 0x9AE JUMP JUMPDEST PUSH2 0xAF3 JUMP JUMPDEST PUSH2 0xC06 DUP2 DUP5 PUSH2 0xE6E JUMP JUMPDEST SWAP4 POP SWAP1 POP DUP2 DUP9 DUP8 ADD MSTORE PUSH2 0xC1C DUP3 DUP8 ADD DUP5 DUP4 PUSH2 0xB00 JUMP JUMPDEST SWAP7 DUP9 ADD SWAP7 SWAP6 POP POP POP SWAP2 DUP6 ADD SWAP2 POP PUSH1 0x1 ADD PUSH2 0xBA0 JUMP JUMPDEST POP POP PUSH2 0xC3F DUP4 DUP7 ADD DUP10 PUSH2 0xAF3 JUMP JUMPDEST DUP5 DUP2 SUB PUSH1 0x40 DUP7 ADD MSTORE PUSH2 0xC52 DUP2 DUP8 DUP10 PUSH2 0xB49 JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xC8C JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0xC70 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xC9D JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D757374206F776E2074686520636F6E74726163742E00000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3E SWAP1 DUP3 ADD MSTORE PUSH32 0x4469616D6F6E6443757446616365743A205F696E697420697320616464726573 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x73283029206275745F63616C6C64617461206973206E6F7420656D7074790000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3F SWAP1 DUP3 ADD MSTORE PUSH32 0x4469616D6F6E6443757446616365743A205F63616C6C6461746120697320656D PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x70747920627574205F696E6974206973206E6F74206164647265737328302900 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x4469616D6F6E6443757446616365743A205F696E69742066756E6374696F6E20 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x7265766572746564000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xE17 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xE31 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 SWAP1 DUP2 ADD SWAP3 POP DUP2 MUL CALLDATASIZE SUB DUP3 SGT ISZERO PUSH2 0xE48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 CALLDATALOAD PUSH1 0x3E NOT DUP4 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xE64 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xE84 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x20 DUP2 ADD SWAP3 POP CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xEA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP2 MUL CALLDATASIZE SUB DUP4 SGT ISZERO PUSH2 0xE48 JUMPI PUSH1 0x0 DUP1 REVERT INVALID DIFFICULTY PUSH10 0x616D6F6E644375744661 PUSH4 0x65743A20 0x5F PUSH10 0x6E697420616464726573 PUSH20 0x20686173206E6F20636F64654469616D6F6E6443 PUSH22 0x7446616365743A204E65772066616365742068617320 PUSH15 0x6F20636F6465A26469706673582212 KECCAK256 0xD5 0x49 SWAP3 JUMPDEST 0xE7 CALL PUSH3 0xAD8BEE 0xE 0x5F 0xAA CALLCODE 0xF9 0xA9 0xE5 0x48 0xED PUSH6 0x80D804FBD4D 0xCD 0xB3 0xAA PUSH24 0x977264736F6C634300070100336080604052348015610010 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x71F DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x67 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7A0ED627 GT PUSH2 0x50 JUMPI DUP1 PUSH4 0x7A0ED627 EQ PUSH2 0xAA JUMPI DUP1 PUSH4 0xADFCA15E EQ PUSH2 0xBF JUMPI DUP1 PUSH4 0xCDFFACC6 EQ PUSH2 0xDF JUMPI PUSH2 0x67 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x6C JUMPI DUP1 PUSH4 0x52EF6B2C EQ PUSH2 0x95 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7F PUSH2 0x7A CALLDATASIZE PUSH1 0x4 PUSH2 0x50F JUMP JUMPDEST PUSH2 0xFF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0x6DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x9D PUSH2 0x14A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0x5CC JUMP JUMPDEST PUSH2 0xB2 PUSH2 0x1C3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0x639 JUMP JUMPDEST PUSH2 0xD2 PUSH2 0xCD CALLDATASIZE PUSH1 0x4 PUSH2 0x4D4 JUMP JUMPDEST PUSH2 0x370 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0x626 JUMP JUMPDEST PUSH2 0xF2 PUSH2 0xED CALLDATASIZE PUSH1 0x4 PUSH2 0x50F JUMP JUMPDEST PUSH2 0x43C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0x5AB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x10A PUSH2 0x498 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 SWAP1 SWAP2 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x156 PUSH2 0x498 JUMP JUMPDEST PUSH1 0x3 DUP2 ADD DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE SWAP4 SWAP5 POP DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x1B8 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x18D JUMPI JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x1CF PUSH2 0x498 JUMP JUMPDEST PUSH1 0x3 DUP2 ADD SLOAD SWAP1 SWAP2 POP DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x1EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x228 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x215 PUSH2 0x4BC JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x20D JUMPI SWAP1 POP JUMPDEST POP SWAP3 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x36A JUMPI PUSH1 0x0 DUP4 PUSH1 0x3 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x247 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP1 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x281 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND SWAP1 MSTORE SWAP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP7 ADD DUP3 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x342 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x4 ADD SWAP1 PUSH1 0x20 DUP3 PUSH1 0x3 ADD DIV SWAP3 DUP4 ADD SWAP3 PUSH1 0x1 SUB DUP3 MUL SWAP2 POP DUP1 DUP5 GT PUSH2 0x2EF JUMPI SWAP1 POP JUMPDEST POP POP POP POP POP DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x353 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x22E JUMP JUMPDEST POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x37C PUSH2 0x498 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD DUP4 MLOAD DUP2 DUP5 MUL DUP2 ADD DUP5 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE SWAP4 SWAP5 POP SWAP2 SWAP3 SWAP1 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x42F JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x4 ADD SWAP1 PUSH1 0x20 DUP3 PUSH1 0x3 ADD DIV SWAP3 DUP4 ADD SWAP3 PUSH1 0x1 SUB DUP3 MUL SWAP2 POP DUP1 DUP5 GT PUSH2 0x3DC JUMPI SWAP1 POP JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x447 PUSH2 0x498 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP4 ADD PUSH1 0x20 MSTORE POP POP PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131C SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4E5 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x508 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x520 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x508 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x5A0 JUMPI DUP2 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x562 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x61A JUMPI DUP4 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x5E8 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x508 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x54F JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP1 DUP5 MUL DUP7 ADD DUP4 ADD DUP8 DUP6 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x6D0 JUMPI DUP9 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0 ADD DUP6 MSTORE DUP2 MLOAD DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 MSTORE DUP8 ADD MLOAD DUP8 DUP5 ADD DUP8 SWAP1 MSTORE PUSH2 0x6BD DUP8 DUP6 ADD DUP3 PUSH2 0x54F JUMP JUMPDEST SWAP6 DUP9 ADD SWAP6 SWAP4 POP POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x65D JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE6 0xBC MSTORE 0xEF RETURN PUSH8 0xBFFA184F21FFF4B2 0xB1 0xE6 PUSH28 0x39A7F4EF10559888221813C6C7B50164736F6C634300070100336080 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25D DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x59 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x6E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x50 SWAP2 SWAP1 PUSH2 0x1CF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x6C PUSH2 0x67 CALLDATASIZE PUSH1 0x4 PUSH2 0x194 JUMP JUMPDEST PUSH2 0x96 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x79 PUSH2 0x170 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA0 PUSH2 0x170 JUMP JUMPDEST DUP1 SLOAD SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER DUP2 EQ PUSH2 0xFD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x1F0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND SWAP2 DUP3 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131C SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A5 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1C8 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D757374206F776E2074686520636F6E74726163742E00000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE4 0xEF SAR SWAP6 0xEB RETURN CALLDATALOAD 0xBA MSTORE CALLVALUE 0xAF PUSH27 0xA0A862982465BBDD5E9A39F9552B962AB297B95C64736F6C634300 SMOD ADD STOP CALLER 0x4C PUSH10 0x624469616D6F6E644375 PUSH21 0x3A204E657720666163657420686173206E6F20636F PUSH5 0x6500000000 ",
              "sourceMap": "525:3593:1:-:0;;;638:2532;;;;;;;;;;;;;;;;;;:::i;:::-;683:43;729:34;:32;;;;;:34;;:::i;:::-;773:24;;-1:-1:-1;;773:24:1;-1:-1:-1;;;;;773:24:1;;;;;;;812:39;;773:24;;-1:-1:-1;773:24:1;-1:-1:-1;;812:39:1;;-1:-1:-1;;812:39:1;862:31;896:21;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;862:55;;928:35;966:23;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;928:61;;1093:29;1125:20;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1196:26:1;;;1220:1;1196:26;;;;;;;;;1093:52;;-1:-1:-1;1156:37:1;;1196:26;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;1156:66;;1308:15;1271:10;1282:1;1271:13;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1271:53:1;;;;;;;1368:15;;;-1:-1:-1;1368:15:1;;;;;;;;;;;;;;1271:13;1368:15;;;;;-1:-1:-1;1368:15:1;1334:10;1345:1;1334:13;;;;;;;;;;;;;;:31;;:49;;;;1430:35;;;1393:10;1404:1;1393:13;;;;;;;;;;;;;;:31;;;1425:1;1393:34;;;;;;;;-1:-1:-1;;;;;;1393:72:1;;;:34;;;;;;;;;;;:72;1518:13;;1555:17;;1518:10;;-1:-1:-1;;1518:13:1;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1518:55:1;;;;;;;1617:15;;;1630:1;1617:15;;;;;;;;;;;;-1:-1:-1;;1617:15:1;;;;;-1:-1:-1;1617:15:1;1583:10;1594:1;1583:13;;;;;;;;;;;;;;:31;;:49;;;;1679;;;1642:10;1653:1;1642:13;;;;;;;;;;;;;;:31;;;1674:1;1642:34;;;;;;;;-1:-1:-1;;;;;;1642:86:1;;;;:34;;;;;;;;;;;:86;1738:13;;-1:-1:-1;;1738:13:1;;-1:-1:-1;;1738:13:1;;;;;;;;;;;;:31;;;1770:1;1738:34;;;;;;;;-1:-1:-1;;;;;;1738:70:1;;;;:34;;;;;;;;;;;:70;1818:13;;-1:-1:-1;;1818:13:1;;-1:-1:-1;;1818:13:1;;;;;;;;;;;;:31;;;1850:1;1818:34;;;;;;;;-1:-1:-1;;;;;;1818:76:1;;;;:34;;;;;;;;;;;:76;1904:13;;-1:-1:-1;;1904:13:1;;-1:-1:-1;;1904:13:1;;;;;;;;;;;;:31;;;1936:1;1904:34;;;;;;;;-1:-1:-1;;;;;;1904:78:1;;;;:34;;;;;;;;;;;:78;1992:13;;-1:-1:-1;;1992:13:1;;-1:-1:-1;;1992:13:1;;;;;;;;;;;;:31;;;2024:1;1992:34;;;;;;;;-1:-1:-1;;;;;;1992:81:1;;;:34;;;;;;;;;;;:81;2122:13;;2159:14;;2122:10;;2133:1;;2122:13;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2122:52:1;;;;;;;2218:15;;;2231:1;2218:15;;;;;;;;;;2231:1;;2218:15;;;;;;;;;;-1:-1:-1;2218:15:1;2184:10;2195:1;2184:13;;;;;;;;;;;;;;:31;;:49;;;;2280:41;;;2243:10;2254:1;2243:13;;;;;;;;;;;;;;:31;;;2275:1;2243:34;;;;;;;;-1:-1:-1;;;;;;2243:78:1;;;;:34;;;;;;;;;;;:78;2331:13;;-1:-1:-1;;2331:13:1;;2342:1;;2331:13;;;;;;;;;;;;:31;;;2363:1;2331:34;;;;;;;;-1:-1:-1;;;;;;2331:66:1;;;;:34;;;;;;;;;;:66;2486:36;;2511:10;;2486:24;;;;;:36;;:::i;:::-;-1:-1:-1;;;2581:58:1;;;;:22;;;;;:58;;-1:-1:-1;;2581:58:1;;;;:65;;2642:4;-1:-1:-1;2581:65:1;;;;;;;;-1:-1:-1;2679:59:1;;;;;:66;;;;;;;;-1:-1:-1;3002:35:1;;;;;:42;;;;;;;;-1:-1:-1;3073:83:1;;;;;;:90;;;;;;;;;;-1:-1:-1;525:3593:1;;1484:197:10;411:45;;1632:43::o;967:2269:9:-;1046:43;1092:34;:32;;;;;:34;;:::i;:::-;1046:80;;1141:18;1136:2030;1174:11;:18;1161:10;:31;1136:2030;;;1222:23;1248:11;1260:10;1248:23;;;;;;;;;;;;;;;;;;:36;;-1:-1:-1;;;;;;1341:29:9;;;1337:1819;;-1:-1:-1;;;;;1421:42:9;;1390:28;1421:42;;;:25;;;:42;;;;;-1:-1:-1;1421:63:9;;;;1568:25;;:101;;;;-1:-1:-1;;;;;;1597:42:9;;;;;;:25;;;:42;;;;;:67;:72;1568:101;1564:466;;;1693:72;1709:15;1693:72;;;;;;;;;;;;;;;;;:15;:72::i;:::-;-1:-1:-1;1810:17:9;;;:24;;1856:39;;;;;;-1:-1:-1;1856:39:9;;;;;;;;;;;-1:-1:-1;;1856:39:9;-1:-1:-1;;;;;1856:39:9;;;;;;;;1917:42;;:25;;;:42;;;;;;:63;;;:94;;-1:-1:-1;;1917:94:9;-1:-1:-1;1917:94:9;;;;;1564:466;2096:21;2091:753;2135:11;2147:10;2135:23;;;;;;;;;;;;;;:41;;;:48;2119:13;:64;2091:753;;;2224:15;2242:11;2254:10;2242:23;;;;;;;;;;;;;;:41;;;2284:13;2242:56;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;2339:39:9;;2320:16;2339:39;;;-1:-1:-1;2339:29:9;;:39;;;;;;;:52;2242:56;;-1:-1:-1;;;;;;2339:52:9;;2440:386;;2494:38;2506:15;2523:8;2494:11;:38::i;:::-;2440:386;;;-1:-1:-1;;;;;2626:27:9;;;;;;;2622:182;;2685:24;2700:8;2685:14;:24::i;:::-;2739:38;2751:15;2768:8;2739:11;:38::i;:::-;-1:-1:-1;;2185:15:9;;2091:753;;;;1337:1819;;;;2923:21;2918:224;2962:11;2974:10;2962:23;;;;;;;;;;;;;;:41;;;:48;2946:13;:64;2918:224;;;3051:72;3066:11;3078:10;3066:23;;;;;;;;;;;;;;:41;;;3108:13;3066:56;;;;;;;;;;;;;;3051:14;;;:72;;:::i;:::-;3012:15;;2918:224;;;;1337:1819;-1:-1:-1;1194:12:9;;1136:2030;;;-1:-1:-1;3216:12:9;;;3212:1;3216:12;;;;;;;;;;3180:49;;;;3191:11;;3212:1;3180:49;:::i;:::-;;;;;;;;967:2269;;:::o;5843:254::-;6009:22;;6076:13;6058:16;6050:40;;;;-1:-1:-1;6050:40:9;;;;;;;;:::i;:::-;;;;;;;;;;5843:254;;;:::o;3242:519::-;3319:43;3365:34;:32;;;;;:34;;:::i;:::-;-1:-1:-1;;;;;3436:36:9;;;;3409:24;3436:36;;;:25;;;:36;;;;;;;;:61;;-1:-1:-1;3507:70:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;3587:40:9;;;;;:29;;;;:40;;;;;;:65;;-1:-1:-1;;3587:65:9;;;;-1:-1:-1;3662:92:9;;;;;-1:-1:-1;3662:92:9;;;;;;;;-1:-1:-1;3242:519:9:o;3767:2070::-;3828:43;3874:34;:32;;;;;:34;;:::i;:::-;-1:-1:-1;;;;;;3937:40:9;;3918:16;3937:40;;;-1:-1:-1;3937:29:9;;:40;;;;;:53;:29;;-1:-1:-1;;;;;;3937:53:9;;4065:59;;4107:7;;;;4065:59;-1:-1:-1;;;;;;4234:40:9;;4207:24;4234:40;;;-1:-1:-1;4234:29:9;;:40;;;;;;;;:65;-1:-1:-1;;;;;4340:35:9;;;;:25;;;:35;;;;;:60;;-1:-1:-1;4234:65:9;;;;;;-1:-1:-1;;4340:64:9;;;4207:24;;4340:35;:64;;4436:75;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;4593:25:9;;;;;;;4589:251;;-1:-1:-1;;;;;4634:35:9;;;;;;:25;;;:35;;;;;:71;;4708:12;;4634:35;4688:16;;4634:71;;;;;;;;;;;;;;;;;;:86;;;:71;;;;;;:86;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;4734:43:9;;;;-1:-1:-1;4734:29:9;;:43;;;;;;:95;;-1:-1:-1;4734:95:9;-1:-1:-1;;4734:95:9;;;;;;4589:251;-1:-1:-1;;;;;4885:35:9;;;;;;:25;;;:35;;;;;:59;;;;;;;;;;;;;;;;-1:-1:-1;;4885:59:9;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;4961:40:9;;;;-1:-1:-1;4961:29:9;;:40;;;;;4954:47;;-1:-1:-1;4954:47:9;;;5096:25;5092:739;;5263:17;;;:24;;-1:-1:-1;;5263:28:9;;;-1:-1:-1;;5263:28:9;;5332:43;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5420:35:9;;;;;;:25;;;:35;;;;;;;-1:-1:-1;5420:56:9;;5332:43;;;-1:-1:-1;5420:56:9;;;;;5494:28;;5490:238;;5584:16;5542:2;:17;;5560:20;5542:39;;;;;;;;;;;;;;;;;;;;:58;;-1:-1:-1;;5542:58:9;-1:-1:-1;;;;;5542:58:9;;;;;;5618:43;;;;;:25;;;:43;;;;;;-1:-1:-1;5618:64:9;:95;;-1:-1:-1;;5618:95:9;-1:-1:-1;5618:95:9;;;;;5490:238;5741:2;:17;;:23;;;;;;;;;;;;;;;-1:-1:-1;;5741:23:9;;;;;;;-1:-1:-1;;5741:23:9;;;;;;;;;-1:-1:-1;;;;;5785:35:9;;;;:25;;;:35;;;;;;5778:42;5785:35;5741:23;5778:42;:::i;:::-;-1:-1:-1;5778:42:9;;;;-1:-1:-1;;5778:42:9;;;-1:-1:-1;;;5092:739:9;3767:2070;;;;;;;:::o;525:3593:1:-;;;;;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;;;-1:-1:-1;525:3593:1;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;146:263:-1:-;;261:2;249:9;240:7;236:23;232:32;229:2;;;-1:-1;;267:12;229:2;83:13;;-1:-1;;;;;7677:54;;8563:35;;8553:2;;-1:-1;;8602:12;8553:2;319:74;223:186;-1:-1;;;223:186::o;844:142::-;-1:-1;;;;;7677:54;923:58;;917:69::o;1132:662::-;;1312:5;5923:12;6758:6;6753:3;6746:19;6795:4;;6790:3;6786:14;1324:82;;6795:4;1476:5;5598:14;-1:-1;1515:257;1540:6;1537:1;1534:13;1515:257;;;1601:13;;-1:-1;;;;;;7525:78;2958:36;;566:14;;;;6475;;;;-1:-1;1555:9;1515:257;;;-1:-1;1778:10;;1244:550;-1:-1;;;;;1244:550::o;3006:343::-;;3148:5;5923:12;6758:6;6753:3;6746:19;-1:-1;8195:101;8209:6;8206:1;8203:13;8195:101;;;6795:4;8276:11;;;;;8270:18;8257:11;;;;;8250:39;8224:10;8195:101;;;8311:6;8308:1;8305:13;8302:2;;;-1:-1;6795:4;8367:6;6790:3;8358:16;;8351:27;8302:2;-1:-1;8483:7;8467:14;-1:-1;;8463:28;3305:39;;;;6795:4;3305:39;;3096:253;-1:-1;;3096:253::o;4380:780::-;;4683:2;4672:9;4668:18;4683:2;4704:17;4697:47;4758:152;2126:5;5923:12;6758:6;6753:3;6746:19;6786:14;4672:9;6786:14;2138:115;;6795:4;;;6786:14;6795:4;2310:6;2306:17;4672:9;2297:27;;6795:4;2417:5;5598:14;-1:-1;2456:396;2481:6;2478:1;2475:13;2456:396;;;2533:20;;4672:9;2537:4;2533:20;;2528:3;2521:33;2588:6;2582:13;3904:4;4007:63;4055:14;3984:16;3978:23;4007:63;:::i;:::-;6795:4;4155:5;4151:16;4145:23;4125:43;;3904:4;6795;4192:3;4188:14;4181:38;4234:101;3904:4;3899:3;3895:14;4316:12;4234:101;:::i;:::-;2831:14;;;;2602:116;-1:-1;;;6475:14;;;;2503:1;2496:9;2456:396;;;2460:14;;4921:80;6795:4;4986:9;4982:18;4973:6;4921:80;:::i;:::-;5049:9;5043:4;5039:20;3904:4;5023:9;5019:18;5012:48;5074:76;5145:4;5136:6;5074:76;:::i;:::-;5066:84;4654:506;-1:-1;;;;;;;;;4654:506::o;5167:310::-;;5314:2;5335:17;5328:47;5389:78;5314:2;5303:9;5299:18;5453:6;5389:78;:::i;5285:192::-;525:3593:1;;;;;;"
            },
            "deployedBytecode": {
              "immutableReferences": {},
              "linkReferences": {},
              "object": "60806040523661000b57005b600080356001600160e01b03191681527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d60205260409020547fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c9081906001600160a01b0316806100b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100a890610a16565b60405180910390fd5b3660008037600080366000845af43d6000803e8080156100d0573d6000f35b3d6000fd5b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b60006101036100d5565b905060005b825181101561034557600083828151811061011f57fe5b60209081029190910101515190506001600160a01b038116156102dc576001600160a01b038116600090815260028401602052604090206001015461ffff168015801561018457506001600160a01b0382166000908152600285016020526040902054155b1561020e576101ab82604051806060016040528060248152602001610a4c60249139610391565b5060038301805460018082018355600092835260208084208301805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03871690811790915584526002870190526040909220909101805461ffff191661ffff83161790555b60005b85848151811061021d57fe5b602002602001015160200151518110156102d557600086858151811061023f57fe5b602002602001015160200151828151811061025657fe5b6020908102919091018101516001600160e01b031981166000908152600189019092526040909120549091506001600160a01b03168061029f5761029a85836103d2565b6102cb565b846001600160a01b0316816001600160a01b0316146102cb576102c1826104b2565b6102cb85836103d2565b5050600101610211565b505061033c565b60005b8483815181106102eb57fe5b6020026020010151602001515181101561033a5761033285848151811061030e57fe5b602002602001015160200151828151811061032557fe5b60200260200101516104b2565b6001016102df565b505b50600101610108565b5060408051600080825260208201928390527f39725dd03d877043d78fdfe186295e46e6277eb0a3498f2adb51071f42a2bdcb926103859286929161093f565b60405180910390a15050565b813b81816103cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100a891906109fc565b50505050565b60006103dc6100d5565b6001600160a01b03909316600081815260028501602090815260408083208054600180820183559185528385206008820401805460e08a901c600460078516026101000a90810263ffffffff909102199091161790556001600160e01b03199097168452909601905293909320805461ffff90931674010000000000000000000000000000000000000000027fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff73ffffffffffffffffffffffffffffffffffffffff199094169094179290921692909217905550565b60006104bc6100d5565b6001600160e01b0319831660009081526001820160205260409020549091506001600160a01b0316806104f0575050610849565b6001600160e01b0319831660009081526001830160209081526040808320546001600160a01b038516845260028601909252822080547401000000000000000000000000000000000000000090920461ffff16926000198301929091908390811061055757fe5b90600052602060002090600891828204019190066004029054906101000a900460e01b9050857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461067d576001600160a01b038416600090815260028601602052604090208054829190859081106105ea57fe5b600091825260208083206008830401805463ffffffff60079094166004026101000a938402191660e09590951c929092029390931790556001600160e01b031983168152600187019091526040902080547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000061ffff8616021790555b6001600160a01b038416600090815260028601602052604090208054806106a057fe5b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b0319881682526001870190526040902080547fffffffffffffffffffff0000000000000000000000000000000000000000000016905581610843576003850180546000198101916000918390811061072c57fe5b60009182526020808320909101546001600160a01b0389811680855260028c019093526040909320600101549216925061ffff9091169082146107d1578188600301828154811061077957fe5b6000918252602080832091909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03948516179055918416815260028a0190915260409020600101805461ffff191661ffff83161790555b876003018054806107de57fe5b600082815260208082208301600019908101805473ffffffffffffffffffffffffffffffffffffffff191690559092019092556001600160a01b038916825260028a0190526040812090610832828261084c565b50600101805461ffff191690555050505b50505050505b50565b50805460008255600701600890049060005260206000209081019061084991905b80821115610881576000815560010161086d565b5090565b6001600160a01b03169052565b6000815180845260208085019450808401835b838110156108cb5781516001600160e01b031916875295820195908201906001016108a5565b509495945050505050565b60008151808452815b818110156108fb576020818501810151868301820152016108df565b8181111561090c5782602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60006060820160608352808651808352608085019150602092506080838202860101838901855b838110156109cf577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80888403018552815160406109a4858351610885565b87820151915080888601526109bb81860183610892565b968801969450505090850190600101610966565b50506109dd84870189610885565b85810360408701526109ef81886108d6565b9998505050505050505050565b600060208252610a0f60208301846108d6565b9392505050565b6020808252818101527f4469616d6f6e643a2046756e6374696f6e20646f6573206e6f7420657869737460408201526060019056fe4c69624469616d6f6e644375743a204e657720666163657420686173206e6f20636f6465a264697066735822122012e7ed35b4a2847b23e9d014f8b7b3c729039992cbc88821d0901892d1f6ba3d64736f6c63430007010033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE PUSH2 0xB JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131C SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0xB1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA8 SWAP1 PUSH2 0xA16 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLDATASIZE PUSH1 0x0 DUP1 CALLDATACOPY PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x0 DUP5 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY DUP1 DUP1 ISZERO PUSH2 0xD0 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131C SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x103 PUSH2 0xD5 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x345 JUMPI PUSH1 0x0 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x11F JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD MLOAD SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x2DC JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xFFFF AND DUP1 ISZERO DUP1 ISZERO PUSH2 0x184 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP6 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO JUMPDEST ISZERO PUSH2 0x20E JUMPI PUSH2 0x1AB DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA4C PUSH1 0x24 SWAP2 CODECOPY PUSH2 0x391 JUMP JUMPDEST POP PUSH1 0x3 DUP4 ADD DUP1 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP4 SSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 DUP1 DUP5 KECCAK256 DUP4 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP5 MSTORE PUSH1 0x2 DUP8 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP3 KECCAK256 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF DUP4 AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x21D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x2D5 JUMPI PUSH1 0x0 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x23F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x256 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP10 ADD SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x29F JUMPI PUSH2 0x29A DUP6 DUP4 PUSH2 0x3D2 JUMP JUMPDEST PUSH2 0x2CB JUMP JUMPDEST DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2CB JUMPI PUSH2 0x2C1 DUP3 PUSH2 0x4B2 JUMP JUMPDEST PUSH2 0x2CB DUP6 DUP4 PUSH2 0x3D2 JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x211 JUMP JUMPDEST POP POP PUSH2 0x33C JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2EB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x33A JUMPI PUSH2 0x332 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x30E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x325 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x4B2 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x2DF JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x108 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP3 DUP4 SWAP1 MSTORE PUSH32 0x39725DD03D877043D78FDFE186295E46E6277EB0A3498F2ADB51071F42A2BDCB SWAP3 PUSH2 0x385 SWAP3 DUP7 SWAP3 SWAP2 PUSH2 0x93F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST DUP2 EXTCODESIZE DUP2 DUP2 PUSH2 0x3CC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA8 SWAP2 SWAP1 PUSH2 0x9FC JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3DC PUSH2 0xD5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 DUP6 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP4 SSTORE SWAP2 DUP6 MSTORE DUP4 DUP6 KECCAK256 PUSH1 0x8 DUP3 DIV ADD DUP1 SLOAD PUSH1 0xE0 DUP11 SWAP1 SHR PUSH1 0x4 PUSH1 0x7 DUP6 AND MUL PUSH2 0x100 EXP SWAP1 DUP2 MUL PUSH4 0xFFFFFFFF SWAP1 SWAP2 MUL NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP8 AND DUP5 MSTORE SWAP1 SWAP7 ADD SWAP1 MSTORE SWAP4 SWAP1 SWAP4 KECCAK256 DUP1 SLOAD PUSH2 0xFFFF SWAP1 SWAP4 AND PUSH21 0x10000000000000000000000000000000000000000 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 SWAP5 AND SWAP1 SWAP5 OR SWAP3 SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4BC PUSH2 0xD5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x4F0 JUMPI POP POP PUSH2 0x849 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE PUSH1 0x2 DUP7 ADD SWAP1 SWAP3 MSTORE DUP3 KECCAK256 DUP1 SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP3 DIV PUSH2 0xFFFF AND SWAP3 PUSH1 0x0 NOT DUP4 ADD SWAP3 SWAP1 SWAP2 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x557 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD PUSH1 0x4 MUL SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xE0 SHL SWAP1 POP DUP6 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x67D JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 SWAP2 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 0x5EA JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x8 DUP4 DIV ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x7 SWAP1 SWAP5 AND PUSH1 0x4 MUL PUSH2 0x100 EXP SWAP4 DUP5 MUL NOT AND PUSH1 0xE0 SWAP6 SWAP1 SWAP6 SHR SWAP3 SWAP1 SWAP3 MUL SWAP4 SWAP1 SWAP4 OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND DUP2 MSTORE PUSH1 0x1 DUP8 ADD SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH21 0x10000000000000000000000000000000000000000 PUSH2 0xFFFF DUP7 AND MUL OR SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP1 PUSH2 0x6A0 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 PUSH1 0x8 PUSH1 0x0 NOT SWAP1 SWAP5 ADD SWAP4 DUP5 DIV ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x4 PUSH1 0x7 DUP8 AND MUL PUSH2 0x100 EXP MUL NOT AND SWAP1 SSTORE SWAP2 SWAP1 SWAP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP9 AND DUP3 MSTORE PUSH1 0x1 DUP8 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000000000000000 AND SWAP1 SSTORE DUP2 PUSH2 0x843 JUMPI PUSH1 0x3 DUP6 ADD DUP1 SLOAD PUSH1 0x0 NOT DUP2 ADD SWAP2 PUSH1 0x0 SWAP2 DUP4 SWAP1 DUP2 LT PUSH2 0x72C JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND DUP1 DUP6 MSTORE PUSH1 0x2 DUP13 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 SWAP4 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP3 AND SWAP3 POP PUSH2 0xFFFF SWAP1 SWAP2 AND SWAP1 DUP3 EQ PUSH2 0x7D1 JUMPI DUP2 DUP9 PUSH1 0x3 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x779 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP2 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND OR SWAP1 SSTORE SWAP2 DUP5 AND DUP2 MSTORE PUSH1 0x2 DUP11 ADD SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF DUP4 AND OR SWAP1 SSTORE JUMPDEST DUP8 PUSH1 0x3 ADD DUP1 SLOAD DUP1 PUSH2 0x7DE JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 DUP4 ADD PUSH1 0x0 NOT SWAP1 DUP2 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SSTORE SWAP1 SWAP3 ADD SWAP1 SWAP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND DUP3 MSTORE PUSH1 0x2 DUP11 ADD SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 PUSH2 0x832 DUP3 DUP3 PUSH2 0x84C JUMP JUMPDEST POP PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND SWAP1 SSTORE POP POP POP JUMPDEST POP POP POP POP POP JUMPDEST POP JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x0 DUP3 SSTORE PUSH1 0x7 ADD PUSH1 0x8 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x849 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x881 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x86D JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x8CB JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8A5 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x8FB JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x8DF JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x90C JUMPI DUP3 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD PUSH1 0x60 DUP4 MSTORE DUP1 DUP7 MLOAD DUP1 DUP4 MSTORE PUSH1 0x80 DUP6 ADD SWAP2 POP PUSH1 0x20 SWAP3 POP PUSH1 0x80 DUP4 DUP3 MUL DUP7 ADD ADD DUP4 DUP10 ADD DUP6 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9CF JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80 DUP9 DUP5 SUB ADD DUP6 MSTORE DUP2 MLOAD PUSH1 0x40 PUSH2 0x9A4 DUP6 DUP4 MLOAD PUSH2 0x885 JUMP JUMPDEST DUP8 DUP3 ADD MLOAD SWAP2 POP DUP1 DUP9 DUP7 ADD MSTORE PUSH2 0x9BB DUP2 DUP7 ADD DUP4 PUSH2 0x892 JUMP JUMPDEST SWAP7 DUP9 ADD SWAP7 SWAP5 POP POP POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x966 JUMP JUMPDEST POP POP PUSH2 0x9DD DUP5 DUP8 ADD DUP10 PUSH2 0x885 JUMP JUMPDEST DUP6 DUP2 SUB PUSH1 0x40 DUP8 ADD MSTORE PUSH2 0x9EF DUP2 DUP9 PUSH2 0x8D6 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0xA0F PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x8D6 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4469616D6F6E643A2046756E6374696F6E20646F6573206E6F74206578697374 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP INVALID 0x4C PUSH10 0x624469616D6F6E644375 PUSH21 0x3A204E657720666163657420686173206E6F20636F PUSH5 0x65A2646970 PUSH7 0x735822122012E7 0xED CALLDATALOAD 0xB4 LOG2 DUP5 PUSH28 0x23E9D014F8B7B3C729039992CBC88821D0901892D1F6BA3D64736F6C PUSH4 0x43000701 STOP CALLER ",
              "sourceMap": "525:3593:1:-:0;;;;;;;;3334:43;3565:7;;-1:-1:-1;;;;;;3565:7:1;3535:38;;:29;:38;;;;;:51;411:45:10;;;;-1:-1:-1;;;;;3535:51:1;;3596:64;;;;;;;;;;;;:::i;:::-;;;;;;;;;3712:14;3709:1;3706;3693:34;3803:1;3800;3784:14;3781:1;3774:5;3767;3754:51;3839:16;3836:1;3833;3818:38;3876:6;3899:74;;;;4030:16;4027:1;4020:27;3899:74;3938:16;3935:1;3928:27;1484:197:10;411:45;;1632:43::o;967:2269:9:-;1046:43;1092:34;:32;:34::i;:::-;1046:80;;1141:18;1136:2030;1174:11;:18;1161:10;:31;1136:2030;;;1222:23;1248:11;1260:10;1248:23;;;;;;;;;;;;;;;;;;:36;;-1:-1:-1;;;;;;1341:29:9;;;1337:1819;;-1:-1:-1;;;;;1421:42:9;;1390:28;1421:42;;;:25;;;:42;;;;;-1:-1:-1;1421:63:9;;;;1568:25;;:101;;;;-1:-1:-1;;;;;;1597:42:9;;;;;;:25;;;:42;;;;;:67;:72;1568:101;1564:466;;;1693:72;1709:15;1693:72;;;;;;;;;;;;;;;;;:15;:72::i;:::-;-1:-1:-1;1810:17:9;;;:24;;1856:39;;;;;;-1:-1:-1;1856:39:9;;;;;;;;;;;-1:-1:-1;;1856:39:9;-1:-1:-1;;;;;1856:39:9;;;;;;;;1917:42;;:25;;;:42;;;;;;:63;;;:94;;-1:-1:-1;;1917:94:9;-1:-1:-1;1917:94:9;;;;;1564:466;2096:21;2091:753;2135:11;2147:10;2135:23;;;;;;;;;;;;;;:41;;;:48;2119:13;:64;2091:753;;;2224:15;2242:11;2254:10;2242:23;;;;;;;;;;;;;;:41;;;2284:13;2242:56;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;2339:39:9;;2320:16;2339:39;;;-1:-1:-1;2339:29:9;;:39;;;;;;;:52;2242:56;;-1:-1:-1;;;;;;2339:52:9;;2440:386;;2494:38;2506:15;2523:8;2494:11;:38::i;:::-;2440:386;;;-1:-1:-1;;;;;2626:27:9;;;;;;;2622:182;;2685:24;2700:8;2685:14;:24::i;:::-;2739:38;2751:15;2768:8;2739:11;:38::i;:::-;-1:-1:-1;;2185:15:9;;2091:753;;;;1337:1819;;;;2923:21;2918:224;2962:11;2974:10;2962:23;;;;;;;;;;;;;;:41;;;:48;2946:13;:64;2918:224;;;3051:72;3066:11;3078:10;3066:23;;;;;;;;;;;;;;:41;;;3108:13;3066:56;;;;;;;;;;;;;;3051:14;:72::i;:::-;3012:15;;2918:224;;;;1337:1819;-1:-1:-1;1194:12:9;;1136:2030;;;-1:-1:-1;3216:12:9;;;3212:1;3216:12;;;;;;;;;;3180:49;;;;3191:11;;3212:1;3180:49;:::i;:::-;;;;;;;;967:2269;;:::o;5843:254::-;6009:22;;6076:13;6058:16;6050:40;;;;;;;;;;;;;:::i;:::-;;5843:254;;;:::o;3242:519::-;3319:43;3365:34;:32;:34::i;:::-;-1:-1:-1;;;;;3436:36:9;;;;3409:24;3436:36;;;:25;;;:36;;;;;;;;:61;;-1:-1:-1;3507:70:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;3587:40:9;;;;;:29;;;;:40;;;;;;:65;;-1:-1:-1;;3587:65:9;;;;3662:92;;;;;;-1:-1:-1;3662:92:9;;;;;;;;-1:-1:-1;3242:519:9:o;3767:2070::-;3828:43;3874:34;:32;:34::i;:::-;-1:-1:-1;;;;;;3937:40:9;;3918:16;3937:40;;;-1:-1:-1;3937:29:9;;:40;;;;;:53;:29;;-1:-1:-1;;;;;;3937:53:9;;4065:59;;4107:7;;;;4065:59;-1:-1:-1;;;;;;4234:40:9;;4207:24;4234:40;;;-1:-1:-1;4234:29:9;;:40;;;;;;;;:65;-1:-1:-1;;;;;4340:35:9;;;;:25;;;:35;;;;;:60;;-1:-1:-1;4234:65:9;;;;;;-1:-1:-1;;4340:64:9;;;4207:24;;4340:35;:64;;4436:75;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4414:97;;4609:9;4593:25;;;:12;:25;;;;4589:251;;-1:-1:-1;;;;;4634:35:9;;;;;;:25;;;:35;;;;;:71;;4708:12;;4634:35;4688:16;;4634:71;;;;;;;;;;;;;;;;;;:86;;;:71;;;;;;:86;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;4734:43:9;;;;-1:-1:-1;4734:29:9;;:43;;;;;;:95;;;;;;;;;;;;4589:251;-1:-1:-1;;;;;4885:35:9;;;;;;:25;;;:35;;;;;:59;;;;;;;;;;;;;;;;-1:-1:-1;;4885:59:9;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;4961:40:9;;;;-1:-1:-1;4961:29:9;;:40;;;;;4954:47;;;;;;5096:25;5092:739;;5263:17;;;:24;;-1:-1:-1;;5263:28:9;;;-1:-1:-1;;5263:28:9;;5332:43;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5420:35:9;;;;;;:25;;;:35;;;;;;;-1:-1:-1;5420:56:9;;5332:43;;;-1:-1:-1;5420:56:9;;;;;5494:28;;5490:238;;5584:16;5542:2;:17;;5560:20;5542:39;;;;;;;;;;;;;;;;;;;;:58;;-1:-1:-1;;5542:58:9;-1:-1:-1;;;;;5542:58:9;;;;;;5618:43;;;;;:25;;;:43;;;;;;-1:-1:-1;5618:64:9;:95;;-1:-1:-1;;5618:95:9;-1:-1:-1;5618:95:9;;;;;5490:238;5741:2;:17;;:23;;;;;;;;;;;;;;;-1:-1:-1;;5741:23:9;;;;;;;-1:-1:-1;;5741:23:9;;;;;;;;;-1:-1:-1;;;;;5785:35:9;;;;:25;;;:35;;;;;;5778:42;5785:35;5741:23;5778:42;:::i;:::-;-1:-1:-1;5778:42:9;;;;-1:-1:-1;;5778:42:9;;;-1:-1:-1;;;5092:739:9;3767:2070;;;;;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;433:142::-;-1:-1;;;;;8030:54;512:58;;506:69::o;721:662::-;;901:5;6276:12;7111:6;7106:3;7099:19;7148:4;;7143:3;7139:14;913:82;;7148:4;1065:5;5951:14;-1:-1;1104:257;1129:6;1126:1;1123:13;1104:257;;;1190:13;;-1:-1;;;;;;7878:78;2547:36;;155:14;;;;6828;;;;-1:-1;1144:9;1104:257;;;-1:-1;1367:10;;833:550;-1:-1;;;;;833:550::o;2595:343::-;;2737:5;6276:12;7111:6;7106:3;7099:19;-1:-1;8548:101;8562:6;8559:1;8556:13;8548:101;;;7148:4;8629:11;;;;;8623:18;8610:11;;;;;8603:39;8577:10;8548:101;;;8664:6;8661:1;8658:13;8655:2;;;-1:-1;7148:4;8720:6;7143:3;8711:16;;8704:27;8655:2;-1:-1;8840:2;8820:14;8836:7;8816:28;2894:39;;;;7148:4;2894:39;;2685:253;-1:-1;;2685:253::o;4310:780::-;;4613:2;4602:9;4598:18;4613:2;4634:17;4627:47;4688:152;1715:5;6276:12;7111:6;7106:3;7099:19;7139:14;4602:9;7139:14;1727:115;;7148:4;;;7139:14;7148:4;1899:6;1895:17;4602:9;1886:27;;7148:4;2006:5;5951:14;-1:-1;2045:396;2070:6;2067:1;2064:13;2045:396;;;2122:20;4602:9;2126:4;2122:20;;2117:3;2110:33;2177:6;2171:13;3834:4;3937:63;3985:14;3914:16;3908:23;3937:63;:::i;:::-;7148:4;4085:5;4081:16;4075:23;4055:43;;3834:4;7148;4122:3;4118:14;4111:38;4164:101;3834:4;3829:3;3825:14;4246:12;4164:101;:::i;:::-;2420:14;;;;2191:116;-1:-1;;;6828:14;;;;2092:1;2085:9;2045:396;;;2049:14;;4851:80;7148:4;4916:9;4912:18;4903:6;4851:80;:::i;:::-;4979:9;4973:4;4969:20;3834:4;4953:9;4949:18;4942:48;5004:76;5075:4;5066:6;5004:76;:::i;:::-;4996:84;4584:506;-1:-1;;;;;;;;;4584:506::o;5097:310::-;;5244:2;5265:17;5258:47;5319:78;5244:2;5233:9;5229:18;5383:6;5319:78;:::i;:::-;5311:86;5215:192;-1:-1;;;5215:192::o;5414:416::-;5614:2;5628:47;;;5599:18;;;7099:19;3560:34;7139:14;;;3540:55;3614:12;;;5585:245::o"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "545000",
                "executionCost": "infinite",
                "totalCost": "infinite"
              },
              "external": {
                "": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solc_0.7/diamond/Diamond.sol\":\"Diamond\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"solc_0.7/diamond/Diamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge\\n*\\n* Implementation of an example of a diamond.\\n/******************************************************************************/\\n\\nimport \\\"./libraries/LibDiamondStorage.sol\\\";\\nimport \\\"./libraries/LibDiamondCut.sol\\\";\\nimport \\\"./facets/OwnershipFacet.sol\\\";\\nimport \\\"./facets/DiamondCutFacet.sol\\\";\\nimport \\\"./facets/DiamondLoupeFacet.sol\\\";\\n\\ncontract Diamond {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor(address owner) payable {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        ds.contractOwner = owner;\\n        emit OwnershipTransferred(address(0), owner);\\n\\n        DiamondCutFacet diamondCutFacet = new DiamondCutFacet();\\n\\n        DiamondLoupeFacet diamondLoupeFacet = new DiamondLoupeFacet();\\n\\n        // Create a OwnershipFacet contract which implements the ERC-173 Ownership interface\\n        OwnershipFacet ownershipFacet = new OwnershipFacet();\\n\\n        IDiamondCut.Facet[] memory diamondCut = new IDiamondCut.Facet[](3);\\n\\n        // adding diamondCut function\\n        diamondCut[0].facetAddress = address(diamondCutFacet);\\n        diamondCut[0].functionSelectors = new bytes4[](1);\\n        diamondCut[0].functionSelectors[0] = DiamondCutFacet.diamondCut.selector;\\n\\n        // adding diamond loupe functions\\n        diamondCut[1].facetAddress = address(diamondLoupeFacet);\\n        diamondCut[1].functionSelectors = new bytes4[](5);\\n        diamondCut[1].functionSelectors[0] = DiamondLoupeFacet.facetFunctionSelectors.selector;\\n        diamondCut[1].functionSelectors[1] = DiamondLoupeFacet.facets.selector;\\n        diamondCut[1].functionSelectors[2] = DiamondLoupeFacet.facetAddress.selector;\\n        diamondCut[1].functionSelectors[3] = DiamondLoupeFacet.facetAddresses.selector;\\n        diamondCut[1].functionSelectors[4] = DiamondLoupeFacet.supportsInterface.selector;\\n\\n        // adding ownership functions\\n        diamondCut[2].facetAddress = address(ownershipFacet);\\n        diamondCut[2].functionSelectors = new bytes4[](2);\\n        diamondCut[2].functionSelectors[0] = OwnershipFacet.transferOwnership.selector;\\n        diamondCut[2].functionSelectors[1] = OwnershipFacet.owner.selector;\\n\\n        // execute non-standard internal diamondCut function to add functions\\n        LibDiamondCut.diamondCut(diamondCut);\\n\\n        // adding ERC165 data\\n        // ERC165\\n        ds.supportedInterfaces[IERC165.supportsInterface.selector] = true;\\n\\n        // DiamondCut\\n        ds.supportedInterfaces[DiamondCutFacet.diamondCut.selector] = true;\\n\\n        // DiamondLoupe\\n        bytes4 interfaceID = IDiamondLoupe.facets.selector ^\\n            IDiamondLoupe.facetFunctionSelectors.selector ^\\n            IDiamondLoupe.facetAddresses.selector ^\\n            IDiamondLoupe.facetAddress.selector;\\n        ds.supportedInterfaces[interfaceID] = true;\\n\\n        // ERC173\\n        ds.supportedInterfaces[IERC173.transferOwnership.selector ^ IERC173.owner.selector] = true;\\n    }\\n\\n    // Find facet for function that is called and execute the\\n    // function if a facet is found and return any value.\\n    fallback() external payable {\\n        LibDiamondStorage.DiamondStorage storage ds;\\n        bytes32 position = LibDiamondStorage.DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n        address facet = ds.selectorToFacetAndPosition[msg.sig].facetAddress;\\n        require(facet != address(0), \\\"Diamond: Function does not exist\\\");\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\\n            returndatacopy(0, 0, returndatasize())\\n            switch result\\n                case 0 {\\n                    revert(0, returndatasize())\\n                }\\n                default {\\n                    return(0, returndatasize())\\n                }\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x5d2e73e1c35ca41c6164e04a56398470a65f7c259613dc85b786a4bece4f781d\",\"license\":\"MIT\"},\"solc_0.7/diamond/facets/DiamondCutFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n*\\n* Implementation of diamondCut external function.\\n/******************************************************************************/\\n\\nimport \\\"../libraries/LibDiamondStorage.sol\\\";\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\nimport \\\"../libraries/LibDiamondCut.sol\\\";\\n\\ncontract DiamondCutFacet is IDiamondCut {\\n    // Standard diamondCut external function\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        Facet[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external override {\\n        externalCut(_diamondCut);\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"DiamondCutFacet: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"DiamondCutFacet: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                LibDiamondCut.hasContractCode(_init, \\\"DiamondCutFacet: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"DiamondCutFacet: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    // diamondCut helper function\\n    // This code is almost the same as the internal diamondCut function,\\n    // except it is using 'Facets[] calldata _diamondCut' instead of\\n    // 'Facet[] memory _diamondCut', and it does not issue the DiamondCut event.\\n    // The code is duplicated to prevent copying calldata to memory which\\n    // causes a Solidity error for two dimensional arrays.\\n    function externalCut(Facet[] calldata _diamondCut) internal {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        require(msg.sender == ds.contractOwner, \\\"Must own the contract.\\\");\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            address newFacetAddress = _diamondCut[facetIndex].facetAddress;\\n            // add or replace function\\n            if (newFacetAddress != address(0)) {\\n                uint256 facetAddressPosition = ds.facetFunctionSelectors[newFacetAddress].facetAddressPosition;\\n                // add new facet address if it does not exist\\n                if (facetAddressPosition == 0 && ds.facetFunctionSelectors[newFacetAddress].functionSelectors.length == 0) {\\n                    LibDiamondCut.hasContractCode(newFacetAddress, \\\"DiamondCutFacet: New facet has no code\\\");\\n                    facetAddressPosition = ds.facetAddresses.length;\\n                    ds.facetAddresses.push(newFacetAddress);\\n                    ds.facetFunctionSelectors[newFacetAddress].facetAddressPosition = uint16(facetAddressPosition);\\n                }\\n                // add or replace selectors\\n                for (uint256 selectorIndex; selectorIndex < _diamondCut[facetIndex].functionSelectors.length; selectorIndex++) {\\n                    bytes4 selector = _diamondCut[facetIndex].functionSelectors[selectorIndex];\\n                    address oldFacet = ds.selectorToFacetAndPosition[selector].facetAddress;\\n                    // add\\n                    if (oldFacet == address(0)) {\\n                        LibDiamondCut.addSelector(newFacetAddress, selector);\\n                    } else {\\n                        // replace\\n                        if (oldFacet != newFacetAddress) {\\n                            LibDiamondCut.removeSelector(selector);\\n                            LibDiamondCut.addSelector(newFacetAddress, selector);\\n                        }\\n                    }\\n                }\\n            } else {\\n                // remove selectors\\n                for (uint256 selectorIndex; selectorIndex < _diamondCut[facetIndex].functionSelectors.length; selectorIndex++) {\\n                    LibDiamondCut.removeSelector(_diamondCut[facetIndex].functionSelectors[selectorIndex]);\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe5cefda560bdf00d7e412ef747e28f2076d07b32221ccdfaa607aaab0ca30029\",\"license\":\"MIT\"},\"solc_0.7/diamond/facets/DiamondLoupeFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n*\\n* Implementation of DiamondLoupe interface.\\n/******************************************************************************/\\n\\nimport \\\"../libraries/LibDiamondStorage.sol\\\";\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\nimport \\\"../interfaces/IDiamondLoupe.sol\\\";\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\ncontract DiamondLoupeFacet is IDiamondLoupe, IERC165 {\\n    // Diamond Loupe Functions\\n    ////////////////////////////////////////////////////////////////////\\n    /// These functions are expected to be called frequently\\n    /// by tools. Therefore the return values are tightly\\n    /// packed for efficiency. That means no padding with zeros.\\n\\n    // struct Facet {\\n    //     address facetAddress;\\n    //     bytes4[] functionSelectors;\\n    // }\\n\\n    /// @notice Gets all facets and their selectors.\\n    /// @return facets_ Facet\\n    function facets() external override view returns (Facet[] memory facets_) {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        uint256 numFacets = ds.facetAddresses.length;\\n        facets_ = new Facet[](numFacets);\\n        for (uint256 i; i < numFacets; i++) {\\n            address facetAddress = ds.facetAddresses[i];\\n            facets_[i].facetAddress = facetAddress;\\n            facets_[i].functionSelectors = ds.facetFunctionSelectors[facetAddress].functionSelectors;\\n        }\\n    }\\n\\n    /// @notice Gets all the function selectors provided by a facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet) external override view returns (bytes4[] memory facetFunctionSelectors_) {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        facetFunctionSelectors_ = ds.facetFunctionSelectors[_facet].functionSelectors;\\n    }\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external override view returns (address[] memory facetAddresses_) {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        facetAddresses_ = ds.facetAddresses;\\n    }\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external override view returns (address facetAddress_) {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        facetAddress_ = ds.selectorToFacetAndPosition[_functionSelector].facetAddress;\\n    }\\n\\n    // This implements ERC-165.\\n    function supportsInterface(bytes4 _interfaceId) external override view returns (bool) {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        return ds.supportedInterfaces[_interfaceId];\\n    }\\n}\\n\",\"keccak256\":\"0x4b7366bd3fe648aaa728031852007fa2fb83da852a99fb9914ca00ace29453a0\",\"license\":\"MIT\"},\"solc_0.7/diamond/facets/OwnershipFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n/******************************************************************************/\\n\\nimport \\\"../libraries/LibDiamondStorage.sol\\\";\\nimport \\\"../interfaces/IERC173.sol\\\";\\n\\ncontract OwnershipFacet is IERC173 {\\n    function transferOwnership(address newOwner) external override {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        address currentOwner = ds.contractOwner;\\n        require(msg.sender == currentOwner, \\\"Must own the contract.\\\");\\n        ds.contractOwner = newOwner;\\n        emit OwnershipTransferred(currentOwner, newOwner);\\n    }\\n\\n    function owner() external override view returns (address) {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        return ds.contractOwner;\\n    }\\n}\\n\",\"keccak256\":\"0xe09014d34261a3f4275e5a8e0f7081fe576bc0e4cb15a4760df156a9b423e579\",\"license\":\"MIT\"},\"solc_0.7/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        Facet[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(Facet[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xba9cbedda8b486e17512639ee5ca6a4de1638b55c26b130e61cbbaa632acdef5\",\"license\":\"MIT\"},\"solc_0.7/diamond/interfaces/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n/******************************************************************************/\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\n}\\n\",\"keccak256\":\"0xde77c3530df288849ad2cc13a6a1a00b0216c019875b153a929b3e770667f07d\",\"license\":\"MIT\"},\"solc_0.7/diamond/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc19b99fbeaeb943b6d12e6d631b6ae1738aaa498ee49f67caaccc6238fd0d458\",\"license\":\"MIT\"},\"solc_0.7/diamond/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n/* is ERC165 */\\ninterface IERC173 {\\n    /// @dev This emits when ownership of a contract changes.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Get the address of the owner\\n    /// @return The address of the owner.\\n    function owner() external view returns (address);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0xdb5c5f069a9337daa33b88c6c9fe72edb31b9ff91bf4a923caf02cb9e95d4b12\",\"license\":\"MIT\"},\"solc_0.7/diamond/libraries/LibDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n*\\n* Implementation of internal diamondCut function.\\n/******************************************************************************/\\n\\nimport \\\"./LibDiamondStorage.sol\\\";\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamondCut {\\n    event DiamondCut(IDiamondCut.Facet[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Non-standard internal function version of diamondCut\\n    // This code is almost the same as externalCut, except it is using\\n    // 'Facet[] memory _diamondCut' instead of 'Facet[] calldata _diamondCut'\\n    // and it DOES issue the DiamondCut event\\n    // The code is duplicated to prevent copying calldata to memory which\\n    // causes a Solidity error for a two dimensional array.\\n    function diamondCut(IDiamondCut.Facet[] memory _diamondCut) internal {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            address newFacetAddress = _diamondCut[facetIndex].facetAddress;\\n            // add or replace function\\n            if (newFacetAddress != address(0)) {\\n                uint256 facetAddressPosition = ds.facetFunctionSelectors[newFacetAddress].facetAddressPosition;\\n                // add new facet address if it does not exist\\n                if (facetAddressPosition == 0 && ds.facetFunctionSelectors[newFacetAddress].functionSelectors.length == 0) {\\n                    hasContractCode(newFacetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n                    facetAddressPosition = ds.facetAddresses.length;\\n                    ds.facetAddresses.push(newFacetAddress);\\n                    ds.facetFunctionSelectors[newFacetAddress].facetAddressPosition = uint16(facetAddressPosition);\\n                }\\n                // add or replace selectors\\n                for (uint256 selectorIndex; selectorIndex < _diamondCut[facetIndex].functionSelectors.length; selectorIndex++) {\\n                    bytes4 selector = _diamondCut[facetIndex].functionSelectors[selectorIndex];\\n                    address oldFacet = ds.selectorToFacetAndPosition[selector].facetAddress;\\n                    // add\\n                    if (oldFacet == address(0)) {\\n                        addSelector(newFacetAddress, selector);\\n                    } else {\\n                        // replace\\n                        if (oldFacet != newFacetAddress) {\\n                            removeSelector(selector);\\n                            addSelector(newFacetAddress, selector);\\n                        }\\n                    }\\n                }\\n            } else {\\n                // remove selectors\\n                for (uint256 selectorIndex; selectorIndex < _diamondCut[facetIndex].functionSelectors.length; selectorIndex++) {\\n                    removeSelector(_diamondCut[facetIndex].functionSelectors[selectorIndex]);\\n                }\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, address(0), new bytes(0));\\n    }\\n\\n    function addSelector(address _newFacet, bytes4 _selector) internal {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        uint256 selectorPosition = ds.facetFunctionSelectors[_newFacet].functionSelectors.length;\\n        ds.facetFunctionSelectors[_newFacet].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _newFacet;\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = uint16(selectorPosition);\\n    }\\n\\n    function removeSelector(bytes4 _selector) internal {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        address oldFacet = ds.selectorToFacetAndPosition[_selector].facetAddress;\\n        // if function does not exist then do nothing and return\\n        if (oldFacet == address(0)) {\\n            return;\\n        }\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[oldFacet].functionSelectors.length - 1;\\n        bytes4 lastSelector = ds.facetFunctionSelectors[oldFacet].functionSelectors[lastSelectorPosition];\\n        // if not the same then replace _selector with lastSelector\\n        if (lastSelector != _selector) {\\n            ds.facetFunctionSelectors[oldFacet].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint16(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[oldFacet].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[oldFacet].facetAddressPosition;\\n            if (oldFacet != lastFacetAddress) {\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = uint16(facetAddressPosition);\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[oldFacet];\\n        }\\n    }\\n\\n    function hasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2b0552b7626a43189f62e6b8e7ac6e257a0d6ebe6f03a44d2da12c931a96155b\",\"license\":\"MIT\"},\"solc_0.7/diamond/libraries/LibDiamondStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n/******************************************************************************/\\n\\nlibrary LibDiamondStorage {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // owner of the contract\\n        address contractOwner;\\n        // maps function selector to the facet address and        \\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe775d2cb83a52f9bc6341b6331acd86527a7870dca3193cfcad3db6206017ed2\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "solc_0.7/diamond/facets/DiamondCutFacet.sol": {
        "DiamondCutFacet": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "facetAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes4[]",
                      "name": "functionSelectors",
                      "type": "bytes4[]"
                    }
                  ],
                  "indexed": false,
                  "internalType": "struct IDiamondCut.Facet[]",
                  "name": "_diamondCut",
                  "type": "tuple[]"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "_init",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "bytes",
                  "name": "_calldata",
                  "type": "bytes"
                }
              ],
              "name": "DiamondCut",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "facetAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes4[]",
                      "name": "functionSelectors",
                      "type": "bytes4[]"
                    }
                  ],
                  "internalType": "struct IDiamondCut.Facet[]",
                  "name": "_diamondCut",
                  "type": "tuple[]"
                },
                {
                  "internalType": "address",
                  "name": "_init",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "_calldata",
                  "type": "bytes"
                }
              ],
              "name": "diamondCut",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {
              "diamondCut((address,bytes4[])[],address,bytes)": {
                "params": {
                  "_calldata": "A function call, including function selector and arguments                  _calldata is executed with delegatecall on _init",
                  "_diamondCut": "Contains the facet addresses and function selectors",
                  "_init": "The address of the contract or facet to execute _calldata"
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b50610f3c806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063e712b4e114610030575b600080fd5b61004361003e366004610a05565b610045565b005b61004f85856101c2565b7f39725dd03d877043d78fdfe186295e46e6277eb0a3498f2adb51071f42a2bdcb8585858585604051610086959493929190610b83565b60405180910390a16001600160a01b0383166100c85780156100c35760405162461bcd60e51b81526004016100ba90610cea565b60405180910390fd5b6101bb565b806100e55760405162461bcd60e51b81526004016100ba90610d47565b6001600160a01b038316301461011757610117836040518060600160405280602a8152602001610eb7602a91396104b6565b60006060846001600160a01b03168484604051610135929190610b73565b600060405180830381855af49150503d8060008114610170576040519150601f19603f3d011682016040523d82523d6000602084013e610175565b606091505b5091509150816101b8578051156101a0578060405162461bcd60e51b81526004016100ba9190610c60565b60405162461bcd60e51b81526004016100ba90610da4565b50505b5050505050565b60006101cc6104d7565b80549091506001600160a01b031633146101f85760405162461bcd60e51b81526004016100ba90610cb3565b60005b828110156104b057600084848381811061021157fe5b90506020028101906102239190610e4f565b6102319060208101906109e3565b90506001600160a01b03811615610412576001600160a01b038116600090815260028401602052604090206001015461ffff168015801561028a57506001600160a01b0382166000908152600285016020526040902054155b15610314576102b182604051806060016040528060268152602001610ee1602691396104b6565b5060038301805460018082018355600092835260208084208301805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03871690811790915584526002870190526040909220909101805461ffff191661ffff83161790555b60005b86868581811061032357fe5b90506020028101906103359190610e4f565b610343906020810190610e01565b905081101561040b57600087878681811061035a57fe5b905060200281019061036c9190610e4f565b61037a906020810190610e01565b8381811061038457fe5b90506020020160208101906103999190610ad8565b6001600160e01b0319811660009081526001880160205260409020549091506001600160a01b0316806103d5576103d085836104fb565b610401565b846001600160a01b0316816001600160a01b031614610401576103f7826105db565b61040185836104fb565b5050600101610317565b50506104a7565b60005b85858481811061042157fe5b90506020028101906104339190610e4f565b610441906020810190610e01565b90508110156104a55761049d86868581811061045957fe5b905060200281019061046b9190610e4f565b610479906020810190610e01565b8381811061048357fe5b90506020020160208101906104989190610ad8565b6105db565b600101610415565b505b506001016101fb565b50505050565b813b81816104b05760405162461bcd60e51b81526004016100ba9190610c60565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b60006105056104d7565b6001600160a01b03909316600081815260028501602090815260408083208054600180820183559185528385206008820401805460e08a901c600460078516026101000a90810263ffffffff909102199091161790556001600160e01b03199097168452909601905293909320805461ffff90931674010000000000000000000000000000000000000000027fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff73ffffffffffffffffffffffffffffffffffffffff199094169094179290921692909217905550565b60006105e56104d7565b6001600160e01b0319831660009081526001820160205260409020549091506001600160a01b031680610619575050610972565b6001600160e01b0319831660009081526001830160209081526040808320546001600160a01b038516845260028601909252822080547401000000000000000000000000000000000000000090920461ffff16926000198301929091908390811061068057fe5b90600052602060002090600891828204019190066004029054906101000a900460e01b9050857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146107a6576001600160a01b0384166000908152600286016020526040902080548291908590811061071357fe5b600091825260208083206008830401805463ffffffff60079094166004026101000a938402191660e09590951c929092029390931790556001600160e01b031983168152600187019091526040902080547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000061ffff8616021790555b6001600160a01b038416600090815260028601602052604090208054806107c957fe5b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b0319881682526001870190526040902080547fffffffffffffffffffff000000000000000000000000000000000000000000001690558161096c576003850180546000198101916000918390811061085557fe5b60009182526020808320909101546001600160a01b0389811680855260028c019093526040909320600101549216925061ffff9091169082146108fa57818860030182815481106108a257fe5b6000918252602080832091909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03948516179055918416815260028a0190915260409020600101805461ffff191661ffff83161790555b8760030180548061090757fe5b600082815260208082208301600019908101805473ffffffffffffffffffffffffffffffffffffffff191690559092019092556001600160a01b038916825260028a019052604081209061095b8282610975565b50600101805461ffff191690555050505b50505050505b50565b50805460008255600701600890049060005260206000209081019061097291905b808211156109aa5760008155600101610996565b5090565b80356001600160a01b03811681146109c557600080fd5b92915050565b80356001600160e01b0319811681146109c557600080fd5b6000602082840312156109f4578081fd5b6109fe83836109ae565b9392505050565b600080600080600060608688031215610a1c578081fd5b853567ffffffffffffffff80821115610a33578283fd5b818801915088601f830112610a46578283fd5b813581811115610a54578384fd5b60208a818284028601011115610a68578485fd5b8084019850819750610a7c8b828c016109ae565b965060408a0135935082841115610a91578485fd5b838a0193508a601f850112610aa4578485fd5b8335915082821115610ab4578485fd5b8a81838601011115610ac4578485fd5b979a96995094975050909401935090919050565b600060208284031215610ae9578081fd5b6109fe83836109cb565b6001600160a01b03169052565b60008284526020808501945082825b85811015610b3e578282016001600160e01b0319610b2d82856109cb565b168852968301969150600101610b0f565b509495945050505050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b6000828483379101908152919050565b606080825281018590526000602060808084019082890285010189845b8a811015610c31577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808784030184528135603e198d3603018112610be2578687fd5b8c016040868201610bfc86610bf783866109ae565b610af3565b610c068184610e6e565b935090508188870152610c1c8287018483610b00565b96880196955050509185019150600101610ba0565b5050610c3f83860189610af3565b8481036040860152610c52818789610b49565b9a9950505050505050505050565b6000602080835283518082850152825b81811015610c8c57858101830151858201604001528201610c70565b81811115610c9d5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526016908201527f4d757374206f776e2074686520636f6e74726163742e00000000000000000000604082015260600190565b6020808252603e908201527f4469616d6f6e6443757446616365743a205f696e69742069732061646472657360408201527f73283029206275745f63616c6c64617461206973206e6f7420656d7074790000606082015260800190565b6020808252603f908201527f4469616d6f6e6443757446616365743a205f63616c6c6461746120697320656d60408201527f70747920627574205f696e6974206973206e6f74206164647265737328302900606082015260800190565b60208082526028908201527f4469616d6f6e6443757446616365743a205f696e69742066756e6374696f6e2060408201527f7265766572746564000000000000000000000000000000000000000000000000606082015260800190565b6000808335601e19843603018112610e17578283fd5b83018035915067ffffffffffffffff821115610e31578283fd5b6020908101925081023603821315610e4857600080fd5b9250929050565b60008235603e19833603018112610e64578182fd5b9190910192915050565b6000808335601e19843603018112610e84578283fd5b830160208101925035905067ffffffffffffffff811115610ea457600080fd5b602081023603831315610e4857600080fdfe4469616d6f6e6443757446616365743a205f696e6974206164647265737320686173206e6f20636f64654469616d6f6e6443757446616365743a204e657720666163657420686173206e6f20636f6465a2646970667358221220d549925be7f162ad8bee0e5faaf2f9a9e548ed65080d804fbd4dcdb3aa77977264736f6c63430007010033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF3C DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xE712B4E1 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x3E CALLDATASIZE PUSH1 0x4 PUSH2 0xA05 JUMP JUMPDEST PUSH2 0x45 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4F DUP6 DUP6 PUSH2 0x1C2 JUMP JUMPDEST PUSH32 0x39725DD03D877043D78FDFE186295E46E6277EB0A3498F2ADB51071F42A2BDCB DUP6 DUP6 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x86 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB83 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xC8 JUMPI DUP1 ISZERO PUSH2 0xC3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBA SWAP1 PUSH2 0xCEA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1BB JUMP JUMPDEST DUP1 PUSH2 0xE5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBA SWAP1 PUSH2 0xD47 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ADDRESS EQ PUSH2 0x117 JUMPI PUSH2 0x117 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xEB7 PUSH1 0x2A SWAP2 CODECOPY PUSH2 0x4B6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x135 SWAP3 SWAP2 SWAP1 PUSH2 0xB73 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x170 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x175 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x1B8 JUMPI DUP1 MLOAD ISZERO PUSH2 0x1A0 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBA SWAP2 SWAP1 PUSH2 0xC60 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBA SWAP1 PUSH2 0xDA4 JUMP JUMPDEST POP POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CC PUSH2 0x4D7 JUMP JUMPDEST DUP1 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBA SWAP1 PUSH2 0xCB3 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x4B0 JUMPI PUSH1 0x0 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x211 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x223 SWAP2 SWAP1 PUSH2 0xE4F JUMP JUMPDEST PUSH2 0x231 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x9E3 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x412 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xFFFF AND DUP1 ISZERO DUP1 ISZERO PUSH2 0x28A JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP6 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO JUMPDEST ISZERO PUSH2 0x314 JUMPI PUSH2 0x2B1 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xEE1 PUSH1 0x26 SWAP2 CODECOPY PUSH2 0x4B6 JUMP JUMPDEST POP PUSH1 0x3 DUP4 ADD DUP1 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP4 SSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 DUP1 DUP5 KECCAK256 DUP4 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP5 MSTORE PUSH1 0x2 DUP8 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP3 KECCAK256 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF DUP4 AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x0 JUMPDEST DUP7 DUP7 DUP6 DUP2 DUP2 LT PUSH2 0x323 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x335 SWAP2 SWAP1 PUSH2 0xE4F JUMP JUMPDEST PUSH2 0x343 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xE01 JUMP JUMPDEST SWAP1 POP DUP2 LT ISZERO PUSH2 0x40B JUMPI PUSH1 0x0 DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0x35A JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x36C SWAP2 SWAP1 PUSH2 0xE4F JUMP JUMPDEST PUSH2 0x37A SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xE01 JUMP JUMPDEST DUP4 DUP2 DUP2 LT PUSH2 0x384 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x399 SWAP2 SWAP1 PUSH2 0xAD8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP9 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x3D5 JUMPI PUSH2 0x3D0 DUP6 DUP4 PUSH2 0x4FB JUMP JUMPDEST PUSH2 0x401 JUMP JUMPDEST DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x401 JUMPI PUSH2 0x3F7 DUP3 PUSH2 0x5DB JUMP JUMPDEST PUSH2 0x401 DUP6 DUP4 PUSH2 0x4FB JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x317 JUMP JUMPDEST POP POP PUSH2 0x4A7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x421 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x433 SWAP2 SWAP1 PUSH2 0xE4F JUMP JUMPDEST PUSH2 0x441 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xE01 JUMP JUMPDEST SWAP1 POP DUP2 LT ISZERO PUSH2 0x4A5 JUMPI PUSH2 0x49D DUP7 DUP7 DUP6 DUP2 DUP2 LT PUSH2 0x459 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x46B SWAP2 SWAP1 PUSH2 0xE4F JUMP JUMPDEST PUSH2 0x479 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xE01 JUMP JUMPDEST DUP4 DUP2 DUP2 LT PUSH2 0x483 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x498 SWAP2 SWAP1 PUSH2 0xAD8 JUMP JUMPDEST PUSH2 0x5DB JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x415 JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1FB JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST DUP2 EXTCODESIZE DUP2 DUP2 PUSH2 0x4B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBA SWAP2 SWAP1 PUSH2 0xC60 JUMP JUMPDEST PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131C SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x505 PUSH2 0x4D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 DUP6 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP4 SSTORE SWAP2 DUP6 MSTORE DUP4 DUP6 KECCAK256 PUSH1 0x8 DUP3 DIV ADD DUP1 SLOAD PUSH1 0xE0 DUP11 SWAP1 SHR PUSH1 0x4 PUSH1 0x7 DUP6 AND MUL PUSH2 0x100 EXP SWAP1 DUP2 MUL PUSH4 0xFFFFFFFF SWAP1 SWAP2 MUL NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP8 AND DUP5 MSTORE SWAP1 SWAP7 ADD SWAP1 MSTORE SWAP4 SWAP1 SWAP4 KECCAK256 DUP1 SLOAD PUSH2 0xFFFF SWAP1 SWAP4 AND PUSH21 0x10000000000000000000000000000000000000000 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 SWAP5 AND SWAP1 SWAP5 OR SWAP3 SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5E5 PUSH2 0x4D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x619 JUMPI POP POP PUSH2 0x972 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE PUSH1 0x2 DUP7 ADD SWAP1 SWAP3 MSTORE DUP3 KECCAK256 DUP1 SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP3 DIV PUSH2 0xFFFF AND SWAP3 PUSH1 0x0 NOT DUP4 ADD SWAP3 SWAP1 SWAP2 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x680 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD PUSH1 0x4 MUL SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xE0 SHL SWAP1 POP DUP6 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x7A6 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 SWAP2 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 0x713 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x8 DUP4 DIV ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x7 SWAP1 SWAP5 AND PUSH1 0x4 MUL PUSH2 0x100 EXP SWAP4 DUP5 MUL NOT AND PUSH1 0xE0 SWAP6 SWAP1 SWAP6 SHR SWAP3 SWAP1 SWAP3 MUL SWAP4 SWAP1 SWAP4 OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND DUP2 MSTORE PUSH1 0x1 DUP8 ADD SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH21 0x10000000000000000000000000000000000000000 PUSH2 0xFFFF DUP7 AND MUL OR SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP1 PUSH2 0x7C9 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 PUSH1 0x8 PUSH1 0x0 NOT SWAP1 SWAP5 ADD SWAP4 DUP5 DIV ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x4 PUSH1 0x7 DUP8 AND MUL PUSH2 0x100 EXP MUL NOT AND SWAP1 SSTORE SWAP2 SWAP1 SWAP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP9 AND DUP3 MSTORE PUSH1 0x1 DUP8 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000000000000000 AND SWAP1 SSTORE DUP2 PUSH2 0x96C JUMPI PUSH1 0x3 DUP6 ADD DUP1 SLOAD PUSH1 0x0 NOT DUP2 ADD SWAP2 PUSH1 0x0 SWAP2 DUP4 SWAP1 DUP2 LT PUSH2 0x855 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND DUP1 DUP6 MSTORE PUSH1 0x2 DUP13 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 SWAP4 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP3 AND SWAP3 POP PUSH2 0xFFFF SWAP1 SWAP2 AND SWAP1 DUP3 EQ PUSH2 0x8FA JUMPI DUP2 DUP9 PUSH1 0x3 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x8A2 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP2 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND OR SWAP1 SSTORE SWAP2 DUP5 AND DUP2 MSTORE PUSH1 0x2 DUP11 ADD SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF DUP4 AND OR SWAP1 SSTORE JUMPDEST DUP8 PUSH1 0x3 ADD DUP1 SLOAD DUP1 PUSH2 0x907 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 DUP4 ADD PUSH1 0x0 NOT SWAP1 DUP2 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SSTORE SWAP1 SWAP3 ADD SWAP1 SWAP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND DUP3 MSTORE PUSH1 0x2 DUP11 ADD SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 PUSH2 0x95B DUP3 DUP3 PUSH2 0x975 JUMP JUMPDEST POP PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND SWAP1 SSTORE POP POP POP JUMPDEST POP POP POP POP POP JUMPDEST POP JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x0 DUP3 SSTORE PUSH1 0x7 ADD PUSH1 0x8 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x972 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x9AA JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x996 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x9C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x9C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9F4 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x9FE DUP4 DUP4 PUSH2 0x9AE JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xA1C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xA33 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA46 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xA54 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH1 0x20 DUP11 DUP2 DUP3 DUP5 MUL DUP7 ADD ADD GT ISZERO PUSH2 0xA68 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 DUP5 ADD SWAP9 POP DUP2 SWAP8 POP PUSH2 0xA7C DUP12 DUP3 DUP13 ADD PUSH2 0x9AE JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP11 ADD CALLDATALOAD SWAP4 POP DUP3 DUP5 GT ISZERO PUSH2 0xA91 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP4 DUP11 ADD SWAP4 POP DUP11 PUSH1 0x1F DUP6 ADD SLT PUSH2 0xAA4 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP2 POP DUP3 DUP3 GT ISZERO PUSH2 0xAB4 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP11 DUP2 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0xAC4 JUMPI DUP5 DUP6 REVERT JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP POP SWAP1 SWAP5 ADD SWAP4 POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAE9 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x9FE DUP4 DUP4 PUSH2 0x9CB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP3 DUP3 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0xB3E JUMPI DUP3 DUP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH2 0xB2D DUP3 DUP6 PUSH2 0x9CB JUMP JUMPDEST AND DUP9 MSTORE SWAP7 DUP4 ADD SWAP7 SWAP2 POP PUSH1 0x1 ADD PUSH2 0xB0F JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MSTORE DUP3 DUP3 PUSH1 0x20 DUP7 ADD CALLDATACOPY DUP1 PUSH1 0x20 DUP5 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP6 ADD AND DUP6 ADD ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 PUSH1 0x20 PUSH1 0x80 DUP1 DUP5 ADD SWAP1 DUP3 DUP10 MUL DUP6 ADD ADD DUP10 DUP5 JUMPDEST DUP11 DUP2 LT ISZERO PUSH2 0xC31 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80 DUP8 DUP5 SUB ADD DUP5 MSTORE DUP2 CALLDATALOAD PUSH1 0x3E NOT DUP14 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xBE2 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP13 ADD PUSH1 0x40 DUP7 DUP3 ADD PUSH2 0xBFC DUP7 PUSH2 0xBF7 DUP4 DUP7 PUSH2 0x9AE JUMP JUMPDEST PUSH2 0xAF3 JUMP JUMPDEST PUSH2 0xC06 DUP2 DUP5 PUSH2 0xE6E JUMP JUMPDEST SWAP4 POP SWAP1 POP DUP2 DUP9 DUP8 ADD MSTORE PUSH2 0xC1C DUP3 DUP8 ADD DUP5 DUP4 PUSH2 0xB00 JUMP JUMPDEST SWAP7 DUP9 ADD SWAP7 SWAP6 POP POP POP SWAP2 DUP6 ADD SWAP2 POP PUSH1 0x1 ADD PUSH2 0xBA0 JUMP JUMPDEST POP POP PUSH2 0xC3F DUP4 DUP7 ADD DUP10 PUSH2 0xAF3 JUMP JUMPDEST DUP5 DUP2 SUB PUSH1 0x40 DUP7 ADD MSTORE PUSH2 0xC52 DUP2 DUP8 DUP10 PUSH2 0xB49 JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xC8C JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0xC70 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xC9D JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D757374206F776E2074686520636F6E74726163742E00000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3E SWAP1 DUP3 ADD MSTORE PUSH32 0x4469616D6F6E6443757446616365743A205F696E697420697320616464726573 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x73283029206275745F63616C6C64617461206973206E6F7420656D7074790000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3F SWAP1 DUP3 ADD MSTORE PUSH32 0x4469616D6F6E6443757446616365743A205F63616C6C6461746120697320656D PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x70747920627574205F696E6974206973206E6F74206164647265737328302900 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x4469616D6F6E6443757446616365743A205F696E69742066756E6374696F6E20 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x7265766572746564000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xE17 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xE31 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 SWAP1 DUP2 ADD SWAP3 POP DUP2 MUL CALLDATASIZE SUB DUP3 SGT ISZERO PUSH2 0xE48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 CALLDATALOAD PUSH1 0x3E NOT DUP4 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xE64 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xE84 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x20 DUP2 ADD SWAP3 POP CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xEA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP2 MUL CALLDATASIZE SUB DUP4 SGT ISZERO PUSH2 0xE48 JUMPI PUSH1 0x0 DUP1 REVERT INVALID DIFFICULTY PUSH10 0x616D6F6E644375744661 PUSH4 0x65743A20 0x5F PUSH10 0x6E697420616464726573 PUSH20 0x20686173206E6F20636F64654469616D6F6E6443 PUSH22 0x7446616365743A204E65772066616365742068617320 PUSH15 0x6F20636F6465A26469706673582212 KECCAK256 0xD5 0x49 SWAP3 JUMPDEST 0xE7 CALL PUSH3 0xAD8BEE 0xE 0x5F 0xAA CALLCODE 0xF9 0xA9 0xE5 0x48 0xED PUSH6 0x80D804FBD4D 0xCD 0xB3 0xAA PUSH24 0x977264736F6C634300070100330000000000000000000000 ",
              "sourceMap": "514:4312:2:-:0;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "immutableReferences": {},
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b506004361061002b5760003560e01c8063e712b4e114610030575b600080fd5b61004361003e366004610a05565b610045565b005b61004f85856101c2565b7f39725dd03d877043d78fdfe186295e46e6277eb0a3498f2adb51071f42a2bdcb8585858585604051610086959493929190610b83565b60405180910390a16001600160a01b0383166100c85780156100c35760405162461bcd60e51b81526004016100ba90610cea565b60405180910390fd5b6101bb565b806100e55760405162461bcd60e51b81526004016100ba90610d47565b6001600160a01b038316301461011757610117836040518060600160405280602a8152602001610eb7602a91396104b6565b60006060846001600160a01b03168484604051610135929190610b73565b600060405180830381855af49150503d8060008114610170576040519150601f19603f3d011682016040523d82523d6000602084013e610175565b606091505b5091509150816101b8578051156101a0578060405162461bcd60e51b81526004016100ba9190610c60565b60405162461bcd60e51b81526004016100ba90610da4565b50505b5050505050565b60006101cc6104d7565b80549091506001600160a01b031633146101f85760405162461bcd60e51b81526004016100ba90610cb3565b60005b828110156104b057600084848381811061021157fe5b90506020028101906102239190610e4f565b6102319060208101906109e3565b90506001600160a01b03811615610412576001600160a01b038116600090815260028401602052604090206001015461ffff168015801561028a57506001600160a01b0382166000908152600285016020526040902054155b15610314576102b182604051806060016040528060268152602001610ee1602691396104b6565b5060038301805460018082018355600092835260208084208301805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03871690811790915584526002870190526040909220909101805461ffff191661ffff83161790555b60005b86868581811061032357fe5b90506020028101906103359190610e4f565b610343906020810190610e01565b905081101561040b57600087878681811061035a57fe5b905060200281019061036c9190610e4f565b61037a906020810190610e01565b8381811061038457fe5b90506020020160208101906103999190610ad8565b6001600160e01b0319811660009081526001880160205260409020549091506001600160a01b0316806103d5576103d085836104fb565b610401565b846001600160a01b0316816001600160a01b031614610401576103f7826105db565b61040185836104fb565b5050600101610317565b50506104a7565b60005b85858481811061042157fe5b90506020028101906104339190610e4f565b610441906020810190610e01565b90508110156104a55761049d86868581811061045957fe5b905060200281019061046b9190610e4f565b610479906020810190610e01565b8381811061048357fe5b90506020020160208101906104989190610ad8565b6105db565b600101610415565b505b506001016101fb565b50505050565b813b81816104b05760405162461bcd60e51b81526004016100ba9190610c60565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b60006105056104d7565b6001600160a01b03909316600081815260028501602090815260408083208054600180820183559185528385206008820401805460e08a901c600460078516026101000a90810263ffffffff909102199091161790556001600160e01b03199097168452909601905293909320805461ffff90931674010000000000000000000000000000000000000000027fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff73ffffffffffffffffffffffffffffffffffffffff199094169094179290921692909217905550565b60006105e56104d7565b6001600160e01b0319831660009081526001820160205260409020549091506001600160a01b031680610619575050610972565b6001600160e01b0319831660009081526001830160209081526040808320546001600160a01b038516845260028601909252822080547401000000000000000000000000000000000000000090920461ffff16926000198301929091908390811061068057fe5b90600052602060002090600891828204019190066004029054906101000a900460e01b9050857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146107a6576001600160a01b0384166000908152600286016020526040902080548291908590811061071357fe5b600091825260208083206008830401805463ffffffff60079094166004026101000a938402191660e09590951c929092029390931790556001600160e01b031983168152600187019091526040902080547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000061ffff8616021790555b6001600160a01b038416600090815260028601602052604090208054806107c957fe5b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b0319881682526001870190526040902080547fffffffffffffffffffff000000000000000000000000000000000000000000001690558161096c576003850180546000198101916000918390811061085557fe5b60009182526020808320909101546001600160a01b0389811680855260028c019093526040909320600101549216925061ffff9091169082146108fa57818860030182815481106108a257fe5b6000918252602080832091909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03948516179055918416815260028a0190915260409020600101805461ffff191661ffff83161790555b8760030180548061090757fe5b600082815260208082208301600019908101805473ffffffffffffffffffffffffffffffffffffffff191690559092019092556001600160a01b038916825260028a019052604081209061095b8282610975565b50600101805461ffff191690555050505b50505050505b50565b50805460008255600701600890049060005260206000209081019061097291905b808211156109aa5760008155600101610996565b5090565b80356001600160a01b03811681146109c557600080fd5b92915050565b80356001600160e01b0319811681146109c557600080fd5b6000602082840312156109f4578081fd5b6109fe83836109ae565b9392505050565b600080600080600060608688031215610a1c578081fd5b853567ffffffffffffffff80821115610a33578283fd5b818801915088601f830112610a46578283fd5b813581811115610a54578384fd5b60208a818284028601011115610a68578485fd5b8084019850819750610a7c8b828c016109ae565b965060408a0135935082841115610a91578485fd5b838a0193508a601f850112610aa4578485fd5b8335915082821115610ab4578485fd5b8a81838601011115610ac4578485fd5b979a96995094975050909401935090919050565b600060208284031215610ae9578081fd5b6109fe83836109cb565b6001600160a01b03169052565b60008284526020808501945082825b85811015610b3e578282016001600160e01b0319610b2d82856109cb565b168852968301969150600101610b0f565b509495945050505050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b6000828483379101908152919050565b606080825281018590526000602060808084019082890285010189845b8a811015610c31577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808784030184528135603e198d3603018112610be2578687fd5b8c016040868201610bfc86610bf783866109ae565b610af3565b610c068184610e6e565b935090508188870152610c1c8287018483610b00565b96880196955050509185019150600101610ba0565b5050610c3f83860189610af3565b8481036040860152610c52818789610b49565b9a9950505050505050505050565b6000602080835283518082850152825b81811015610c8c57858101830151858201604001528201610c70565b81811115610c9d5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526016908201527f4d757374206f776e2074686520636f6e74726163742e00000000000000000000604082015260600190565b6020808252603e908201527f4469616d6f6e6443757446616365743a205f696e69742069732061646472657360408201527f73283029206275745f63616c6c64617461206973206e6f7420656d7074790000606082015260800190565b6020808252603f908201527f4469616d6f6e6443757446616365743a205f63616c6c6461746120697320656d60408201527f70747920627574205f696e6974206973206e6f74206164647265737328302900606082015260800190565b60208082526028908201527f4469616d6f6e6443757446616365743a205f696e69742066756e6374696f6e2060408201527f7265766572746564000000000000000000000000000000000000000000000000606082015260800190565b6000808335601e19843603018112610e17578283fd5b83018035915067ffffffffffffffff821115610e31578283fd5b6020908101925081023603821315610e4857600080fd5b9250929050565b60008235603e19833603018112610e64578182fd5b9190910192915050565b6000808335601e19843603018112610e84578283fd5b830160208101925035905067ffffffffffffffff811115610ea457600080fd5b602081023603831315610e4857600080fdfe4469616d6f6e6443757446616365743a205f696e6974206164647265737320686173206e6f20636f64654469616d6f6e6443757446616365743a204e657720666163657420686173206e6f20636f6465a2646970667358221220d549925be7f162ad8bee0e5faaf2f9a9e548ed65080d804fbd4dcdb3aa77977264736f6c63430007010033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xE712B4E1 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x3E CALLDATASIZE PUSH1 0x4 PUSH2 0xA05 JUMP JUMPDEST PUSH2 0x45 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4F DUP6 DUP6 PUSH2 0x1C2 JUMP JUMPDEST PUSH32 0x39725DD03D877043D78FDFE186295E46E6277EB0A3498F2ADB51071F42A2BDCB DUP6 DUP6 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x86 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB83 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xC8 JUMPI DUP1 ISZERO PUSH2 0xC3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBA SWAP1 PUSH2 0xCEA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1BB JUMP JUMPDEST DUP1 PUSH2 0xE5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBA SWAP1 PUSH2 0xD47 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ADDRESS EQ PUSH2 0x117 JUMPI PUSH2 0x117 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xEB7 PUSH1 0x2A SWAP2 CODECOPY PUSH2 0x4B6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x135 SWAP3 SWAP2 SWAP1 PUSH2 0xB73 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x170 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x175 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x1B8 JUMPI DUP1 MLOAD ISZERO PUSH2 0x1A0 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBA SWAP2 SWAP1 PUSH2 0xC60 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBA SWAP1 PUSH2 0xDA4 JUMP JUMPDEST POP POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CC PUSH2 0x4D7 JUMP JUMPDEST DUP1 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBA SWAP1 PUSH2 0xCB3 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x4B0 JUMPI PUSH1 0x0 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x211 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x223 SWAP2 SWAP1 PUSH2 0xE4F JUMP JUMPDEST PUSH2 0x231 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x9E3 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x412 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xFFFF AND DUP1 ISZERO DUP1 ISZERO PUSH2 0x28A JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP6 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO JUMPDEST ISZERO PUSH2 0x314 JUMPI PUSH2 0x2B1 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xEE1 PUSH1 0x26 SWAP2 CODECOPY PUSH2 0x4B6 JUMP JUMPDEST POP PUSH1 0x3 DUP4 ADD DUP1 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP4 SSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 DUP1 DUP5 KECCAK256 DUP4 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP5 MSTORE PUSH1 0x2 DUP8 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP3 KECCAK256 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF DUP4 AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x0 JUMPDEST DUP7 DUP7 DUP6 DUP2 DUP2 LT PUSH2 0x323 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x335 SWAP2 SWAP1 PUSH2 0xE4F JUMP JUMPDEST PUSH2 0x343 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xE01 JUMP JUMPDEST SWAP1 POP DUP2 LT ISZERO PUSH2 0x40B JUMPI PUSH1 0x0 DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0x35A JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x36C SWAP2 SWAP1 PUSH2 0xE4F JUMP JUMPDEST PUSH2 0x37A SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xE01 JUMP JUMPDEST DUP4 DUP2 DUP2 LT PUSH2 0x384 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x399 SWAP2 SWAP1 PUSH2 0xAD8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP9 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x3D5 JUMPI PUSH2 0x3D0 DUP6 DUP4 PUSH2 0x4FB JUMP JUMPDEST PUSH2 0x401 JUMP JUMPDEST DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x401 JUMPI PUSH2 0x3F7 DUP3 PUSH2 0x5DB JUMP JUMPDEST PUSH2 0x401 DUP6 DUP4 PUSH2 0x4FB JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x317 JUMP JUMPDEST POP POP PUSH2 0x4A7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x421 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x433 SWAP2 SWAP1 PUSH2 0xE4F JUMP JUMPDEST PUSH2 0x441 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xE01 JUMP JUMPDEST SWAP1 POP DUP2 LT ISZERO PUSH2 0x4A5 JUMPI PUSH2 0x49D DUP7 DUP7 DUP6 DUP2 DUP2 LT PUSH2 0x459 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x46B SWAP2 SWAP1 PUSH2 0xE4F JUMP JUMPDEST PUSH2 0x479 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xE01 JUMP JUMPDEST DUP4 DUP2 DUP2 LT PUSH2 0x483 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x498 SWAP2 SWAP1 PUSH2 0xAD8 JUMP JUMPDEST PUSH2 0x5DB JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x415 JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1FB JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST DUP2 EXTCODESIZE DUP2 DUP2 PUSH2 0x4B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBA SWAP2 SWAP1 PUSH2 0xC60 JUMP JUMPDEST PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131C SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x505 PUSH2 0x4D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 DUP6 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP4 SSTORE SWAP2 DUP6 MSTORE DUP4 DUP6 KECCAK256 PUSH1 0x8 DUP3 DIV ADD DUP1 SLOAD PUSH1 0xE0 DUP11 SWAP1 SHR PUSH1 0x4 PUSH1 0x7 DUP6 AND MUL PUSH2 0x100 EXP SWAP1 DUP2 MUL PUSH4 0xFFFFFFFF SWAP1 SWAP2 MUL NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP8 AND DUP5 MSTORE SWAP1 SWAP7 ADD SWAP1 MSTORE SWAP4 SWAP1 SWAP4 KECCAK256 DUP1 SLOAD PUSH2 0xFFFF SWAP1 SWAP4 AND PUSH21 0x10000000000000000000000000000000000000000 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 SWAP5 AND SWAP1 SWAP5 OR SWAP3 SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5E5 PUSH2 0x4D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x619 JUMPI POP POP PUSH2 0x972 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE PUSH1 0x2 DUP7 ADD SWAP1 SWAP3 MSTORE DUP3 KECCAK256 DUP1 SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP3 DIV PUSH2 0xFFFF AND SWAP3 PUSH1 0x0 NOT DUP4 ADD SWAP3 SWAP1 SWAP2 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x680 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD PUSH1 0x4 MUL SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xE0 SHL SWAP1 POP DUP6 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x7A6 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 SWAP2 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 0x713 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x8 DUP4 DIV ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x7 SWAP1 SWAP5 AND PUSH1 0x4 MUL PUSH2 0x100 EXP SWAP4 DUP5 MUL NOT AND PUSH1 0xE0 SWAP6 SWAP1 SWAP6 SHR SWAP3 SWAP1 SWAP3 MUL SWAP4 SWAP1 SWAP4 OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND DUP2 MSTORE PUSH1 0x1 DUP8 ADD SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH21 0x10000000000000000000000000000000000000000 PUSH2 0xFFFF DUP7 AND MUL OR SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP1 PUSH2 0x7C9 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 PUSH1 0x8 PUSH1 0x0 NOT SWAP1 SWAP5 ADD SWAP4 DUP5 DIV ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x4 PUSH1 0x7 DUP8 AND MUL PUSH2 0x100 EXP MUL NOT AND SWAP1 SSTORE SWAP2 SWAP1 SWAP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP9 AND DUP3 MSTORE PUSH1 0x1 DUP8 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000000000000000 AND SWAP1 SSTORE DUP2 PUSH2 0x96C JUMPI PUSH1 0x3 DUP6 ADD DUP1 SLOAD PUSH1 0x0 NOT DUP2 ADD SWAP2 PUSH1 0x0 SWAP2 DUP4 SWAP1 DUP2 LT PUSH2 0x855 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND DUP1 DUP6 MSTORE PUSH1 0x2 DUP13 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 SWAP4 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP3 AND SWAP3 POP PUSH2 0xFFFF SWAP1 SWAP2 AND SWAP1 DUP3 EQ PUSH2 0x8FA JUMPI DUP2 DUP9 PUSH1 0x3 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x8A2 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP2 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND OR SWAP1 SSTORE SWAP2 DUP5 AND DUP2 MSTORE PUSH1 0x2 DUP11 ADD SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0xFFFF DUP4 AND OR SWAP1 SSTORE JUMPDEST DUP8 PUSH1 0x3 ADD DUP1 SLOAD DUP1 PUSH2 0x907 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 DUP4 ADD PUSH1 0x0 NOT SWAP1 DUP2 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SSTORE SWAP1 SWAP3 ADD SWAP1 SWAP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND DUP3 MSTORE PUSH1 0x2 DUP11 ADD SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 PUSH2 0x95B DUP3 DUP3 PUSH2 0x975 JUMP JUMPDEST POP PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND SWAP1 SSTORE POP POP POP JUMPDEST POP POP POP POP POP JUMPDEST POP JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x0 DUP3 SSTORE PUSH1 0x7 ADD PUSH1 0x8 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x972 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x9AA JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x996 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x9C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x9C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9F4 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x9FE DUP4 DUP4 PUSH2 0x9AE JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xA1C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xA33 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA46 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xA54 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH1 0x20 DUP11 DUP2 DUP3 DUP5 MUL DUP7 ADD ADD GT ISZERO PUSH2 0xA68 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 DUP5 ADD SWAP9 POP DUP2 SWAP8 POP PUSH2 0xA7C DUP12 DUP3 DUP13 ADD PUSH2 0x9AE JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP11 ADD CALLDATALOAD SWAP4 POP DUP3 DUP5 GT ISZERO PUSH2 0xA91 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP4 DUP11 ADD SWAP4 POP DUP11 PUSH1 0x1F DUP6 ADD SLT PUSH2 0xAA4 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP2 POP DUP3 DUP3 GT ISZERO PUSH2 0xAB4 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP11 DUP2 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0xAC4 JUMPI DUP5 DUP6 REVERT JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP POP SWAP1 SWAP5 ADD SWAP4 POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAE9 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x9FE DUP4 DUP4 PUSH2 0x9CB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP3 DUP3 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0xB3E JUMPI DUP3 DUP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH2 0xB2D DUP3 DUP6 PUSH2 0x9CB JUMP JUMPDEST AND DUP9 MSTORE SWAP7 DUP4 ADD SWAP7 SWAP2 POP PUSH1 0x1 ADD PUSH2 0xB0F JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MSTORE DUP3 DUP3 PUSH1 0x20 DUP7 ADD CALLDATACOPY DUP1 PUSH1 0x20 DUP5 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP6 ADD AND DUP6 ADD ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 PUSH1 0x20 PUSH1 0x80 DUP1 DUP5 ADD SWAP1 DUP3 DUP10 MUL DUP6 ADD ADD DUP10 DUP5 JUMPDEST DUP11 DUP2 LT ISZERO PUSH2 0xC31 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80 DUP8 DUP5 SUB ADD DUP5 MSTORE DUP2 CALLDATALOAD PUSH1 0x3E NOT DUP14 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xBE2 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP13 ADD PUSH1 0x40 DUP7 DUP3 ADD PUSH2 0xBFC DUP7 PUSH2 0xBF7 DUP4 DUP7 PUSH2 0x9AE JUMP JUMPDEST PUSH2 0xAF3 JUMP JUMPDEST PUSH2 0xC06 DUP2 DUP5 PUSH2 0xE6E JUMP JUMPDEST SWAP4 POP SWAP1 POP DUP2 DUP9 DUP8 ADD MSTORE PUSH2 0xC1C DUP3 DUP8 ADD DUP5 DUP4 PUSH2 0xB00 JUMP JUMPDEST SWAP7 DUP9 ADD SWAP7 SWAP6 POP POP POP SWAP2 DUP6 ADD SWAP2 POP PUSH1 0x1 ADD PUSH2 0xBA0 JUMP JUMPDEST POP POP PUSH2 0xC3F DUP4 DUP7 ADD DUP10 PUSH2 0xAF3 JUMP JUMPDEST DUP5 DUP2 SUB PUSH1 0x40 DUP7 ADD MSTORE PUSH2 0xC52 DUP2 DUP8 DUP10 PUSH2 0xB49 JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xC8C JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0xC70 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xC9D JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D757374206F776E2074686520636F6E74726163742E00000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3E SWAP1 DUP3 ADD MSTORE PUSH32 0x4469616D6F6E6443757446616365743A205F696E697420697320616464726573 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x73283029206275745F63616C6C64617461206973206E6F7420656D7074790000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3F SWAP1 DUP3 ADD MSTORE PUSH32 0x4469616D6F6E6443757446616365743A205F63616C6C6461746120697320656D PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x70747920627574205F696E6974206973206E6F74206164647265737328302900 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x4469616D6F6E6443757446616365743A205F696E69742066756E6374696F6E20 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x7265766572746564000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xE17 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xE31 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 SWAP1 DUP2 ADD SWAP3 POP DUP2 MUL CALLDATASIZE SUB DUP3 SGT ISZERO PUSH2 0xE48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 CALLDATALOAD PUSH1 0x3E NOT DUP4 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xE64 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xE84 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x20 DUP2 ADD SWAP3 POP CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xEA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP2 MUL CALLDATASIZE SUB DUP4 SGT ISZERO PUSH2 0xE48 JUMPI PUSH1 0x0 DUP1 REVERT INVALID DIFFICULTY PUSH10 0x616D6F6E644375744661 PUSH4 0x65743A20 0x5F PUSH10 0x6E697420616464726573 PUSH20 0x20686173206E6F20636F64654469616D6F6E6443 PUSH22 0x7446616365743A204E65772066616365742068617320 PUSH15 0x6F20636F6465A26469706673582212 KECCAK256 0xD5 0x49 SWAP3 JUMPDEST 0xE7 CALL PUSH3 0xAD8BEE 0xE 0x5F 0xAA CALLCODE 0xF9 0xA9 0xE5 0x48 0xED PUSH6 0x80D804FBD4D 0xCD 0xB3 0xAA PUSH24 0x977264736F6C634300070100330000000000000000000000 ",
              "sourceMap": "514:4312:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1048:1037;;;;;;:::i;:::-;;:::i;:::-;;;1197:24;1209:11;;1197;:24::i;:::-;1236:41;1247:11;;1260:5;1267:9;;1236:41;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;1291:19:2;;1287:792;;1334:21;;1326:96;;;;-1:-1:-1;;;1326:96:2;;;;;;;:::i;:::-;;;;;;;;;1287:792;;;1461:20;1453:96;;;;-1:-1:-1;;;1453:96:2;;;;;;;:::i;:::-;-1:-1:-1;;;;;1567:22:2;;1584:4;1567:22;1563:143;;1609:82;1639:5;1609:82;;;;;;;;;;;;;;;;;:29;:82::i;:::-;1756:29;;1720:12;;1734:18;;-1:-1:-1;;;;;1756:18:2;;;:29;;1775:9;;;;1756:29;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1719:66;;;;1804:7;1799:270;;1835:12;;:16;1831:224;;1918:21;;-1:-1:-1;;;1918:21:2;;;;1932:5;;1918:21;;;:::i;1831:224::-;1986:50;;-1:-1:-1;;;1986:50:2;;;;;;;:::i;1831:224::-;1287:792;;;1048:1037;;;;;:::o;2481:2343::-;2551:43;2597:34;:32;:34::i;:::-;2663:16;;;;-1:-1:-1;;;;;;2663:16:2;2649:10;:30;2641:65;;;;-1:-1:-1;;;2641:65:2;;;;;;;:::i;:::-;2721:18;2716:2102;2741:31;;;2716:2102;;;2802:23;2828:11;;2840:10;2828:23;;;;;;;;;;;;;;;;;;:::i;:::-;:36;;;;;;;:::i;:::-;2802:62;-1:-1:-1;;;;;;2921:29:2;;;2917:1891;;-1:-1:-1;;;;;3001:42:2;;2970:28;3001:42;;;:25;;;:42;;;;;-1:-1:-1;3001:63:2;;;;3148:25;;:101;;;;-1:-1:-1;;;;;;3177:42:2;;;;;;:25;;;:42;;;;;:67;:72;3148:101;3144:482;;;3273:88;3303:15;3273:88;;;;;;;;;;;;;;;;;:29;:88::i;:::-;-1:-1:-1;3406:17:2;;;:24;;3452:39;;;;;;-1:-1:-1;3452:39:2;;;;;;;;;;;-1:-1:-1;;3452:39:2;-1:-1:-1;;;;;3452:39:2;;;;;;;;3513:42;;:25;;;:42;;;;;;:63;;;:94;;-1:-1:-1;;3513:94:2;-1:-1:-1;3513:94:2;;;;;3144:482;3692:21;3687:795;3731:11;;3743:10;3731:23;;;;;;;;;;;;;;;;;;:::i;:::-;:41;;;;;;;:::i;:::-;:48;;3715:13;:64;3687:795;;;3820:15;3838:11;;3850:10;3838:23;;;;;;;;;;;;;;;;;;:::i;:::-;:41;;;;;;;:::i;:::-;3880:13;3838:56;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;3935:39:2;;3916:16;3935:39;;;-1:-1:-1;3935:29:2;;:39;;;;;:52;:39;;-1:-1:-1;;;;;;3935:52:2;;4036:428;;4090:52;4116:15;4133:8;4090:25;:52::i;:::-;4036:428;;;-1:-1:-1;;;;;4236:27:2;;;;;;;4232:210;;4295:38;4324:8;4295:28;:38::i;:::-;4363:52;4389:15;4406:8;4363:25;:52::i;:::-;-1:-1:-1;;3781:15:2;;3687:795;;;;2917:1891;;;;4561:21;4556:238;4600:11;;4612:10;4600:23;;;;;;;;;;;;;;;;;;:::i;:::-;:41;;;;;;;:::i;:::-;:48;;4584:13;:64;4556:238;;;4689:86;4718:11;;4730:10;4718:23;;;;;;;;;;;;;;;;;;:::i;:::-;:41;;;;;;;:::i;:::-;4760:13;4718:56;;;;;;;;;;;;;;;;;;;;:::i;:::-;4689:28;:86::i;:::-;4650:15;;4556:238;;;;2917:1891;-1:-1:-1;2774:12:2;;2716:2102;;;;2481:2343;;;:::o;5843:254:9:-;6009:22;;6076:13;6058:16;6050:40;;;;-1:-1:-1;;;6050:40:9;;;;;;;;:::i;1484:197:10:-;411:45;;1632:43::o;3242:519:9:-;3319:43;3365:34;:32;:34::i;:::-;-1:-1:-1;;;;;3436:36:9;;;;3409:24;3436:36;;;:25;;;:36;;;;;;;;:61;;-1:-1:-1;3507:70:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;3587:40:9;;;;;:29;;;:40;;;;;;:65;;-1:-1:-1;;3587:65:9;;;;3662:92;;-1:-1:-1;3662:92:9;;;;;;;;;;;;;;;-1:-1:-1;3242:519:9:o;3767:2070::-;3828:43;3874:34;:32;:34::i;:::-;-1:-1:-1;;;;;;3937:40:9;;3918:16;3937:40;;;-1:-1:-1;3937:29:9;;:40;;;;;:53;:29;;-1:-1:-1;;;;;;3937:53:9;;4065:59;;4107:7;;;;4065:59;-1:-1:-1;;;;;;4234:40:9;;4207:24;4234:40;;;-1:-1:-1;4234:29:9;;:40;;;;;;;;:65;-1:-1:-1;;;;;4340:35:9;;;;:25;;;:35;;;;;:60;;-1:-1:-1;4234:65:9;;;;;;-1:-1:-1;;4340:64:9;;;4207:24;;4340:35;:64;;4436:75;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4414:97;;4609:9;4593:25;;;:12;:25;;;;4589:251;;-1:-1:-1;;;;;4634:35:9;;;;;;:25;;;:35;;;;;:71;;4708:12;;4634:35;4688:16;;4634:71;;;;;;;;;;;;;;;;;;:86;;;:71;;;;;;:86;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;4734:43:9;;;;-1:-1:-1;4734:29:9;;:43;;;;;;:95;;;;;;;;;;;;4589:251;-1:-1:-1;;;;;4885:35:9;;;;;;:25;;;:35;;;;;:59;;;;;;;;;;;;;;;;-1:-1:-1;;4885:59:9;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;4961:40:9;;;;-1:-1:-1;4961:29:9;;:40;;;;;4954:47;;;;;;5096:25;5092:739;;5263:17;;;:24;;-1:-1:-1;;5263:28:9;;;-1:-1:-1;;5263:28:9;;5332:43;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5420:35:9;;;;;;:25;;;:35;;;;;;;-1:-1:-1;5420:56:9;;5332:43;;;-1:-1:-1;5420:56:9;;;;;5494:28;;5490:238;;5584:16;5542:2;:17;;5560:20;5542:39;;;;;;;;;;;;;;;;;;;;:58;;-1:-1:-1;;5542:58:9;-1:-1:-1;;;;;5542:58:9;;;;;;5618:43;;;;;:25;;;:43;;;;;;-1:-1:-1;5618:64:9;:95;;-1:-1:-1;;5618:95:9;-1:-1:-1;5618:95:9;;;;;5490:238;5741:2;:17;;:23;;;;;;;;;;;;;;;-1:-1:-1;;5741:23:9;;;;;;;-1:-1:-1;;5741:23:9;;;;;;;;;-1:-1:-1;;;;;5785:35:9;;;;:25;;;:35;;;;;;5778:42;5785:35;5741:23;5778:42;:::i;:::-;-1:-1:-1;5778:42:9;;;;-1:-1:-1;;5778:42:9;;;-1:-1:-1;;;5092:739:9;3767:2070;;;;;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:130::-;72:20;;-1:-1;;;;;15148:54;;15809:35;;15799:2;;15858:1;;15848:12;15799:2;57:78;;;;:::o;561:128::-;627:20;;-1:-1;;;;;;14996:78;;15932:34;;15922:2;;15980:1;;15970:12;1054:241;;1158:2;1146:9;1137:7;1133:23;1129:32;1126:2;;;-1:-1;;1164:12;1126:2;1226:53;1271:7;1247:22;1226:53;:::i;:::-;1216:63;1120:175;-1:-1;;;1120:175::o;1302:819::-;;;;;;1518:2;1506:9;1497:7;1493:23;1489:32;1486:2;;;-1:-1;;1524:12;1486:2;1582:17;1569:31;1620:18;;1612:6;1609:30;1606:2;;;-1:-1;;1642:12;1606:2;1767:6;1756:9;1752:22;;;331:3;324:4;316:6;312:17;308:27;298:2;;-1:-1;;339:12;298:2;382:6;369:20;1620:18;401:6;398:30;395:2;;;-1:-1;;431:12;395:2;475:4;526:3;475:4;;510:6;506:17;467:6;492:32;;489:41;486:2;;;-1:-1;;533:12;486:2;475:4;467:6;463:17;1662:122;;;;;1839:53;1884:7;475:4;1864:9;1860:22;1839:53;:::i;:::-;1829:63;;1957:2;1946:9;1942:18;1929:32;1915:46;;1620:18;1973:6;1970:30;1967:2;;;-1:-1;;2003:12;1967:2;2088:6;2077:9;2073:22;;;824:3;324:4;809:6;805:17;801:27;791:2;;-1:-1;;832:12;791:2;875:6;862:20;852:30;;1620:18;894:6;891:30;888:2;;;-1:-1;;924:12;888:2;1019:3;475:4;999:17;960:6;985:32;;982:41;979:2;;;-1:-1;;1026:12;979:2;1480:641;;;;-1:-1;1480:641;;-1:-1;;956:17;;;;-1:-1;2023:82;;1480:641;-1:-1;1480:641::o;2128:239::-;;2231:2;2219:9;2210:7;2206:23;2202:32;2199:2;;;-1:-1;;2237:12;2199:2;2299:52;2343:7;2319:22;2299:52;:::i;2806:103::-;-1:-1;;;;;15148:54;2867:37;;2861:48::o;3065:637::-;;12988:6;12983:3;12976:19;13025:4;;13020:3;13016:14;3200:82;;3366:21;-1:-1;3393:287;3418:6;3415:1;3412:13;3393:287;;;14501:12;;;-1:-1;;;;;;14476:38;14501:12;;14476:38;:::i;:::-;14996:78;4851:36;;2524:14;;;;3602:71;-1:-1;3440:1;3433:9;3393:287;;;-1:-1;3686:10;;3187:515;-1:-1;;;;;3187:515::o;4922:297::-;;12988:6;12983:3;12976:19;15296:6;15291:3;13025:4;13020:3;13016:14;15273:30;-1:-1;13025:4;15343:6;13020:3;15334:16;;15327:27;13025:4;-1:-1;;15733:2;5205:6;15713:14;15709:28;13020:3;5174:39;;5167:46;;5022:197;;;;;:::o;8238:291::-;;15296:6;15291:3;15286;15273:30;15334:16;;15327:27;;;15334:16;8382:147;-1:-1;8382:147::o;8536:808::-;8853:2;8867:47;;;8838:18;;12976:19;;;8536:808;13025:4;13016:14;;;;;4136:17;;;4127:27;;;4263:21;8536:808;4290:455;4315:6;4312:1;4309:13;4290:455;;;4367:20;8842:9;4371:4;4367:20;;4362:3;4355:33;14658:3;14645:17;-1:-1;;14726:8;14710:14;14706:29;14702:48;14682:18;14678:73;14668:2;;-1:-1;;14755:12;14668:2;14784:33;;7652:4;13850:12;;;7782:63;7830:14;13824:39;13850:12;14784:33;13824:39;:::i;:::-;7782:63;:::i;:::-;7934:76;7993:16;7986:5;7934:76;:::i;:::-;7900:110;;;;7652:4;13025;8034:3;8030:14;8023:38;8076:117;7652:4;7647:3;7643:14;8174:12;8160;8076:117;:::i;:::-;4724:14;;;;4489:118;-1:-1;;;12701:14;;;;-1:-1;4337:1;4330:9;4290:455;;;4294:14;;9103:72;13025:4;9160:9;9156:18;9147:6;9103:72;:::i;:::-;9223:9;9217:4;9213:20;7652:4;9197:9;9193:18;9186:48;9248:86;9329:4;9320:6;9312;9248:86;:::i;:::-;9240:94;8824:520;-1:-1;;;;;;;;;;8824:520::o;9351:310::-;;9498:2;;9519:17;9512:47;5713:5;12570:12;12988:6;9498:2;9487:9;9483:18;12976:19;-1:-1;15441:101;15455:6;15452:1;15449:13;15441:101;;;15522:11;;;;;15516:18;15503:11;;;13016:14;15503:11;15496:39;15470:10;;15441:101;;;15557:6;15554:1;15551:13;15548:2;;;-1:-1;13016:14;15613:6;9487:9;15604:16;;15597:27;15548:2;-1:-1;15733:2;15713:14;-1:-1;;15709:28;5871:39;;;;13016:14;5871:39;;9469:192;-1:-1;;;9469:192::o;9668:416::-;9868:2;9882:47;;;6147:2;9853:18;;;12976:19;6183:24;13016:14;;;6163:45;6227:12;;;9839:245::o;10091:416::-;10291:2;10305:47;;;6478:2;10276:18;;;12976:19;6514:34;13016:14;;;6494:55;6583:32;6569:12;;;6562:54;6635:12;;;10262:245::o;10514:416::-;10714:2;10728:47;;;6886:2;10699:18;;;12976:19;6922:34;13016:14;;;6902:55;6991:33;6977:12;;;6970:55;7044:12;;;10685:245::o;10937:416::-;11137:2;11151:47;;;7295:2;11122:18;;;12976:19;7331:34;13016:14;;;7311:55;7400:10;7386:12;;;7379:32;7430:12;;;11108:245::o;11360:521::-;;;11510:11;11497:25;-1:-1;;11585:8;11569:14;11565:29;11561:48;11541:18;11537:73;11527:2;;-1:-1;;11614:12;11527:2;11641:33;;11695:18;;;-1:-1;11733:18;11722:30;;11719:2;;;-1:-1;;11755:12;11719:2;11600:4;11783:13;;;;-1:-1;11835:17;;11569:14;11815:38;11805:49;;11802:2;;;11867:1;;11857:12;11802:2;11465:416;;;;;:::o;11888:314::-;;12028:11;12015:25;-1:-1;;12103:8;12087:14;12083:29;12079:48;12059:18;12055:73;12045:2;;-1:-1;;12132:12;12045:2;12159:33;;;;;11983:219;-1:-1;;11983:219::o;13878:516::-;;;14017:3;14004:17;-1:-1;;14085:8;14069:14;14065:29;14061:48;14041:18;14037:73;14027:2;;-1:-1;;14114:12;14027:2;14143:33;;14100:4;14232:16;;;-1:-1;14198:19;;-1:-1;14268:18;14257:30;;14254:2;;;14300:1;;14290:12;14254:2;14100:4;14351:6;14347:17;14069:14;14327:38;14317:8;14313:53;14310:2;;;14379:1;;14369:12"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "780000",
                "executionCost": "812",
                "totalCost": "780812"
              },
              "external": {
                "diamondCut((address,bytes4[])[],address,bytes)": "infinite"
              },
              "internal": {
                "externalCut(struct IDiamondCut.Facet calldata[] calldata)": "infinite"
              }
            },
            "methodIdentifiers": {
              "diamondCut((address,bytes4[])[],address,bytes)": "e712b4e1"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondCut.Facet[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.Facet[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"diamondCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"diamondCut((address,bytes4[])[],address,bytes)\":{\"params\":{\"_calldata\":\"A function call, including function selector and arguments                  _calldata is executed with delegatecall on _init\",\"_diamondCut\":\"Contains the facet addresses and function selectors\",\"_init\":\"The address of the contract or facet to execute _calldata\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"diamondCut((address,bytes4[])[],address,bytes)\":{\"notice\":\"Add/replace/remove any number of functions and optionally execute         a function with delegatecall\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solc_0.7/diamond/facets/DiamondCutFacet.sol\":\"DiamondCutFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"solc_0.7/diamond/facets/DiamondCutFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n*\\n* Implementation of diamondCut external function.\\n/******************************************************************************/\\n\\nimport \\\"../libraries/LibDiamondStorage.sol\\\";\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\nimport \\\"../libraries/LibDiamondCut.sol\\\";\\n\\ncontract DiamondCutFacet is IDiamondCut {\\n    // Standard diamondCut external function\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        Facet[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external override {\\n        externalCut(_diamondCut);\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"DiamondCutFacet: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"DiamondCutFacet: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                LibDiamondCut.hasContractCode(_init, \\\"DiamondCutFacet: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"DiamondCutFacet: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    // diamondCut helper function\\n    // This code is almost the same as the internal diamondCut function,\\n    // except it is using 'Facets[] calldata _diamondCut' instead of\\n    // 'Facet[] memory _diamondCut', and it does not issue the DiamondCut event.\\n    // The code is duplicated to prevent copying calldata to memory which\\n    // causes a Solidity error for two dimensional arrays.\\n    function externalCut(Facet[] calldata _diamondCut) internal {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        require(msg.sender == ds.contractOwner, \\\"Must own the contract.\\\");\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            address newFacetAddress = _diamondCut[facetIndex].facetAddress;\\n            // add or replace function\\n            if (newFacetAddress != address(0)) {\\n                uint256 facetAddressPosition = ds.facetFunctionSelectors[newFacetAddress].facetAddressPosition;\\n                // add new facet address if it does not exist\\n                if (facetAddressPosition == 0 && ds.facetFunctionSelectors[newFacetAddress].functionSelectors.length == 0) {\\n                    LibDiamondCut.hasContractCode(newFacetAddress, \\\"DiamondCutFacet: New facet has no code\\\");\\n                    facetAddressPosition = ds.facetAddresses.length;\\n                    ds.facetAddresses.push(newFacetAddress);\\n                    ds.facetFunctionSelectors[newFacetAddress].facetAddressPosition = uint16(facetAddressPosition);\\n                }\\n                // add or replace selectors\\n                for (uint256 selectorIndex; selectorIndex < _diamondCut[facetIndex].functionSelectors.length; selectorIndex++) {\\n                    bytes4 selector = _diamondCut[facetIndex].functionSelectors[selectorIndex];\\n                    address oldFacet = ds.selectorToFacetAndPosition[selector].facetAddress;\\n                    // add\\n                    if (oldFacet == address(0)) {\\n                        LibDiamondCut.addSelector(newFacetAddress, selector);\\n                    } else {\\n                        // replace\\n                        if (oldFacet != newFacetAddress) {\\n                            LibDiamondCut.removeSelector(selector);\\n                            LibDiamondCut.addSelector(newFacetAddress, selector);\\n                        }\\n                    }\\n                }\\n            } else {\\n                // remove selectors\\n                for (uint256 selectorIndex; selectorIndex < _diamondCut[facetIndex].functionSelectors.length; selectorIndex++) {\\n                    LibDiamondCut.removeSelector(_diamondCut[facetIndex].functionSelectors[selectorIndex]);\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe5cefda560bdf00d7e412ef747e28f2076d07b32221ccdfaa607aaab0ca30029\",\"license\":\"MIT\"},\"solc_0.7/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        Facet[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(Facet[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xba9cbedda8b486e17512639ee5ca6a4de1638b55c26b130e61cbbaa632acdef5\",\"license\":\"MIT\"},\"solc_0.7/diamond/libraries/LibDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n*\\n* Implementation of internal diamondCut function.\\n/******************************************************************************/\\n\\nimport \\\"./LibDiamondStorage.sol\\\";\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamondCut {\\n    event DiamondCut(IDiamondCut.Facet[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Non-standard internal function version of diamondCut\\n    // This code is almost the same as externalCut, except it is using\\n    // 'Facet[] memory _diamondCut' instead of 'Facet[] calldata _diamondCut'\\n    // and it DOES issue the DiamondCut event\\n    // The code is duplicated to prevent copying calldata to memory which\\n    // causes a Solidity error for a two dimensional array.\\n    function diamondCut(IDiamondCut.Facet[] memory _diamondCut) internal {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            address newFacetAddress = _diamondCut[facetIndex].facetAddress;\\n            // add or replace function\\n            if (newFacetAddress != address(0)) {\\n                uint256 facetAddressPosition = ds.facetFunctionSelectors[newFacetAddress].facetAddressPosition;\\n                // add new facet address if it does not exist\\n                if (facetAddressPosition == 0 && ds.facetFunctionSelectors[newFacetAddress].functionSelectors.length == 0) {\\n                    hasContractCode(newFacetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n                    facetAddressPosition = ds.facetAddresses.length;\\n                    ds.facetAddresses.push(newFacetAddress);\\n                    ds.facetFunctionSelectors[newFacetAddress].facetAddressPosition = uint16(facetAddressPosition);\\n                }\\n                // add or replace selectors\\n                for (uint256 selectorIndex; selectorIndex < _diamondCut[facetIndex].functionSelectors.length; selectorIndex++) {\\n                    bytes4 selector = _diamondCut[facetIndex].functionSelectors[selectorIndex];\\n                    address oldFacet = ds.selectorToFacetAndPosition[selector].facetAddress;\\n                    // add\\n                    if (oldFacet == address(0)) {\\n                        addSelector(newFacetAddress, selector);\\n                    } else {\\n                        // replace\\n                        if (oldFacet != newFacetAddress) {\\n                            removeSelector(selector);\\n                            addSelector(newFacetAddress, selector);\\n                        }\\n                    }\\n                }\\n            } else {\\n                // remove selectors\\n                for (uint256 selectorIndex; selectorIndex < _diamondCut[facetIndex].functionSelectors.length; selectorIndex++) {\\n                    removeSelector(_diamondCut[facetIndex].functionSelectors[selectorIndex]);\\n                }\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, address(0), new bytes(0));\\n    }\\n\\n    function addSelector(address _newFacet, bytes4 _selector) internal {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        uint256 selectorPosition = ds.facetFunctionSelectors[_newFacet].functionSelectors.length;\\n        ds.facetFunctionSelectors[_newFacet].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _newFacet;\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = uint16(selectorPosition);\\n    }\\n\\n    function removeSelector(bytes4 _selector) internal {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        address oldFacet = ds.selectorToFacetAndPosition[_selector].facetAddress;\\n        // if function does not exist then do nothing and return\\n        if (oldFacet == address(0)) {\\n            return;\\n        }\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[oldFacet].functionSelectors.length - 1;\\n        bytes4 lastSelector = ds.facetFunctionSelectors[oldFacet].functionSelectors[lastSelectorPosition];\\n        // if not the same then replace _selector with lastSelector\\n        if (lastSelector != _selector) {\\n            ds.facetFunctionSelectors[oldFacet].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint16(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[oldFacet].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[oldFacet].facetAddressPosition;\\n            if (oldFacet != lastFacetAddress) {\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = uint16(facetAddressPosition);\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[oldFacet];\\n        }\\n    }\\n\\n    function hasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2b0552b7626a43189f62e6b8e7ac6e257a0d6ebe6f03a44d2da12c931a96155b\",\"license\":\"MIT\"},\"solc_0.7/diamond/libraries/LibDiamondStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n/******************************************************************************/\\n\\nlibrary LibDiamondStorage {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // owner of the contract\\n        address contractOwner;\\n        // maps function selector to the facet address and        \\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe775d2cb83a52f9bc6341b6331acd86527a7870dca3193cfcad3db6206017ed2\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {
              "diamondCut((address,bytes4[])[],address,bytes)": {
                "notice": "Add/replace/remove any number of functions and optionally execute         a function with delegatecall"
              }
            },
            "version": 1
          }
        }
      },
      "solc_0.7/diamond/facets/DiamondLoupeFacet.sol": {
        "DiamondLoupeFacet": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "_functionSelector",
                  "type": "bytes4"
                }
              ],
              "name": "facetAddress",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "facetAddress_",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "facetAddresses",
              "outputs": [
                {
                  "internalType": "address[]",
                  "name": "facetAddresses_",
                  "type": "address[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_facet",
                  "type": "address"
                }
              ],
              "name": "facetFunctionSelectors",
              "outputs": [
                {
                  "internalType": "bytes4[]",
                  "name": "facetFunctionSelectors_",
                  "type": "bytes4[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "facets",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "facetAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes4[]",
                      "name": "functionSelectors",
                      "type": "bytes4[]"
                    }
                  ],
                  "internalType": "struct IDiamondLoupe.Facet[]",
                  "name": "facets_",
                  "type": "tuple[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "_interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {
              "facetAddress(bytes4)": {
                "details": "If facet is not found return address(0).",
                "params": {
                  "_functionSelector": "The function selector."
                },
                "returns": {
                  "facetAddress_": "The facet address."
                }
              },
              "facetAddresses()": {
                "returns": {
                  "facetAddresses_": "facetAddresses_"
                }
              },
              "facetFunctionSelectors(address)": {
                "params": {
                  "_facet": "The facet address."
                },
                "returns": {
                  "facetFunctionSelectors_": "facetFunctionSelectors_"
                }
              },
              "facets()": {
                "returns": {
                  "facets_": "Facet"
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b5061071f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80637a0ed627116100505780637a0ed627146100aa578063adfca15e146100bf578063cdffacc6146100df57610067565b806301ffc9a71461006c57806352ef6b2c14610095575b600080fd5b61007f61007a36600461050f565b6100ff565b60405161008c91906106de565b60405180910390f35b61009d61014a565b60405161008c91906105cc565b6100b26101c3565b60405161008c9190610639565b6100d26100cd3660046104d4565b610370565b60405161008c9190610626565b6100f26100ed36600461050f565b61043c565b60405161008c91906105ab565b60008061010a610498565b7fffffffff00000000000000000000000000000000000000000000000000000000841660009081526004909101602052604090205460ff16915050919050565b60606000610156610498565b600381018054604080516020808402820181019092528281529394508301828280156101b857602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161018d575b505050505091505090565b606060006101cf610498565b60038101549091508067ffffffffffffffff811180156101ee57600080fd5b5060405190808252806020026020018201604052801561022857816020015b6102156104bc565b81526020019060019003908161020d5790505b50925060005b8181101561036a57600083600301828154811061024757fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508085838151811061028157fe5b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff928316905290821660009081526002860182526040908190208054825181850281018501909352808352919290919083018282801561034257602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116102ef5790505b505050505085838151811061035357fe5b60209081029190910181015101525060010161022e565b50505090565b6060600061037c610498565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600282016020908152604091829020805483518184028101840190945280845293945091929083018282801561042f57602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116103dc5790505b5050505050915050919050565b600080610447610498565b7fffffffff00000000000000000000000000000000000000000000000000000000909316600090815260019093016020525050604090205473ffffffffffffffffffffffffffffffffffffffff1690565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b60408051808201909152600081526060602082015290565b6000602082840312156104e5578081fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610508578182fd5b9392505050565b600060208284031215610520578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610508578182fd5b6000815180845260208085019450808401835b838110156105a05781517fffffffff000000000000000000000000000000000000000000000000000000001687529582019590820190600101610562565b509495945050505050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6020808252825182820181905260009190848201906040850190845b8181101561061a57835173ffffffffffffffffffffffffffffffffffffffff16835292840192918401916001016105e8565b50909695505050505050565b600060208252610508602083018461054f565b60208082528251828201819052600091906040908185019080840286018301878501865b838110156106d0578883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00185528151805173ffffffffffffffffffffffffffffffffffffffff1684528701518784018790526106bd8785018261054f565b958801959350509086019060010161065d565b509098975050505050505050565b90151581526020019056fea2646970667358221220e6bc52eff367bffa184f21fff4b2b1e67b39a7f4ef10559888221813c6c7b50164736f6c63430007010033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x71F DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x67 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7A0ED627 GT PUSH2 0x50 JUMPI DUP1 PUSH4 0x7A0ED627 EQ PUSH2 0xAA JUMPI DUP1 PUSH4 0xADFCA15E EQ PUSH2 0xBF JUMPI DUP1 PUSH4 0xCDFFACC6 EQ PUSH2 0xDF JUMPI PUSH2 0x67 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x6C JUMPI DUP1 PUSH4 0x52EF6B2C EQ PUSH2 0x95 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7F PUSH2 0x7A CALLDATASIZE PUSH1 0x4 PUSH2 0x50F JUMP JUMPDEST PUSH2 0xFF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0x6DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x9D PUSH2 0x14A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0x5CC JUMP JUMPDEST PUSH2 0xB2 PUSH2 0x1C3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0x639 JUMP JUMPDEST PUSH2 0xD2 PUSH2 0xCD CALLDATASIZE PUSH1 0x4 PUSH2 0x4D4 JUMP JUMPDEST PUSH2 0x370 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0x626 JUMP JUMPDEST PUSH2 0xF2 PUSH2 0xED CALLDATASIZE PUSH1 0x4 PUSH2 0x50F JUMP JUMPDEST PUSH2 0x43C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0x5AB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x10A PUSH2 0x498 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 SWAP1 SWAP2 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x156 PUSH2 0x498 JUMP JUMPDEST PUSH1 0x3 DUP2 ADD DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE SWAP4 SWAP5 POP DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x1B8 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x18D JUMPI JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x1CF PUSH2 0x498 JUMP JUMPDEST PUSH1 0x3 DUP2 ADD SLOAD SWAP1 SWAP2 POP DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x1EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x228 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x215 PUSH2 0x4BC JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x20D JUMPI SWAP1 POP JUMPDEST POP SWAP3 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x36A JUMPI PUSH1 0x0 DUP4 PUSH1 0x3 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x247 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP1 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x281 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND SWAP1 MSTORE SWAP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP7 ADD DUP3 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x342 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x4 ADD SWAP1 PUSH1 0x20 DUP3 PUSH1 0x3 ADD DIV SWAP3 DUP4 ADD SWAP3 PUSH1 0x1 SUB DUP3 MUL SWAP2 POP DUP1 DUP5 GT PUSH2 0x2EF JUMPI SWAP1 POP JUMPDEST POP POP POP POP POP DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x353 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x22E JUMP JUMPDEST POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x37C PUSH2 0x498 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD DUP4 MLOAD DUP2 DUP5 MUL DUP2 ADD DUP5 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE SWAP4 SWAP5 POP SWAP2 SWAP3 SWAP1 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x42F JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x4 ADD SWAP1 PUSH1 0x20 DUP3 PUSH1 0x3 ADD DIV SWAP3 DUP4 ADD SWAP3 PUSH1 0x1 SUB DUP3 MUL SWAP2 POP DUP1 DUP5 GT PUSH2 0x3DC JUMPI SWAP1 POP JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x447 PUSH2 0x498 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP4 ADD PUSH1 0x20 MSTORE POP POP PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131C SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4E5 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x508 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x520 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x508 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x5A0 JUMPI DUP2 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x562 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x61A JUMPI DUP4 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x5E8 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x508 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x54F JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP1 DUP5 MUL DUP7 ADD DUP4 ADD DUP8 DUP6 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x6D0 JUMPI DUP9 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0 ADD DUP6 MSTORE DUP2 MLOAD DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 MSTORE DUP8 ADD MLOAD DUP8 DUP5 ADD DUP8 SWAP1 MSTORE PUSH2 0x6BD DUP8 DUP6 ADD DUP3 PUSH2 0x54F JUMP JUMPDEST SWAP6 DUP9 ADD SWAP6 SWAP4 POP POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x65D JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE6 0xBC MSTORE 0xEF RETURN PUSH8 0xBFFA184F21FFF4B2 0xB1 0xE6 PUSH28 0x39A7F4EF10559888221813C6C7B50164736F6C634300070100330000 ",
              "sourceMap": "545:2658:3:-:0;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "immutableReferences": {},
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b50600436106100675760003560e01c80637a0ed627116100505780637a0ed627146100aa578063adfca15e146100bf578063cdffacc6146100df57610067565b806301ffc9a71461006c57806352ef6b2c14610095575b600080fd5b61007f61007a36600461050f565b6100ff565b60405161008c91906106de565b60405180910390f35b61009d61014a565b60405161008c91906105cc565b6100b26101c3565b60405161008c9190610639565b6100d26100cd3660046104d4565b610370565b60405161008c9190610626565b6100f26100ed36600461050f565b61043c565b60405161008c91906105ab565b60008061010a610498565b7fffffffff00000000000000000000000000000000000000000000000000000000841660009081526004909101602052604090205460ff16915050919050565b60606000610156610498565b600381018054604080516020808402820181019092528281529394508301828280156101b857602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161018d575b505050505091505090565b606060006101cf610498565b60038101549091508067ffffffffffffffff811180156101ee57600080fd5b5060405190808252806020026020018201604052801561022857816020015b6102156104bc565b81526020019060019003908161020d5790505b50925060005b8181101561036a57600083600301828154811061024757fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508085838151811061028157fe5b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff928316905290821660009081526002860182526040908190208054825181850281018501909352808352919290919083018282801561034257602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116102ef5790505b505050505085838151811061035357fe5b60209081029190910181015101525060010161022e565b50505090565b6060600061037c610498565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600282016020908152604091829020805483518184028101840190945280845293945091929083018282801561042f57602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116103dc5790505b5050505050915050919050565b600080610447610498565b7fffffffff00000000000000000000000000000000000000000000000000000000909316600090815260019093016020525050604090205473ffffffffffffffffffffffffffffffffffffffff1690565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b60408051808201909152600081526060602082015290565b6000602082840312156104e5578081fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610508578182fd5b9392505050565b600060208284031215610520578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610508578182fd5b6000815180845260208085019450808401835b838110156105a05781517fffffffff000000000000000000000000000000000000000000000000000000001687529582019590820190600101610562565b509495945050505050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6020808252825182820181905260009190848201906040850190845b8181101561061a57835173ffffffffffffffffffffffffffffffffffffffff16835292840192918401916001016105e8565b50909695505050505050565b600060208252610508602083018461054f565b60208082528251828201819052600091906040908185019080840286018301878501865b838110156106d0578883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00185528151805173ffffffffffffffffffffffffffffffffffffffff1684528701518784018790526106bd8785018261054f565b958801959350509086019060010161065d565b509098975050505050505050565b90151581526020019056fea2646970667358221220e6bc52eff367bffa184f21fff4b2b1e67b39a7f4ef10559888221813c6c7b50164736f6c63430007010033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x67 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7A0ED627 GT PUSH2 0x50 JUMPI DUP1 PUSH4 0x7A0ED627 EQ PUSH2 0xAA JUMPI DUP1 PUSH4 0xADFCA15E EQ PUSH2 0xBF JUMPI DUP1 PUSH4 0xCDFFACC6 EQ PUSH2 0xDF JUMPI PUSH2 0x67 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x6C JUMPI DUP1 PUSH4 0x52EF6B2C EQ PUSH2 0x95 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7F PUSH2 0x7A CALLDATASIZE PUSH1 0x4 PUSH2 0x50F JUMP JUMPDEST PUSH2 0xFF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0x6DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x9D PUSH2 0x14A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0x5CC JUMP JUMPDEST PUSH2 0xB2 PUSH2 0x1C3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0x639 JUMP JUMPDEST PUSH2 0xD2 PUSH2 0xCD CALLDATASIZE PUSH1 0x4 PUSH2 0x4D4 JUMP JUMPDEST PUSH2 0x370 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0x626 JUMP JUMPDEST PUSH2 0xF2 PUSH2 0xED CALLDATASIZE PUSH1 0x4 PUSH2 0x50F JUMP JUMPDEST PUSH2 0x43C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0x5AB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x10A PUSH2 0x498 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 SWAP1 SWAP2 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x156 PUSH2 0x498 JUMP JUMPDEST PUSH1 0x3 DUP2 ADD DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE SWAP4 SWAP5 POP DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x1B8 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x18D JUMPI JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x1CF PUSH2 0x498 JUMP JUMPDEST PUSH1 0x3 DUP2 ADD SLOAD SWAP1 SWAP2 POP DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x1EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x228 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x215 PUSH2 0x4BC JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x20D JUMPI SWAP1 POP JUMPDEST POP SWAP3 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x36A JUMPI PUSH1 0x0 DUP4 PUSH1 0x3 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x247 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP1 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x281 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND SWAP1 MSTORE SWAP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP7 ADD DUP3 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x342 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x4 ADD SWAP1 PUSH1 0x20 DUP3 PUSH1 0x3 ADD DIV SWAP3 DUP4 ADD SWAP3 PUSH1 0x1 SUB DUP3 MUL SWAP2 POP DUP1 DUP5 GT PUSH2 0x2EF JUMPI SWAP1 POP JUMPDEST POP POP POP POP POP DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x353 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x22E JUMP JUMPDEST POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x37C PUSH2 0x498 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD DUP4 MLOAD DUP2 DUP5 MUL DUP2 ADD DUP5 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE SWAP4 SWAP5 POP SWAP2 SWAP3 SWAP1 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x42F JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x4 ADD SWAP1 PUSH1 0x20 DUP3 PUSH1 0x3 ADD DIV SWAP3 DUP4 ADD SWAP3 PUSH1 0x1 SUB DUP3 MUL SWAP2 POP DUP1 DUP5 GT PUSH2 0x3DC JUMPI SWAP1 POP JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x447 PUSH2 0x498 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP4 ADD PUSH1 0x20 MSTORE POP POP PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131C SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4E5 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x508 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x520 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x508 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x5A0 JUMPI DUP2 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x562 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x61A JUMPI DUP4 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x5E8 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x508 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x54F JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP1 DUP5 MUL DUP7 ADD DUP4 ADD DUP8 DUP6 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x6D0 JUMPI DUP9 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0 ADD DUP6 MSTORE DUP2 MLOAD DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 MSTORE DUP8 ADD MLOAD DUP8 DUP5 ADD DUP8 SWAP1 MSTORE PUSH2 0x6BD DUP8 DUP6 ADD DUP3 PUSH2 0x54F JUMP JUMPDEST SWAP6 DUP9 ADD SWAP6 SWAP4 POP POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x65D JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE6 0xBC MSTORE 0xEF RETURN PUSH8 0xBFFA184F21FFF4B2 0xB1 0xE6 PUSH28 0x39A7F4EF10559888221813C6C7B50164736F6C634300070100330000 ",
              "sourceMap": "545:2658:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2965:236;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2176:234;;;:::i;:::-;;;;;;;:::i;1080:534::-;;;:::i;:::-;;;;;;;:::i;1770:305::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2640:287::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2965:236::-;3045:4;3061:43;3107:34;:32;:34::i;:::-;3158:36;;;;;;;:22;;;;:36;;;;;;;;;-1:-1:-1;;2965:236:3;;;:::o;2176:234::-;2234:32;2278:43;2324:34;:32;:34::i;:::-;2386:17;;;2368:35;;;;;;;;;;;;;;;;;;;2278:80;;-1:-1:-1;2368:35:3;;2386:17;2368:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2176:234;;:::o;1080:534::-;1130:22;1164:43;1210:34;:32;:34::i;:::-;1274:17;;;:24;1164:80;;-1:-1:-1;1274:24:3;1318:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;1308:32;;1355:9;1350:258;1370:9;1366:1;:13;1350:258;;;1400:20;1423:2;:17;;1441:1;1423:20;;;;;;;;;;;;;;;;;;;;;;;;;1400:43;;1483:12;1457:7;1465:1;1457:10;;;;;;;;;;;;;;;;;;;:38;;;;;;1540:39;;;1457:23;1540:39;;;:25;;;:39;;;;;;;1509:88;;;;;;;;;;;;;;;;;;;1540:39;;1509:88;;;1540:39;1509:88;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:7;1517:1;1509:10;;;;;;;;;;;;;;;;;;;:28;:88;-1:-1:-1;1381:3:3;;1350:258;;;;1080:534;;;:::o;1770:305::-;1850:39;1901:43;1947:34;:32;:34::i;:::-;2017:33;;;;;;;:25;;;:33;;;;;;;;;1991:77;;;;;;;;;;;;;;;;;1901:80;;-1:-1:-1;1991:77:3;;;;;2017:33;1991:77;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1770:305;;;;:::o;2640:287::-;2720:21;2753:43;2799:34;:32;:34::i;:::-;2859:48;;;;;;;;:29;;;;:48;;-1:-1:-1;;2859:48:3;;;:61;;;;2640:287::o;1484:197:10:-;411:45;;1632:43::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;:::o;277:241::-;;381:2;369:9;360:7;356:23;352:32;349:2;;;-1:-1;;387:12;349:2;85:6;72:20;9920:42;10062:5;9909:54;10037:5;10034:35;10024:2;;-1:-1;;10073:12;10024:2;439:63;343:175;-1:-1;;;343:175::o;525:239::-;;628:2;616:9;607:7;603:23;599:32;596:2;;;-1:-1;;634:12;596:2;221:6;208:20;9768:66;10184:5;9757:78;10160:5;10157:34;10147:2;;-1:-1;;10195:12;2373:662;;2553:5;8029:12;8878:6;8873:3;8866:19;8915:4;;8910:3;8906:14;2565:82;;8915:4;2717:5;7545:14;-1:-1;2756:257;2781:6;2778:1;2775:13;2756:257;;;2842:13;;9768:66;9757:78;5041:36;;1103:14;;;;8469;;;;2803:1;2796:9;2756:257;;;-1:-1;3019:10;;2485:550;-1:-1;;;;;2485:550::o;5765:222::-;9920:42;9909:54;;;;1446:37;;5892:2;5877:18;;5863:124::o;5994:370::-;6171:2;6185:47;;;8029:12;;6156:18;;;8866:19;;;5994:370;;6171:2;7545:14;;;;8906;;;;5994:370;2054:260;2079:6;2076:1;2073:13;2054:260;;;2140:13;;9920:42;9909:54;1446:37;;8469:14;;;;925;;;;2101:1;2094:9;2054:260;;;-1:-1;6238:116;;6142:222;-1:-1;;;;;;6142:222::o;6371:366::-;;6546:2;6567:17;6560:47;6621:106;6546:2;6535:9;6531:18;6713:6;6621:106;:::i;6744:462::-;6967:2;6981:47;;;8029:12;;6952:18;;;8866:19;;;6744:462;;6967:2;8906:14;;;;;;4274:17;;;4265:27;;;;7545:14;;;6744:462;4425:399;4450:6;4447:1;4444:13;4425:399;;;4502:20;;;;;4490:33;;4551:13;;5363:23;;9920:42;9909:54;1446:37;;5536:16;;5530:23;5573:14;;;5566:38;;;5619:101;5280:14;;;5530:23;5619:101;:::i;:::-;4803:14;;;;4571:118;-1:-1;;8469:14;;;;4472:1;4465:9;4425:399;;;-1:-1;7034:162;;6938:268;-1:-1;;;;;;;;6938:268::o;7213:210::-;9670:13;;9663:21;4936:34;;7334:2;7319:18;;7305:118::o"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "364600",
                "executionCost": "399",
                "totalCost": "364999"
              },
              "external": {
                "facetAddress(bytes4)": "1328",
                "facetAddresses()": "infinite",
                "facetFunctionSelectors(address)": "infinite",
                "facets()": "infinite",
                "supportsInterface(bytes4)": "1284"
              }
            },
            "methodIdentifiers": {
              "facetAddress(bytes4)": "cdffacc6",
              "facetAddresses()": "52ef6b2c",
              "facetFunctionSelectors(address)": "adfca15e",
              "facets()": "7a0ed627",
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_functionSelector\",\"type\":\"bytes4\"}],\"name\":\"facetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"facetAddress_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facetAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"facetAddresses_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_facet\",\"type\":\"address\"}],\"name\":\"facetFunctionSelectors\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"facetFunctionSelectors_\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondLoupe.Facet[]\",\"name\":\"facets_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"facetAddress(bytes4)\":{\"details\":\"If facet is not found return address(0).\",\"params\":{\"_functionSelector\":\"The function selector.\"},\"returns\":{\"facetAddress_\":\"The facet address.\"}},\"facetAddresses()\":{\"returns\":{\"facetAddresses_\":\"facetAddresses_\"}},\"facetFunctionSelectors(address)\":{\"params\":{\"_facet\":\"The facet address.\"},\"returns\":{\"facetFunctionSelectors_\":\"facetFunctionSelectors_\"}},\"facets()\":{\"returns\":{\"facets_\":\"Facet\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"facetAddress(bytes4)\":{\"notice\":\"Gets the facet that supports the given selector.\"},\"facetAddresses()\":{\"notice\":\"Get all the facet addresses used by a diamond.\"},\"facetFunctionSelectors(address)\":{\"notice\":\"Gets all the function selectors provided by a facet.\"},\"facets()\":{\"notice\":\"Gets all facets and their selectors.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solc_0.7/diamond/facets/DiamondLoupeFacet.sol\":\"DiamondLoupeFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"solc_0.7/diamond/facets/DiamondLoupeFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n*\\n* Implementation of DiamondLoupe interface.\\n/******************************************************************************/\\n\\nimport \\\"../libraries/LibDiamondStorage.sol\\\";\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\nimport \\\"../interfaces/IDiamondLoupe.sol\\\";\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\ncontract DiamondLoupeFacet is IDiamondLoupe, IERC165 {\\n    // Diamond Loupe Functions\\n    ////////////////////////////////////////////////////////////////////\\n    /// These functions are expected to be called frequently\\n    /// by tools. Therefore the return values are tightly\\n    /// packed for efficiency. That means no padding with zeros.\\n\\n    // struct Facet {\\n    //     address facetAddress;\\n    //     bytes4[] functionSelectors;\\n    // }\\n\\n    /// @notice Gets all facets and their selectors.\\n    /// @return facets_ Facet\\n    function facets() external override view returns (Facet[] memory facets_) {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        uint256 numFacets = ds.facetAddresses.length;\\n        facets_ = new Facet[](numFacets);\\n        for (uint256 i; i < numFacets; i++) {\\n            address facetAddress = ds.facetAddresses[i];\\n            facets_[i].facetAddress = facetAddress;\\n            facets_[i].functionSelectors = ds.facetFunctionSelectors[facetAddress].functionSelectors;\\n        }\\n    }\\n\\n    /// @notice Gets all the function selectors provided by a facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet) external override view returns (bytes4[] memory facetFunctionSelectors_) {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        facetFunctionSelectors_ = ds.facetFunctionSelectors[_facet].functionSelectors;\\n    }\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external override view returns (address[] memory facetAddresses_) {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        facetAddresses_ = ds.facetAddresses;\\n    }\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external override view returns (address facetAddress_) {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        facetAddress_ = ds.selectorToFacetAndPosition[_functionSelector].facetAddress;\\n    }\\n\\n    // This implements ERC-165.\\n    function supportsInterface(bytes4 _interfaceId) external override view returns (bool) {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        return ds.supportedInterfaces[_interfaceId];\\n    }\\n}\\n\",\"keccak256\":\"0x4b7366bd3fe648aaa728031852007fa2fb83da852a99fb9914ca00ace29453a0\",\"license\":\"MIT\"},\"solc_0.7/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        Facet[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(Facet[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xba9cbedda8b486e17512639ee5ca6a4de1638b55c26b130e61cbbaa632acdef5\",\"license\":\"MIT\"},\"solc_0.7/diamond/interfaces/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n/******************************************************************************/\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\n}\\n\",\"keccak256\":\"0xde77c3530df288849ad2cc13a6a1a00b0216c019875b153a929b3e770667f07d\",\"license\":\"MIT\"},\"solc_0.7/diamond/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc19b99fbeaeb943b6d12e6d631b6ae1738aaa498ee49f67caaccc6238fd0d458\",\"license\":\"MIT\"},\"solc_0.7/diamond/libraries/LibDiamondStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n/******************************************************************************/\\n\\nlibrary LibDiamondStorage {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // owner of the contract\\n        address contractOwner;\\n        // maps function selector to the facet address and        \\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe775d2cb83a52f9bc6341b6331acd86527a7870dca3193cfcad3db6206017ed2\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {
              "facetAddress(bytes4)": {
                "notice": "Gets the facet that supports the given selector."
              },
              "facetAddresses()": {
                "notice": "Get all the facet addresses used by a diamond."
              },
              "facetFunctionSelectors(address)": {
                "notice": "Gets all the function selectors provided by a facet."
              },
              "facets()": {
                "notice": "Gets all facets and their selectors."
              }
            },
            "version": 1
          }
        }
      },
      "solc_0.7/diamond/facets/OwnershipFacet.sol": {
        "OwnershipFacet": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {
              "owner()": {
                "returns": {
                  "_0": "The address of the owner."
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b5061025d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80638da5cb5b1461003b578063f2fde38b14610059575b600080fd5b61004361006e565b60405161005091906101cf565b60405180910390f35b61006c610067366004610194565b610096565b005b600080610079610170565b5473ffffffffffffffffffffffffffffffffffffffff1691505090565b60006100a0610170565b805490915073ffffffffffffffffffffffffffffffffffffffff163381146100fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f4906101f0565b60405180910390fd5b81547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8481169182178455604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b6000602082840312156101a5578081fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146101c8578182fd5b9392505050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b60208082526016908201527f4d757374206f776e2074686520636f6e74726163742e0000000000000000000060408201526060019056fea2646970667358221220e4ef1d95ebf335ba5234af7aa0a862982465bbdd5e9a39f9552b962ab297b95c64736f6c63430007010033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25D DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x59 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x6E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x50 SWAP2 SWAP1 PUSH2 0x1CF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x6C PUSH2 0x67 CALLDATASIZE PUSH1 0x4 PUSH2 0x194 JUMP JUMPDEST PUSH2 0x96 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x79 PUSH2 0x170 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA0 PUSH2 0x170 JUMP JUMPDEST DUP1 SLOAD SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER DUP2 EQ PUSH2 0xFD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x1F0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND SWAP2 DUP3 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131C SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A5 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1C8 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D757374206F776E2074686520636F6E74726163742E00000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE4 0xEF SAR SWAP6 0xEB RETURN CALLDATALOAD 0xBA MSTORE CALLVALUE 0xAF PUSH27 0xA0A862982465BBDD5E9A39F9552B962AB297B95C64736F6C634300 SMOD ADD STOP CALLER ",
              "sourceMap": "417:613:4:-:0;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "immutableReferences": {},
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b50600436106100365760003560e01c80638da5cb5b1461003b578063f2fde38b14610059575b600080fd5b61004361006e565b60405161005091906101cf565b60405180910390f35b61006c610067366004610194565b610096565b005b600080610079610170565b5473ffffffffffffffffffffffffffffffffffffffff1691505090565b60006100a0610170565b805490915073ffffffffffffffffffffffffffffffffffffffff163381146100fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f4906101f0565b60405180910390fd5b81547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8481169182178455604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b6000602082840312156101a5578081fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146101c8578182fd5b9392505050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b60208082526016908201527f4d757374206f776e2074686520636f6e74726163742e0000000000000000000060408201526060019056fea2646970667358221220e4ef1d95ebf335ba5234af7aa0a862982465bbdd5e9a39f9552b962ab297b95c64736f6c63430007010033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x59 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x6E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x50 SWAP2 SWAP1 PUSH2 0x1CF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x6C PUSH2 0x67 CALLDATASIZE PUSH1 0x4 PUSH2 0x194 JUMP JUMPDEST PUSH2 0x96 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x79 PUSH2 0x170 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA0 PUSH2 0x170 JUMP JUMPDEST DUP1 SLOAD SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER DUP2 EQ PUSH2 0xFD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x1F0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND SWAP2 DUP3 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131C SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A5 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1C8 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D757374206F776E2074686520636F6E74726163742E00000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE4 0xEF SAR SWAP6 0xEB RETURN CALLDATALOAD 0xBA MSTORE CALLVALUE 0xAF PUSH27 0xA0A862982465BBDD5E9A39F9552B962AB297B95C64736F6C634300 SMOD ADD STOP CALLER ",
              "sourceMap": "417:613:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;840:188;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;458:376;;;;;;:::i;:::-;;:::i;:::-;;840:188;889:7;908:43;954:34;:32;:34::i;:::-;1005:16;;;;-1:-1:-1;;840:188:4;:::o;458:376::-;531:43;577:34;:32;:34::i;:::-;644:16;;531:80;;-1:-1:-1;644:16:4;;678:10;:26;;670:61;;;;;;;;;;;;:::i;:::-;;;;;;;;;741:27;;;;;;;;;;;;;783:44;;;;;;;;-1:-1:-1;;783:44:4;458:376;;;:::o;1484:197:10:-;411:45;;1632:43::o;142:241:-1:-;;246:2;234:9;225:7;221:23;217:32;214:2;;;-1:-1;;252:12;214:2;85:6;72:20;1836:42;1978:5;1825:54;1953:5;1950:35;1940:2;;-1:-1;;1989:12;1940:2;304:63;208:175;-1:-1;;;208:175::o;841:222::-;1836:42;1825:54;;;;461:37;;968:2;953:18;;939:124::o;1070:416::-;1270:2;1284:47;;;735:2;1255:18;;;1597:19;771:24;1637:14;;;751:45;815:12;;;1241:245::o"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "121000",
                "executionCost": "165",
                "totalCost": "121165"
              },
              "external": {
                "owner()": "1064",
                "transferOwnership(address)": "23496"
              }
            },
            "methodIdentifiers": {
              "owner()": "8da5cb5b",
              "transferOwnership(address)": "f2fde38b"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the owner.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Get the address of the owner\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solc_0.7/diamond/facets/OwnershipFacet.sol\":\"OwnershipFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"solc_0.7/diamond/facets/OwnershipFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n/******************************************************************************/\\n\\nimport \\\"../libraries/LibDiamondStorage.sol\\\";\\nimport \\\"../interfaces/IERC173.sol\\\";\\n\\ncontract OwnershipFacet is IERC173 {\\n    function transferOwnership(address newOwner) external override {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        address currentOwner = ds.contractOwner;\\n        require(msg.sender == currentOwner, \\\"Must own the contract.\\\");\\n        ds.contractOwner = newOwner;\\n        emit OwnershipTransferred(currentOwner, newOwner);\\n    }\\n\\n    function owner() external override view returns (address) {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        return ds.contractOwner;\\n    }\\n}\\n\",\"keccak256\":\"0xe09014d34261a3f4275e5a8e0f7081fe576bc0e4cb15a4760df156a9b423e579\",\"license\":\"MIT\"},\"solc_0.7/diamond/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n/* is ERC165 */\\ninterface IERC173 {\\n    /// @dev This emits when ownership of a contract changes.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Get the address of the owner\\n    /// @return The address of the owner.\\n    function owner() external view returns (address);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0xdb5c5f069a9337daa33b88c6c9fe72edb31b9ff91bf4a923caf02cb9e95d4b12\",\"license\":\"MIT\"},\"solc_0.7/diamond/libraries/LibDiamondStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n/******************************************************************************/\\n\\nlibrary LibDiamondStorage {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // owner of the contract\\n        address contractOwner;\\n        // maps function selector to the facet address and        \\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe775d2cb83a52f9bc6341b6331acd86527a7870dca3193cfcad3db6206017ed2\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {
              "owner()": {
                "notice": "Get the address of the owner"
              }
            },
            "version": 1
          }
        }
      },
      "solc_0.7/diamond/interfaces/IDiamondCut.sol": {
        "IDiamondCut": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "facetAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes4[]",
                      "name": "functionSelectors",
                      "type": "bytes4[]"
                    }
                  ],
                  "indexed": false,
                  "internalType": "struct IDiamondCut.Facet[]",
                  "name": "_diamondCut",
                  "type": "tuple[]"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "_init",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "bytes",
                  "name": "_calldata",
                  "type": "bytes"
                }
              ],
              "name": "DiamondCut",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "facetAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes4[]",
                      "name": "functionSelectors",
                      "type": "bytes4[]"
                    }
                  ],
                  "internalType": "struct IDiamondCut.Facet[]",
                  "name": "_diamondCut",
                  "type": "tuple[]"
                },
                {
                  "internalType": "address",
                  "name": "_init",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "_calldata",
                  "type": "bytes"
                }
              ],
              "name": "diamondCut",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {
              "diamondCut((address,bytes4[])[],address,bytes)": {
                "params": {
                  "_calldata": "A function call, including function selector and arguments                  _calldata is executed with delegatecall on _init",
                  "_diamondCut": "Contains the facet addresses and function selectors",
                  "_init": "The address of the contract or facet to execute _calldata"
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "diamondCut((address,bytes4[])[],address,bytes)": "e712b4e1"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondCut.Facet[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.Facet[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"diamondCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"diamondCut((address,bytes4[])[],address,bytes)\":{\"params\":{\"_calldata\":\"A function call, including function selector and arguments                  _calldata is executed with delegatecall on _init\",\"_diamondCut\":\"Contains the facet addresses and function selectors\",\"_init\":\"The address of the contract or facet to execute _calldata\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"diamondCut((address,bytes4[])[],address,bytes)\":{\"notice\":\"Add/replace/remove any number of functions and optionally execute         a function with delegatecall\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solc_0.7/diamond/interfaces/IDiamondCut.sol\":\"IDiamondCut\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"solc_0.7/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        Facet[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(Facet[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xba9cbedda8b486e17512639ee5ca6a4de1638b55c26b130e61cbbaa632acdef5\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {
              "diamondCut((address,bytes4[])[],address,bytes)": {
                "notice": "Add/replace/remove any number of functions and optionally execute         a function with delegatecall"
              }
            },
            "version": 1
          }
        }
      },
      "solc_0.7/diamond/interfaces/IDiamondLoupe.sol": {
        "IDiamondLoupe": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "_functionSelector",
                  "type": "bytes4"
                }
              ],
              "name": "facetAddress",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "facetAddress_",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "facetAddresses",
              "outputs": [
                {
                  "internalType": "address[]",
                  "name": "facetAddresses_",
                  "type": "address[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_facet",
                  "type": "address"
                }
              ],
              "name": "facetFunctionSelectors",
              "outputs": [
                {
                  "internalType": "bytes4[]",
                  "name": "facetFunctionSelectors_",
                  "type": "bytes4[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "facets",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "facetAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes4[]",
                      "name": "functionSelectors",
                      "type": "bytes4[]"
                    }
                  ],
                  "internalType": "struct IDiamondLoupe.Facet[]",
                  "name": "facets_",
                  "type": "tuple[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {
              "facetAddress(bytes4)": {
                "details": "If facet is not found return address(0).",
                "params": {
                  "_functionSelector": "The function selector."
                },
                "returns": {
                  "facetAddress_": "The facet address."
                }
              },
              "facetAddresses()": {
                "returns": {
                  "facetAddresses_": "facetAddresses_"
                }
              },
              "facetFunctionSelectors(address)": {
                "params": {
                  "_facet": "The facet address."
                },
                "returns": {
                  "facetFunctionSelectors_": "facetFunctionSelectors_"
                }
              },
              "facets()": {
                "returns": {
                  "facets_": "Facet"
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "facetAddress(bytes4)": "cdffacc6",
              "facetAddresses()": "52ef6b2c",
              "facetFunctionSelectors(address)": "adfca15e",
              "facets()": "7a0ed627"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_functionSelector\",\"type\":\"bytes4\"}],\"name\":\"facetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"facetAddress_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facetAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"facetAddresses_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_facet\",\"type\":\"address\"}],\"name\":\"facetFunctionSelectors\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"facetFunctionSelectors_\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondLoupe.Facet[]\",\"name\":\"facets_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"facetAddress(bytes4)\":{\"details\":\"If facet is not found return address(0).\",\"params\":{\"_functionSelector\":\"The function selector.\"},\"returns\":{\"facetAddress_\":\"The facet address.\"}},\"facetAddresses()\":{\"returns\":{\"facetAddresses_\":\"facetAddresses_\"}},\"facetFunctionSelectors(address)\":{\"params\":{\"_facet\":\"The facet address.\"},\"returns\":{\"facetFunctionSelectors_\":\"facetFunctionSelectors_\"}},\"facets()\":{\"returns\":{\"facets_\":\"Facet\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"facetAddress(bytes4)\":{\"notice\":\"Gets the facet that supports the given selector.\"},\"facetAddresses()\":{\"notice\":\"Get all the facet addresses used by a diamond.\"},\"facetFunctionSelectors(address)\":{\"notice\":\"Gets all the function selectors supported by a specific facet.\"},\"facets()\":{\"notice\":\"Gets all facet addresses and their four byte function selectors.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solc_0.7/diamond/interfaces/IDiamondLoupe.sol\":\"IDiamondLoupe\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"solc_0.7/diamond/interfaces/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n/******************************************************************************/\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\n}\\n\",\"keccak256\":\"0xde77c3530df288849ad2cc13a6a1a00b0216c019875b153a929b3e770667f07d\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {
              "facetAddress(bytes4)": {
                "notice": "Gets the facet that supports the given selector."
              },
              "facetAddresses()": {
                "notice": "Get all the facet addresses used by a diamond."
              },
              "facetFunctionSelectors(address)": {
                "notice": "Gets all the function selectors supported by a specific facet."
              },
              "facets()": {
                "notice": "Gets all facet addresses and their four byte function selectors."
              }
            },
            "version": 1
          }
        }
      },
      "solc_0.7/diamond/interfaces/IERC165.sol": {
        "IERC165": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {
              "supportsInterface(bytes4)": {
                "details": "Interface identification is specified in ERC-165. This function  uses less than 30,000 gas.",
                "params": {
                  "interfaceId": "The interface identifier, as specified in ERC-165"
                },
                "returns": {
                  "_0": "`true` if the contract implements `interfaceID` and  `interfaceID` is not 0xffffffff, `false` otherwise"
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Interface identification is specified in ERC-165. This function  uses less than 30,000 gas.\",\"params\":{\"interfaceId\":\"The interface identifier, as specified in ERC-165\"},\"returns\":{\"_0\":\"`true` if the contract implements `interfaceID` and  `interfaceID` is not 0xffffffff, `false` otherwise\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Query if a contract implements an interface\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solc_0.7/diamond/interfaces/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"solc_0.7/diamond/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc19b99fbeaeb943b6d12e6d631b6ae1738aaa498ee49f67caaccc6238fd0d458\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {
              "supportsInterface(bytes4)": {
                "notice": "Query if a contract implements an interface"
              }
            },
            "version": 1
          }
        }
      },
      "solc_0.7/diamond/interfaces/IERC173.sol": {
        "IERC173": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "events": {
              "OwnershipTransferred(address,address)": {
                "details": "This emits when ownership of a contract changes."
              }
            },
            "kind": "dev",
            "methods": {
              "owner()": {
                "returns": {
                  "_0": "The address of the owner."
                }
              },
              "transferOwnership(address)": {
                "details": "Set _newOwner to address(0) to renounce any ownership.",
                "params": {
                  "_newOwner": "The address of the new owner of the contract"
                }
              }
            },
            "title": "ERC-173 Contract Ownership Standard  Note: the ERC-165 identifier for this interface is 0x7f5828d0",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "owner()": "8da5cb5b",
              "transferOwnership(address)": "f2fde38b"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"details\":\"This emits when ownership of a contract changes.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the owner.\"}},\"transferOwnership(address)\":{\"details\":\"Set _newOwner to address(0) to renounce any ownership.\",\"params\":{\"_newOwner\":\"The address of the new owner of the contract\"}}},\"title\":\"ERC-173 Contract Ownership Standard  Note: the ERC-165 identifier for this interface is 0x7f5828d0\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Get the address of the owner\"},\"transferOwnership(address)\":{\"notice\":\"Set the address of the new owner of the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solc_0.7/diamond/interfaces/IERC173.sol\":\"IERC173\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"solc_0.7/diamond/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n/* is ERC165 */\\ninterface IERC173 {\\n    /// @dev This emits when ownership of a contract changes.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Get the address of the owner\\n    /// @return The address of the owner.\\n    function owner() external view returns (address);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0xdb5c5f069a9337daa33b88c6c9fe72edb31b9ff91bf4a923caf02cb9e95d4b12\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {
              "owner()": {
                "notice": "Get the address of the owner"
              },
              "transferOwnership(address)": {
                "notice": "Set the address of the new owner of the contract"
              }
            },
            "version": 1
          }
        }
      },
      "solc_0.7/diamond/libraries/LibDiamondCut.sol": {
        "LibDiamondCut": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "facetAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes4[]",
                      "name": "functionSelectors",
                      "type": "bytes4[]"
                    }
                  ],
                  "indexed": false,
                  "internalType": "struct IDiamondCut.Facet[]",
                  "name": "_diamondCut",
                  "type": "tuple[]"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "_init",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "bytes",
                  "name": "_calldata",
                  "type": "bytes"
                }
              ],
              "name": "DiamondCut",
              "type": "event"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a3c055dec4f8098c9d571fc490a0cea054ea38d297822d77bff41cd40ecf2d9b64736f6c63430007010033",
              "opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG3 0xC0 SSTORE 0xDE 0xC4 0xF8 MULMOD DUP13 SWAP14 JUMPI 0x1F 0xC4 SWAP1 LOG0 0xCE LOG0 SLOAD 0xEA CODESIZE 0xD2 SWAP8 DUP3 0x2D PUSH24 0xBFF41CD40ECF2D9B64736F6C634300070100330000000000 ",
              "sourceMap": "462:5637:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "immutableReferences": {},
              "linkReferences": {},
              "object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a3c055dec4f8098c9d571fc490a0cea054ea38d297822d77bff41cd40ecf2d9b64736f6c63430007010033",
              "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG3 0xC0 SSTORE 0xDE 0xC4 0xF8 MULMOD DUP13 SWAP14 JUMPI 0x1F 0xC4 SWAP1 LOG0 0xCE LOG0 SLOAD 0xEA CODESIZE 0xD2 SWAP8 DUP3 0x2D PUSH24 0xBFF41CD40ECF2D9B64736F6C634300070100330000000000 ",
              "sourceMap": "462:5637:9:-:0;;;;;;;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "17200",
                "executionCost": "97",
                "totalCost": "17297"
              },
              "internal": {
                "addSelector(address,bytes4)": "infinite",
                "diamondCut(struct IDiamondCut.Facet memory[] memory)": "infinite",
                "hasContractCode(address,string memory)": "infinite",
                "removeSelector(bytes4)": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondCut.Facet[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solc_0.7/diamond/libraries/LibDiamondCut.sol\":\"LibDiamondCut\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"solc_0.7/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        Facet[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(Facet[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xba9cbedda8b486e17512639ee5ca6a4de1638b55c26b130e61cbbaa632acdef5\",\"license\":\"MIT\"},\"solc_0.7/diamond/libraries/LibDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n*\\n* Implementation of internal diamondCut function.\\n/******************************************************************************/\\n\\nimport \\\"./LibDiamondStorage.sol\\\";\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamondCut {\\n    event DiamondCut(IDiamondCut.Facet[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Non-standard internal function version of diamondCut\\n    // This code is almost the same as externalCut, except it is using\\n    // 'Facet[] memory _diamondCut' instead of 'Facet[] calldata _diamondCut'\\n    // and it DOES issue the DiamondCut event\\n    // The code is duplicated to prevent copying calldata to memory which\\n    // causes a Solidity error for a two dimensional array.\\n    function diamondCut(IDiamondCut.Facet[] memory _diamondCut) internal {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            address newFacetAddress = _diamondCut[facetIndex].facetAddress;\\n            // add or replace function\\n            if (newFacetAddress != address(0)) {\\n                uint256 facetAddressPosition = ds.facetFunctionSelectors[newFacetAddress].facetAddressPosition;\\n                // add new facet address if it does not exist\\n                if (facetAddressPosition == 0 && ds.facetFunctionSelectors[newFacetAddress].functionSelectors.length == 0) {\\n                    hasContractCode(newFacetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n                    facetAddressPosition = ds.facetAddresses.length;\\n                    ds.facetAddresses.push(newFacetAddress);\\n                    ds.facetFunctionSelectors[newFacetAddress].facetAddressPosition = uint16(facetAddressPosition);\\n                }\\n                // add or replace selectors\\n                for (uint256 selectorIndex; selectorIndex < _diamondCut[facetIndex].functionSelectors.length; selectorIndex++) {\\n                    bytes4 selector = _diamondCut[facetIndex].functionSelectors[selectorIndex];\\n                    address oldFacet = ds.selectorToFacetAndPosition[selector].facetAddress;\\n                    // add\\n                    if (oldFacet == address(0)) {\\n                        addSelector(newFacetAddress, selector);\\n                    } else {\\n                        // replace\\n                        if (oldFacet != newFacetAddress) {\\n                            removeSelector(selector);\\n                            addSelector(newFacetAddress, selector);\\n                        }\\n                    }\\n                }\\n            } else {\\n                // remove selectors\\n                for (uint256 selectorIndex; selectorIndex < _diamondCut[facetIndex].functionSelectors.length; selectorIndex++) {\\n                    removeSelector(_diamondCut[facetIndex].functionSelectors[selectorIndex]);\\n                }\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, address(0), new bytes(0));\\n    }\\n\\n    function addSelector(address _newFacet, bytes4 _selector) internal {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        uint256 selectorPosition = ds.facetFunctionSelectors[_newFacet].functionSelectors.length;\\n        ds.facetFunctionSelectors[_newFacet].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _newFacet;\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = uint16(selectorPosition);\\n    }\\n\\n    function removeSelector(bytes4 _selector) internal {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        address oldFacet = ds.selectorToFacetAndPosition[_selector].facetAddress;\\n        // if function does not exist then do nothing and return\\n        if (oldFacet == address(0)) {\\n            return;\\n        }\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[oldFacet].functionSelectors.length - 1;\\n        bytes4 lastSelector = ds.facetFunctionSelectors[oldFacet].functionSelectors[lastSelectorPosition];\\n        // if not the same then replace _selector with lastSelector\\n        if (lastSelector != _selector) {\\n            ds.facetFunctionSelectors[oldFacet].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint16(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[oldFacet].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[oldFacet].facetAddressPosition;\\n            if (oldFacet != lastFacetAddress) {\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = uint16(facetAddressPosition);\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[oldFacet];\\n        }\\n    }\\n\\n    function hasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2b0552b7626a43189f62e6b8e7ac6e257a0d6ebe6f03a44d2da12c931a96155b\",\"license\":\"MIT\"},\"solc_0.7/diamond/libraries/LibDiamondStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n/******************************************************************************/\\n\\nlibrary LibDiamondStorage {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // owner of the contract\\n        address contractOwner;\\n        // maps function selector to the facet address and        \\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe775d2cb83a52f9bc6341b6331acd86527a7870dca3193cfcad3db6206017ed2\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "solc_0.7/diamond/libraries/LibDiamondStorage.sol": {
        "LibDiamondStorage": {
          "abi": [],
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209eff84a4b7261bebd21aba4958e6c450e17fce53a806f68f07ae8c4f2052539664736f6c63430007010033",
              "opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP15 SELFDESTRUCT DUP5 LOG4 0xB7 0x26 SHL 0xEB 0xD2 BYTE 0xBA 0x49 PC 0xE6 0xC4 POP 0xE1 PUSH32 0xCE53A806F68F07AE8C4F2052539664736F6C6343000701003300000000000000 ",
              "sourceMap": "335:1348:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "immutableReferences": {},
              "linkReferences": {},
              "object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209eff84a4b7261bebd21aba4958e6c450e17fce53a806f68f07ae8c4f2052539664736f6c63430007010033",
              "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP15 SELFDESTRUCT DUP5 LOG4 0xB7 0x26 SHL 0xEB 0xD2 BYTE 0xBA 0x49 PC 0xE6 0xC4 POP 0xE1 PUSH32 0xCE53A806F68F07AE8C4F2052539664736F6C6343000701003300000000000000 ",
              "sourceMap": "335:1348:10:-:0;;;;;;;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "17200",
                "executionCost": "97",
                "totalCost": "17297"
              },
              "internal": {
                "diamondStorage()": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solc_0.7/diamond/libraries/LibDiamondStorage.sol\":\"LibDiamondStorage\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"solc_0.7/diamond/libraries/LibDiamondStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n/******************************************************************************/\\n\\nlibrary LibDiamondStorage {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // owner of the contract\\n        address contractOwner;\\n        // maps function selector to the facet address and        \\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe775d2cb83a52f9bc6341b6331acd86527a7870dca3193cfcad3db6206017ed2\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      }
    },
    "sources": {
      "solc_0.7/diamond/Diamantaire.sol": {
        "ast": {
          "absolutePath": "solc_0.7/diamond/Diamantaire.sol",
          "exportedSymbols": {
            "Diamantaire": [
              105
            ]
          },
          "id": 106,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                "^",
                "0.7",
                ".1"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:23:0"
            },
            {
              "id": 2,
              "literals": [
                "experimental",
                "ABIEncoderV2"
              ],
              "nodeType": "PragmaDirective",
              "src": "56:33:0"
            },
            {
              "absolutePath": "solc_0.7/diamond/interfaces/IDiamondCut.sol",
              "file": "./interfaces/IDiamondCut.sol",
              "id": 3,
              "nodeType": "ImportDirective",
              "scope": 106,
              "sourceUnit": 1007,
              "src": "91:38:0",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "solc_0.7/diamond/Diamond.sol",
              "file": "./Diamond.sol",
              "id": 4,
              "nodeType": "ImportDirective",
              "scope": 106,
              "sourceUnit": 434,
              "src": "130:23:0",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [
                433
              ],
              "contractKind": "contract",
              "fullyImplemented": true,
              "id": 105,
              "linearizedBaseContracts": [
                105
              ],
              "name": "Diamantaire",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "anonymous": false,
                  "id": 8,
                  "name": "DiamondCreated",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 7,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 6,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "diamond",
                        "nodeType": "VariableDeclaration",
                        "scope": 8,
                        "src": "203:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Diamond_$433",
                          "typeString": "contract Diamond"
                        },
                        "typeName": {
                          "id": 5,
                          "name": "Diamond",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 433,
                          "src": "203:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_Diamond_$433",
                            "typeString": "contract Diamond"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "202:17:0"
                  },
                  "src": "182:38:0"
                },
                {
                  "body": {
                    "id": 103,
                    "nodeType": "Block",
                    "src": "422:550:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          "id": 24,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 22,
                            "name": "salt",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 17,
                            "src": "436:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "hexValue": "307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030",
                            "id": 23,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "444:66:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0x0000000000000000000000000000000000000000000000000000000000000000"
                          },
                          "src": "436:74:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 63,
                          "nodeType": "Block",
                          "src": "670:79:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 61,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 50,
                                  "name": "diamond",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 20,
                                  "src": "684:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_Diamond_$433",
                                    "typeString": "contract Diamond"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "id": 58,
                                          "name": "this",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": -28,
                                          "src": "732:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_contract$_Diamantaire_$105",
                                            "typeString": "contract Diamantaire"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_contract$_Diamantaire_$105",
                                            "typeString": "contract Diamantaire"
                                          }
                                        ],
                                        "id": 57,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "ElementaryTypeNameExpression",
                                        "src": "724:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_address_$",
                                          "typeString": "type(address)"
                                        },
                                        "typeName": {
                                          "id": 56,
                                          "name": "address",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "724:7:0",
                                          "typeDescriptions": {}
                                        }
                                      },
                                      "id": 59,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "724:13:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      ],
                                      "id": 52,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "NewExpression",
                                      "src": "694:11:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_creation_payable$_t_address_$returns$_t_contract$_Diamond_$433_$",
                                        "typeString": "function (address) payable returns (contract Diamond)"
                                      },
                                      "typeName": {
                                        "id": 51,
                                        "name": "Diamond",
                                        "nodeType": "UserDefinedTypeName",
                                        "referencedDeclaration": 433,
                                        "src": "698:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_contract$_Diamond_$433",
                                          "typeString": "contract Diamond"
                                        }
                                      }
                                    },
                                    "id": 55,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "names": [
                                      "value"
                                    ],
                                    "nodeType": "FunctionCallOptions",
                                    "options": [
                                      {
                                        "expression": {
                                          "id": 53,
                                          "name": "msg",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": -15,
                                          "src": "713:3:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_magic_message",
                                            "typeString": "msg"
                                          }
                                        },
                                        "id": 54,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "value",
                                        "nodeType": "MemberAccess",
                                        "src": "713:9:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "src": "694:29:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_creation_payable$_t_address_$returns$_t_contract$_Diamond_$433_$value",
                                      "typeString": "function (address) payable returns (contract Diamond)"
                                    }
                                  },
                                  "id": 60,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "694:44:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_Diamond_$433",
                                    "typeString": "contract Diamond"
                                  }
                                },
                                "src": "684:54:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_Diamond_$433",
                                  "typeString": "contract Diamond"
                                }
                              },
                              "id": 62,
                              "nodeType": "ExpressionStatement",
                              "src": "684:54:0"
                            }
                          ]
                        },
                        "id": 64,
                        "nodeType": "IfStatement",
                        "src": "432:317:0",
                        "trueBody": {
                          "id": 49,
                          "nodeType": "Block",
                          "src": "512:152:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 33,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 25,
                                  "name": "salt",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 17,
                                  "src": "526:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "id": 29,
                                          "name": "salt",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 17,
                                          "src": "560:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes32",
                                            "typeString": "bytes32"
                                          }
                                        },
                                        {
                                          "id": 30,
                                          "name": "owner",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 10,
                                          "src": "566:5:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_bytes32",
                                            "typeString": "bytes32"
                                          },
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        ],
                                        "expression": {
                                          "id": 27,
                                          "name": "abi",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": -1,
                                          "src": "543:3:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_magic_abi",
                                            "typeString": "abi"
                                          }
                                        },
                                        "id": 28,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "memberName": "encodePacked",
                                        "nodeType": "MemberAccess",
                                        "src": "543:16:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                          "typeString": "function () pure returns (bytes memory)"
                                        }
                                      },
                                      "id": 31,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "543:29:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes_memory_ptr",
                                        "typeString": "bytes memory"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_bytes_memory_ptr",
                                        "typeString": "bytes memory"
                                      }
                                    ],
                                    "id": 26,
                                    "name": "keccak256",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -8,
                                    "src": "533:9:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                      "typeString": "function (bytes memory) pure returns (bytes32)"
                                    }
                                  },
                                  "id": 32,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "533:40:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                "src": "526:47:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              "id": 34,
                              "nodeType": "ExpressionStatement",
                              "src": "526:47:0"
                            },
                            {
                              "expression": {
                                "id": 47,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 35,
                                  "name": "diamond",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 20,
                                  "src": "587:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_Diamond_$433",
                                    "typeString": "contract Diamond"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "id": 44,
                                          "name": "this",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": -28,
                                          "src": "647:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_contract$_Diamantaire_$105",
                                            "typeString": "contract Diamantaire"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_contract$_Diamantaire_$105",
                                            "typeString": "contract Diamantaire"
                                          }
                                        ],
                                        "id": 43,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "ElementaryTypeNameExpression",
                                        "src": "639:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_address_$",
                                          "typeString": "type(address)"
                                        },
                                        "typeName": {
                                          "id": 42,
                                          "name": "address",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "639:7:0",
                                          "typeDescriptions": {}
                                        }
                                      },
                                      "id": 45,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "639:13:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      ],
                                      "id": 37,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "NewExpression",
                                      "src": "597:11:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_creation_payable$_t_address_$returns$_t_contract$_Diamond_$433_$",
                                        "typeString": "function (address) payable returns (contract Diamond)"
                                      },
                                      "typeName": {
                                        "id": 36,
                                        "name": "Diamond",
                                        "nodeType": "UserDefinedTypeName",
                                        "referencedDeclaration": 433,
                                        "src": "601:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_contract$_Diamond_$433",
                                          "typeString": "contract Diamond"
                                        }
                                      }
                                    },
                                    "id": 41,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "names": [
                                      "value",
                                      "salt"
                                    ],
                                    "nodeType": "FunctionCallOptions",
                                    "options": [
                                      {
                                        "expression": {
                                          "id": 38,
                                          "name": "msg",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": -15,
                                          "src": "616:3:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_magic_message",
                                            "typeString": "msg"
                                          }
                                        },
                                        "id": 39,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "value",
                                        "nodeType": "MemberAccess",
                                        "src": "616:9:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      {
                                        "id": 40,
                                        "name": "salt",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 17,
                                        "src": "633:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes32",
                                          "typeString": "bytes32"
                                        }
                                      }
                                    ],
                                    "src": "597:41:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_creation_payable$_t_address_$returns$_t_contract$_Diamond_$433_$valuesalt",
                                      "typeString": "function (address) payable returns (contract Diamond)"
                                    }
                                  },
                                  "id": 46,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "597:56:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_Diamond_$433",
                                    "typeString": "contract Diamond"
                                  }
                                },
                                "src": "587:66:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_Diamond_$433",
                                  "typeString": "contract Diamond"
                                }
                              },
                              "id": 48,
                              "nodeType": "ExpressionStatement",
                              "src": "587:66:0"
                            }
                          ]
                        }
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 66,
                              "name": "diamond",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 20,
                              "src": "778:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_Diamond_$433",
                                "typeString": "contract Diamond"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_Diamond_$433",
                                "typeString": "contract Diamond"
                              }
                            ],
                            "id": 65,
                            "name": "DiamondCreated",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 8,
                            "src": "763:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_contract$_Diamond_$433_$returns$__$",
                              "typeString": "function (contract Diamond)"
                            }
                          },
                          "id": 67,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "763:23:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 68,
                        "nodeType": "EmitStatement",
                        "src": "758:28:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 76,
                              "name": "_diamondCut",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 13,
                              "src": "838:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Facet_$985_calldata_ptr_$dyn_calldata_ptr",
                                "typeString": "struct IDiamondCut.Facet calldata[] calldata"
                              }
                            },
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 80,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 77,
                                    "name": "data",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 15,
                                    "src": "851:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_calldata_ptr",
                                      "typeString": "bytes calldata"
                                    }
                                  },
                                  "id": 78,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "length",
                                  "nodeType": "MemberAccess",
                                  "src": "851:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">",
                                "rightExpression": {
                                  "hexValue": "30",
                                  "id": 79,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "865:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "851:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseExpression": {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 87,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "896:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 86,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "888:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 85,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "888:7:0",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 88,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "888:10:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "id": 89,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "Conditional",
                              "src": "851:47:0",
                              "trueExpression": {
                                "arguments": [
                                  {
                                    "id": 83,
                                    "name": "diamond",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 20,
                                    "src": "877:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_Diamond_$433",
                                      "typeString": "contract Diamond"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_Diamond_$433",
                                      "typeString": "contract Diamond"
                                    }
                                  ],
                                  "id": 82,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "869:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 81,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "869:7:0",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 84,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "869:16:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "id": 90,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 15,
                              "src": "900:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_calldata_ptr",
                                "typeString": "bytes calldata"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_array$_t_struct$_Facet_$985_calldata_ptr_$dyn_calldata_ptr",
                                "typeString": "struct IDiamondCut.Facet calldata[] calldata"
                              },
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              },
                              {
                                "typeIdentifier": "t_bytes_calldata_ptr",
                                "typeString": "bytes calldata"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "id": 72,
                                      "name": "diamond",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 20,
                                      "src": "817:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_Diamond_$433",
                                        "typeString": "contract Diamond"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_Diamond_$433",
                                        "typeString": "contract Diamond"
                                      }
                                    ],
                                    "id": 71,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "809:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 70,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "809:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 73,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "809:16:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                ],
                                "id": 69,
                                "name": "IDiamondCut",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1006,
                                "src": "797:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IDiamondCut_$1006_$",
                                  "typeString": "type(contract IDiamondCut)"
                                }
                              },
                              "id": 74,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "797:29:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IDiamondCut_$1006",
                                "typeString": "contract IDiamondCut"
                              }
                            },
                            "id": 75,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "diamondCut",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 996,
                            "src": "797:40:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_array$_t_struct$_Facet_$985_memory_ptr_$dyn_memory_ptr_$_t_address_$_t_bytes_memory_ptr_$returns$__$",
                              "typeString": "function (struct IDiamondCut.Facet memory[] memory,address,bytes memory) external"
                            }
                          },
                          "id": 91,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "797:108:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 92,
                        "nodeType": "ExpressionStatement",
                        "src": "797:108:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 100,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 10,
                              "src": "959:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "id": 96,
                                      "name": "diamond",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 20,
                                      "src": "931:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_Diamond_$433",
                                        "typeString": "contract Diamond"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_Diamond_$433",
                                        "typeString": "contract Diamond"
                                      }
                                    ],
                                    "id": 95,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "923:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 94,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "923:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 97,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "923:16:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                ],
                                "id": 93,
                                "name": "IERC173",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1083,
                                "src": "915:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IERC173_$1083_$",
                                  "typeString": "type(contract IERC173)"
                                }
                              },
                              "id": 98,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "915:25:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC173_$1083",
                                "typeString": "contract IERC173"
                              }
                            },
                            "id": 99,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "transferOwnership",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1082,
                            "src": "915:43:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address) external"
                            }
                          },
                          "id": 101,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "915:50:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 102,
                        "nodeType": "ExpressionStatement",
                        "src": "915:50:0"
                      }
                    ]
                  },
                  "functionSelector": "5c948ae3",
                  "id": 104,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "createDiamond",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 18,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 10,
                        "mutability": "mutable",
                        "name": "owner",
                        "nodeType": "VariableDeclaration",
                        "scope": 104,
                        "src": "258:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 9,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "258:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 13,
                        "mutability": "mutable",
                        "name": "_diamondCut",
                        "nodeType": "VariableDeclaration",
                        "scope": 104,
                        "src": "281:40:0",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Facet_$985_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "struct IDiamondCut.Facet[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 11,
                            "name": "IDiamondCut.Facet",
                            "nodeType": "UserDefinedTypeName",
                            "referencedDeclaration": 985,
                            "src": "281:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Facet_$985_storage_ptr",
                              "typeString": "struct IDiamondCut.Facet"
                            }
                          },
                          "id": 12,
                          "nodeType": "ArrayTypeName",
                          "src": "281:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Facet_$985_storage_$dyn_storage_ptr",
                            "typeString": "struct IDiamondCut.Facet[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 15,
                        "mutability": "mutable",
                        "name": "data",
                        "nodeType": "VariableDeclaration",
                        "scope": 104,
                        "src": "331:19:0",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 14,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "331:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 17,
                        "mutability": "mutable",
                        "name": "salt",
                        "nodeType": "VariableDeclaration",
                        "scope": 104,
                        "src": "360:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 16,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "360:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "248:130:0"
                  },
                  "returnParameters": {
                    "id": 21,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 20,
                        "mutability": "mutable",
                        "name": "diamond",
                        "nodeType": "VariableDeclaration",
                        "scope": 104,
                        "src": "405:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Diamond_$433",
                          "typeString": "contract Diamond"
                        },
                        "typeName": {
                          "id": 19,
                          "name": "Diamond",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 433,
                          "src": "405:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_Diamond_$433",
                            "typeString": "contract Diamond"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "404:17:0"
                  },
                  "scope": 105,
                  "src": "226:746:0",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 106,
              "src": "155:819:0"
            }
          ],
          "src": "32:943:0"
        },
        "id": 0
      },
      "solc_0.7/diamond/Diamond.sol": {
        "ast": {
          "absolutePath": "solc_0.7/diamond/Diamond.sol",
          "exportedSymbols": {
            "Diamond": [
              433
            ]
          },
          "id": 434,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 107,
              "literals": [
                "solidity",
                "^",
                "0.7",
                ".1"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:23:1"
            },
            {
              "id": 108,
              "literals": [
                "experimental",
                "ABIEncoderV2"
              ],
              "nodeType": "PragmaDirective",
              "src": "56:33:1"
            },
            {
              "absolutePath": "solc_0.7/diamond/libraries/LibDiamondStorage.sol",
              "file": "./libraries/LibDiamondStorage.sol",
              "id": 109,
              "nodeType": "ImportDirective",
              "scope": 434,
              "sourceUnit": 1584,
              "src": "322:43:1",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "solc_0.7/diamond/libraries/LibDiamondCut.sol",
              "file": "./libraries/LibDiamondCut.sol",
              "id": 110,
              "nodeType": "ImportDirective",
              "scope": 434,
              "sourceUnit": 1535,
              "src": "366:39:1",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "solc_0.7/diamond/facets/OwnershipFacet.sol",
              "file": "./facets/OwnershipFacet.sol",
              "id": 111,
              "nodeType": "ImportDirective",
              "scope": 434,
              "sourceUnit": 977,
              "src": "406:37:1",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "solc_0.7/diamond/facets/DiamondCutFacet.sol",
              "file": "./facets/DiamondCutFacet.sol",
              "id": 112,
              "nodeType": "ImportDirective",
              "scope": 434,
              "sourceUnit": 736,
              "src": "444:38:1",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "solc_0.7/diamond/facets/DiamondLoupeFacet.sol",
              "file": "./facets/DiamondLoupeFacet.sol",
              "id": 113,
              "nodeType": "ImportDirective",
              "scope": 434,
              "sourceUnit": 912,
              "src": "483:40:1",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [
                735,
                911,
                976
              ],
              "contractKind": "contract",
              "fullyImplemented": true,
              "id": 433,
              "linearizedBaseContracts": [
                433
              ],
              "name": "Diamond",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "anonymous": false,
                  "id": 119,
                  "name": "OwnershipTransferred",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 118,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 115,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "previousOwner",
                        "nodeType": "VariableDeclaration",
                        "scope": 119,
                        "src": "575:29:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 114,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "575:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 117,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "newOwner",
                        "nodeType": "VariableDeclaration",
                        "scope": 119,
                        "src": "606:24:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 116,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "606:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "574:57:1"
                  },
                  "src": "548:84:1"
                },
                {
                  "body": {
                    "id": 392,
                    "nodeType": "Block",
                    "src": "673:2497:1",
                    "statements": [
                      {
                        "assignments": [
                          127
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 127,
                            "mutability": "mutable",
                            "name": "ds",
                            "nodeType": "VariableDeclaration",
                            "scope": 392,
                            "src": "683:43:1",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                              "typeString": "struct LibDiamondStorage.DiamondStorage"
                            },
                            "typeName": {
                              "id": 126,
                              "name": "LibDiamondStorage.DiamondStorage",
                              "nodeType": "UserDefinedTypeName",
                              "referencedDeclaration": 1571,
                              "src": "683:32:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                "typeString": "struct LibDiamondStorage.DiamondStorage"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 131,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 128,
                              "name": "LibDiamondStorage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1583,
                              "src": "729:17:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_LibDiamondStorage_$1583_$",
                                "typeString": "type(library LibDiamondStorage)"
                              }
                            },
                            "id": 129,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "diamondStorage",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1582,
                            "src": "729:32:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_DiamondStorage_$1571_storage_ptr_$",
                              "typeString": "function () pure returns (struct LibDiamondStorage.DiamondStorage storage pointer)"
                            }
                          },
                          "id": 130,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "729:34:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                            "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "683:80:1"
                      },
                      {
                        "expression": {
                          "id": 136,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 132,
                              "name": "ds",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 127,
                              "src": "773:2:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                              }
                            },
                            "id": 134,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "contractOwner",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1555,
                            "src": "773:16:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 135,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 121,
                            "src": "792:5:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "773:24:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 137,
                        "nodeType": "ExpressionStatement",
                        "src": "773:24:1"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 141,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "841:1:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 140,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "833:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 139,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "833:7:1",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 142,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "833:10:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "id": 143,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 121,
                              "src": "845:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 138,
                            "name": "OwnershipTransferred",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 119,
                            "src": "812:20:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                              "typeString": "function (address,address)"
                            }
                          },
                          "id": 144,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "812:39:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 145,
                        "nodeType": "EmitStatement",
                        "src": "807:44:1"
                      },
                      {
                        "assignments": [
                          147
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 147,
                            "mutability": "mutable",
                            "name": "diamondCutFacet",
                            "nodeType": "VariableDeclaration",
                            "scope": 392,
                            "src": "862:31:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_DiamondCutFacet_$735",
                              "typeString": "contract DiamondCutFacet"
                            },
                            "typeName": {
                              "id": 146,
                              "name": "DiamondCutFacet",
                              "nodeType": "UserDefinedTypeName",
                              "referencedDeclaration": 735,
                              "src": "862:15:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_DiamondCutFacet_$735",
                                "typeString": "contract DiamondCutFacet"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 151,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 149,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "NewExpression",
                            "src": "896:19:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_creation_nonpayable$__$returns$_t_contract$_DiamondCutFacet_$735_$",
                              "typeString": "function () returns (contract DiamondCutFacet)"
                            },
                            "typeName": {
                              "id": 148,
                              "name": "DiamondCutFacet",
                              "nodeType": "UserDefinedTypeName",
                              "referencedDeclaration": 735,
                              "src": "900:15:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_DiamondCutFacet_$735",
                                "typeString": "contract DiamondCutFacet"
                              }
                            }
                          },
                          "id": 150,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "896:21:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_DiamondCutFacet_$735",
                            "typeString": "contract DiamondCutFacet"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "862:55:1"
                      },
                      {
                        "assignments": [
                          153
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 153,
                            "mutability": "mutable",
                            "name": "diamondLoupeFacet",
                            "nodeType": "VariableDeclaration",
                            "scope": 392,
                            "src": "928:35:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_DiamondLoupeFacet_$911",
                              "typeString": "contract DiamondLoupeFacet"
                            },
                            "typeName": {
                              "id": 152,
                              "name": "DiamondLoupeFacet",
                              "nodeType": "UserDefinedTypeName",
                              "referencedDeclaration": 911,
                              "src": "928:17:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_DiamondLoupeFacet_$911",
                                "typeString": "contract DiamondLoupeFacet"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 157,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 155,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "NewExpression",
                            "src": "966:21:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_creation_nonpayable$__$returns$_t_contract$_DiamondLoupeFacet_$911_$",
                              "typeString": "function () returns (contract DiamondLoupeFacet)"
                            },
                            "typeName": {
                              "id": 154,
                              "name": "DiamondLoupeFacet",
                              "nodeType": "UserDefinedTypeName",
                              "referencedDeclaration": 911,
                              "src": "970:17:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_DiamondLoupeFacet_$911",
                                "typeString": "contract DiamondLoupeFacet"
                              }
                            }
                          },
                          "id": 156,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "966:23:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_DiamondLoupeFacet_$911",
                            "typeString": "contract DiamondLoupeFacet"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "928:61:1"
                      },
                      {
                        "assignments": [
                          159
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 159,
                            "mutability": "mutable",
                            "name": "ownershipFacet",
                            "nodeType": "VariableDeclaration",
                            "scope": 392,
                            "src": "1093:29:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_OwnershipFacet_$976",
                              "typeString": "contract OwnershipFacet"
                            },
                            "typeName": {
                              "id": 158,
                              "name": "OwnershipFacet",
                              "nodeType": "UserDefinedTypeName",
                              "referencedDeclaration": 976,
                              "src": "1093:14:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_OwnershipFacet_$976",
                                "typeString": "contract OwnershipFacet"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 163,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 161,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "NewExpression",
                            "src": "1125:18:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_creation_nonpayable$__$returns$_t_contract$_OwnershipFacet_$976_$",
                              "typeString": "function () returns (contract OwnershipFacet)"
                            },
                            "typeName": {
                              "id": 160,
                              "name": "OwnershipFacet",
                              "nodeType": "UserDefinedTypeName",
                              "referencedDeclaration": 976,
                              "src": "1129:14:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_OwnershipFacet_$976",
                                "typeString": "contract OwnershipFacet"
                              }
                            }
                          },
                          "id": 162,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1125:20:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_OwnershipFacet_$976",
                            "typeString": "contract OwnershipFacet"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1093:52:1"
                      },
                      {
                        "assignments": [
                          168
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 168,
                            "mutability": "mutable",
                            "name": "diamondCut",
                            "nodeType": "VariableDeclaration",
                            "scope": 392,
                            "src": "1156:37:1",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_Facet_$985_memory_ptr_$dyn_memory_ptr",
                              "typeString": "struct IDiamondCut.Facet[]"
                            },
                            "typeName": {
                              "baseType": {
                                "id": 166,
                                "name": "IDiamondCut.Facet",
                                "nodeType": "UserDefinedTypeName",
                                "referencedDeclaration": 985,
                                "src": "1156:17:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Facet_$985_storage_ptr",
                                  "typeString": "struct IDiamondCut.Facet"
                                }
                              },
                              "id": 167,
                              "nodeType": "ArrayTypeName",
                              "src": "1156:19:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Facet_$985_storage_$dyn_storage_ptr",
                                "typeString": "struct IDiamondCut.Facet[]"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 174,
                        "initialValue": {
                          "arguments": [
                            {
                              "hexValue": "33",
                              "id": 172,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1220:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_3_by_1",
                                "typeString": "int_const 3"
                              },
                              "value": "3"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_3_by_1",
                                "typeString": "int_const 3"
                              }
                            ],
                            "id": 171,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "NewExpression",
                            "src": "1196:23:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_Facet_$985_memory_ptr_$dyn_memory_ptr_$",
                              "typeString": "function (uint256) pure returns (struct IDiamondCut.Facet memory[] memory)"
                            },
                            "typeName": {
                              "baseType": {
                                "id": 169,
                                "name": "IDiamondCut.Facet",
                                "nodeType": "UserDefinedTypeName",
                                "referencedDeclaration": 985,
                                "src": "1200:17:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Facet_$985_storage_ptr",
                                  "typeString": "struct IDiamondCut.Facet"
                                }
                              },
                              "id": 170,
                              "nodeType": "ArrayTypeName",
                              "src": "1200:19:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Facet_$985_storage_$dyn_storage_ptr",
                                "typeString": "struct IDiamondCut.Facet[]"
                              }
                            }
                          },
                          "id": 173,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1196:26:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Facet_$985_memory_ptr_$dyn_memory_ptr",
                            "typeString": "struct IDiamondCut.Facet memory[] memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1156:66:1"
                      },
                      {
                        "expression": {
                          "id": 183,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "id": 175,
                                "name": "diamondCut",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 168,
                                "src": "1271:10:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_struct$_Facet_$985_memory_ptr_$dyn_memory_ptr",
                                  "typeString": "struct IDiamondCut.Facet memory[] memory"
                                }
                              },
                              "id": 177,
                              "indexExpression": {
                                "hexValue": "30",
                                "id": 176,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1282:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "1271:13:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Facet_$985_memory_ptr",
                                "typeString": "struct IDiamondCut.Facet memory"
                              }
                            },
                            "id": 178,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "facetAddress",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 981,
                            "src": "1271:26:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 181,
                                "name": "diamondCutFacet",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 147,
                                "src": "1308:15:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_DiamondCutFacet_$735",
                                  "typeString": "contract DiamondCutFacet"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_DiamondCutFacet_$735",
                                  "typeString": "contract DiamondCutFacet"
                                }
                              ],
                              "id": 180,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "1300:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 179,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "1300:7:1",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 182,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1300:24:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "1271:53:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 184,
                        "nodeType": "ExpressionStatement",
                        "src": "1271:53:1"
                      },
                      {
                        "expression": {
                          "id": 194,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "id": 185,
                                "name": "diamondCut",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 168,
                                "src": "1334:10:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_struct$_Facet_$985_memory_ptr_$dyn_memory_ptr",
                                  "typeString": "struct IDiamondCut.Facet memory[] memory"
                                }
                              },
                              "id": 187,
                              "indexExpression": {
                                "hexValue": "30",
                                "id": 186,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1345:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "1334:13:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Facet_$985_memory_ptr",
                                "typeString": "struct IDiamondCut.Facet memory"
                              }
                            },
                            "id": 188,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "functionSelectors",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 984,
                            "src": "1334:31:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_bytes4_$dyn_memory_ptr",
                              "typeString": "bytes4[] memory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "hexValue": "31",
                                "id": 192,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1381:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1_by_1",
                                  "typeString": "int_const 1"
                                },
                                "value": "1"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_1_by_1",
                                  "typeString": "int_const 1"
                                }
                              ],
                              "id": 191,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "NewExpression",
                              "src": "1368:12:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes4_$dyn_memory_ptr_$",
                                "typeString": "function (uint256) pure returns (bytes4[] memory)"
                              },
                              "typeName": {
                                "baseType": {
                                  "id": 189,
                                  "name": "bytes4",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "1372:6:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  }
                                },
                                "id": 190,
                                "nodeType": "ArrayTypeName",
                                "src": "1372:8:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_bytes4_$dyn_storage_ptr",
                                  "typeString": "bytes4[]"
                                }
                              }
                            },
                            "id": 193,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1368:15:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_bytes4_$dyn_memory_ptr",
                              "typeString": "bytes4[] memory"
                            }
                          },
                          "src": "1334:49:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_bytes4_$dyn_memory_ptr",
                            "typeString": "bytes4[] memory"
                          }
                        },
                        "id": 195,
                        "nodeType": "ExpressionStatement",
                        "src": "1334:49:1"
                      },
                      {
                        "expression": {
                          "id": 205,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "expression": {
                                "baseExpression": {
                                  "id": 196,
                                  "name": "diamondCut",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 168,
                                  "src": "1393:10:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_struct$_Facet_$985_memory_ptr_$dyn_memory_ptr",
                                    "typeString": "struct IDiamondCut.Facet memory[] memory"
                                  }
                                },
                                "id": 198,
                                "indexExpression": {
                                  "hexValue": "30",
                                  "id": 197,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1404:1:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "1393:13:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Facet_$985_memory_ptr",
                                  "typeString": "struct IDiamondCut.Facet memory"
                                }
                              },
                              "id": 199,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "functionSelectors",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 984,
                              "src": "1393:31:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bytes4_$dyn_memory_ptr",
                                "typeString": "bytes4[] memory"
                              }
                            },
                            "id": 201,
                            "indexExpression": {
                              "hexValue": "30",
                              "id": 200,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1425:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1393:34:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "expression": {
                                "id": 202,
                                "name": "DiamondCutFacet",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 735,
                                "src": "1430:15:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_DiamondCutFacet_$735_$",
                                  "typeString": "type(contract DiamondCutFacet)"
                                }
                              },
                              "id": 203,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "diamondCut",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 535,
                              "src": "1430:26:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_declaration_nonpayable$_t_array$_t_struct$_Facet_$985_calldata_ptr_$dyn_calldata_ptr_$_t_address_$_t_bytes_calldata_ptr_$returns$__$",
                                "typeString": "function DiamondCutFacet.diamondCut(struct IDiamondCut.Facet calldata[] calldata,address,bytes calldata)"
                              }
                            },
                            "id": 204,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "selector",
                            "nodeType": "MemberAccess",
                            "src": "1430:35:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "src": "1393:72:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "id": 206,
                        "nodeType": "ExpressionStatement",
                        "src": "1393:72:1"
                      },
                      {
                        "expression": {
                          "id": 215,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "id": 207,
                                "name": "diamondCut",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 168,
                                "src": "1518:10:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_struct$_Facet_$985_memory_ptr_$dyn_memory_ptr",
                                  "typeString": "struct IDiamondCut.Facet memory[] memory"
                                }
                              },
                              "id": 209,
                              "indexExpression": {
                                "hexValue": "31",
                                "id": 208,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1529:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1_by_1",
                                  "typeString": "int_const 1"
                                },
                                "value": "1"
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "1518:13:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Facet_$985_memory_ptr",
                                "typeString": "struct IDiamondCut.Facet memory"
                              }
                            },
                            "id": 210,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "facetAddress",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 981,
                            "src": "1518:26:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 213,
                                "name": "diamondLoupeFacet",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 153,
                                "src": "1555:17:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_DiamondLoupeFacet_$911",
                                  "typeString": "contract DiamondLoupeFacet"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_DiamondLoupeFacet_$911",
                                  "typeString": "contract DiamondLoupeFacet"
                                }
                              ],
                              "id": 212,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "1547:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 211,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "1547:7:1",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 214,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1547:26:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "1518:55:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 216,
                        "nodeType": "ExpressionStatement",
                        "src": "1518:55:1"
                      },
                      {
                        "expression": {
                          "id": 226,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "id": 217,
                                "name": "diamondCut",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 168,
                                "src": "1583:10:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_struct$_Facet_$985_memory_ptr_$dyn_memory_ptr",
                                  "typeString": "struct IDiamondCut.Facet memory[] memory"
                                }
                              },
                              "id": 219,
                              "indexExpression": {
                                "hexValue": "31",
                                "id": 218,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1594:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1_by_1",
                                  "typeString": "int_const 1"
                                },
                                "value": "1"
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "1583:13:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Facet_$985_memory_ptr",
                                "typeString": "struct IDiamondCut.Facet memory"
                              }
                            },
                            "id": 220,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "functionSelectors",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 984,
                            "src": "1583:31:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_bytes4_$dyn_memory_ptr",
                              "typeString": "bytes4[] memory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "hexValue": "35",
                                "id": 224,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1630:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_5_by_1",
                                  "typeString": "int_const 5"
                                },
                                "value": "5"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_5_by_1",
                                  "typeString": "int_const 5"
                                }
                              ],
                              "id": 223,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "NewExpression",
                              "src": "1617:12:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes4_$dyn_memory_ptr_$",
                                "typeString": "function (uint256) pure returns (bytes4[] memory)"
                              },
                              "typeName": {
                                "baseType": {
                                  "id": 221,
                                  "name": "bytes4",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "1621:6:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  }
                                },
                                "id": 222,
                                "nodeType": "ArrayTypeName",
                                "src": "1621:8:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_bytes4_$dyn_storage_ptr",
                                  "typeString": "bytes4[]"
                                }
                              }
                            },
                            "id": 225,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1617:15:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_bytes4_$dyn_memory_ptr",
                              "typeString": "bytes4[] memory"
                            }
                          },
                          "src": "1583:49:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_bytes4_$dyn_memory_ptr",
                            "typeString": "bytes4[] memory"
                          }
                        },
                        "id": 227,
                        "nodeType": "ExpressionStatement",
                        "src": "1583:49:1"
                      },
                      {
                        "expression": {
                          "id": 237,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "expression": {
                                "baseExpression": {
                                  "id": 228,
                                  "name": "diamondCut",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 168,
                                  "src": "1642:10:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_struct$_Facet_$985_memory_ptr_$dyn_memory_ptr",
                                    "typeString": "struct IDiamondCut.Facet memory[] memory"
                                  }
                                },
                                "id": 230,
                                "indexExpression": {
                                  "hexValue": "31",
                                  "id": 229,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1653:1:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "1642:13:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Facet_$985_memory_ptr",
                                  "typeString": "struct IDiamondCut.Facet memory"
                                }
                              },
                              "id": 231,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "functionSelectors",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 984,
                              "src": "1642:31:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bytes4_$dyn_memory_ptr",
                                "typeString": "bytes4[] memory"
                              }
                            },
                            "id": 233,
                            "indexExpression": {
                              "hexValue": "30",
                              "id": 232,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1674:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1642:34:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "expression": {
                                "id": 234,
                                "name": "DiamondLoupeFacet",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 911,
                                "src": "1679:17:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_DiamondLoupeFacet_$911_$",
                                  "typeString": "type(contract DiamondLoupeFacet)"
                                }
                              },
                              "id": 235,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "facetFunctionSelectors",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 840,
                              "src": "1679:40:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_declaration_view$_t_address_$returns$_t_array$_t_bytes4_$dyn_memory_ptr_$",
                                "typeString": "function DiamondLoupeFacet.facetFunctionSelectors(address) view returns (bytes4[] memory)"
                              }
                            },
                            "id": 236,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "selector",
                            "nodeType": "MemberAccess",
                            "src": "1679:49:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "src": "1642:86:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "id": 238,
                        "nodeType": "ExpressionStatement",
                        "src": "1642:86:1"
                      },
                      {
                        "expression": {
                          "id": 248,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "expression": {
                                "baseExpression": {
                                  "id": 239,
                                  "name": "diamondCut",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 168,
                                  "src": "1738:10:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_struct$_Facet_$985_memory_ptr_$dyn_memory_ptr",
                                    "typeString": "struct IDiamondCut.Facet memory[] memory"
                                  }
                                },
                                "id": 241,
                                "indexExpression": {
                                  "hexValue": "31",
                                  "id": 240,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1749:1:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "1738:13:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Facet_$985_memory_ptr",
                                  "typeString": "struct IDiamondCut.Facet memory"
                                }
                              },
                              "id": 242,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "functionSelectors",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 984,
                              "src": "1738:31:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bytes4_$dyn_memory_ptr",
                                "typeString": "bytes4[] memory"
                              }
                            },
                            "id": 244,
                            "indexExpression": {
                              "hexValue": "31",
                              "id": 243,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1770:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              },
                              "value": "1"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1738:34:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "expression": {
                                "id": 245,
                                "name": "DiamondLoupeFacet",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 911,
                                "src": "1775:17:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_DiamondLoupeFacet_$911_$",
                                  "typeString": "type(contract DiamondLoupeFacet)"
                                }
                              },
                              "id": 246,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "facets",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 813,
                              "src": "1775:24:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_declaration_view$__$returns$_t_array$_t_struct$_Facet_$1015_memory_ptr_$dyn_memory_ptr_$",
                                "typeString": "function DiamondLoupeFacet.facets() view returns (struct IDiamondLoupe.Facet memory[] memory)"
                              }
                            },
                            "id": 247,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "selector",
                            "nodeType": "MemberAccess",
                            "src": "1775:33:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "src": "1738:70:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "id": 249,
                        "nodeType": "ExpressionStatement",
                        "src": "1738:70:1"
                      },
                      {
                        "expression": {
                          "id": 259,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "expression": {
                                "baseExpression": {
                                  "id": 250,
                                  "name": "diamondCut",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 168,
                                  "src": "1818:10:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_struct$_Facet_$985_memory_ptr_$dyn_memory_ptr",
                                    "typeString": "struct IDiamondCut.Facet memory[] memory"
                                  }
                                },
                                "id": 252,
                                "indexExpression": {
                                  "hexValue": "31",
                                  "id": 251,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1829:1:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "1818:13:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Facet_$985_memory_ptr",
                                  "typeString": "struct IDiamondCut.Facet memory"
                                }
                              },
                              "id": 253,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "functionSelectors",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 984,
                              "src": "1818:31:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bytes4_$dyn_memory_ptr",
                                "typeString": "bytes4[] memory"
                              }
                            },
                            "id": 255,
                            "indexExpression": {
                              "hexValue": "32",
                              "id": 254,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1850:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_2_by_1",
                                "typeString": "int_const 2"
                              },
                              "value": "2"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1818:34:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "expression": {
                                "id": 256,
                                "name": "DiamondLoupeFacet",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 911,
                                "src": "1855:17:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_DiamondLoupeFacet_$911_$",
                                  "typeString": "type(contract DiamondLoupeFacet)"
                                }
                              },
                              "id": 257,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "facetAddress",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 888,
                              "src": "1855:30:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_declaration_view$_t_bytes4_$returns$_t_address_$",
                                "typeString": "function DiamondLoupeFacet.facetAddress(bytes4) view returns (address)"
                              }
                            },
                            "id": 258,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "selector",
                            "nodeType": "MemberAccess",
                            "src": "1855:39:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "src": "1818:76:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "id": 260,
                        "nodeType": "ExpressionStatement",
                        "src": "1818:76:1"
                      },
                      {
                        "expression": {
                          "id": 270,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "expression": {
                                "baseExpression": {
                                  "id": 261,
                                  "name": "diamondCut",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 168,
                                  "src": "1904:10:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_struct$_Facet_$985_memory_ptr_$dyn_memory_ptr",
                                    "typeString": "struct IDiamondCut.Facet memory[] memory"
                                  }
                                },
                                "id": 263,
                                "indexExpression": {
                                  "hexValue": "31",
                                  "id": 262,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1915:1:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "1904:13:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Facet_$985_memory_ptr",
                                  "typeString": "struct IDiamondCut.Facet memory"
                                }
                              },
                              "id": 264,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "functionSelectors",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 984,
                              "src": "1904:31:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bytes4_$dyn_memory_ptr",
                                "typeString": "bytes4[] memory"
                              }
                            },
                            "id": 266,
                            "indexExpression": {
                              "hexValue": "33",
                              "id": 265,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1936:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_3_by_1",
                                "typeString": "int_const 3"
                              },
                              "value": "3"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1904:34:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "expression": {
                                "id": 267,
                                "name": "DiamondLoupeFacet",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 911,
                                "src": "1941:17:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_DiamondLoupeFacet_$911_$",
                                  "typeString": "type(contract DiamondLoupeFacet)"
                                }
                              },
                              "id": 268,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "facetAddresses",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 862,
                              "src": "1941:32:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_declaration_view$__$returns$_t_array$_t_address_$dyn_memory_ptr_$",
                                "typeString": "function DiamondLoupeFacet.facetAddresses() view returns (address[] memory)"
                              }
                            },
                            "id": 269,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "selector",
                            "nodeType": "MemberAccess",
                            "src": "1941:41:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "src": "1904:78:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "id": 271,
                        "nodeType": "ExpressionStatement",
                        "src": "1904:78:1"
                      },
                      {
                        "expression": {
                          "id": 281,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "expression": {
                                "baseExpression": {
                                  "id": 272,
                                  "name": "diamondCut",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 168,
                                  "src": "1992:10:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_struct$_Facet_$985_memory_ptr_$dyn_memory_ptr",
                                    "typeString": "struct IDiamondCut.Facet memory[] memory"
                                  }
                                },
                                "id": 274,
                                "indexExpression": {
                                  "hexValue": "31",
                                  "id": 273,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2003:1:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "1992:13:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Facet_$985_memory_ptr",
                                  "typeString": "struct IDiamondCut.Facet memory"
                                }
                              },
                              "id": 275,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "functionSelectors",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 984,
                              "src": "1992:31:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bytes4_$dyn_memory_ptr",
                                "typeString": "bytes4[] memory"
                              }
                            },
                            "id": 277,
                            "indexExpression": {
                              "hexValue": "34",
                              "id": 276,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2024:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_4_by_1",
                                "typeString": "int_const 4"
                              },
                              "value": "4"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1992:34:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "expression": {
                                "id": 278,
                                "name": "DiamondLoupeFacet",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 911,
                                "src": "2029:17:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_DiamondLoupeFacet_$911_$",
                                  "typeString": "type(contract DiamondLoupeFacet)"
                                }
                              },
                              "id": 279,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "supportsInterface",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 910,
                              "src": "2029:35:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_declaration_view$_t_bytes4_$returns$_t_bool_$",
                                "typeString": "function DiamondLoupeFacet.supportsInterface(bytes4) view returns (bool)"
                              }
                            },
                            "id": 280,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "selector",
                            "nodeType": "MemberAccess",
                            "src": "2029:44:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "src": "1992:81:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "id": 282,
                        "nodeType": "ExpressionStatement",
                        "src": "1992:81:1"
                      },
                      {
                        "expression": {
                          "id": 291,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "id": 283,
                                "name": "diamondCut",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 168,
                                "src": "2122:10:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_struct$_Facet_$985_memory_ptr_$dyn_memory_ptr",
                                  "typeString": "struct IDiamondCut.Facet memory[] memory"
                                }
                              },
                              "id": 285,
                              "indexExpression": {
                                "hexValue": "32",
                                "id": 284,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2133:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_2_by_1",
                                  "typeString": "int_const 2"
                                },
                                "value": "2"
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "2122:13:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Facet_$985_memory_ptr",
                                "typeString": "struct IDiamondCut.Facet memory"
                              }
                            },
                            "id": 286,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "facetAddress",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 981,
                            "src": "2122:26:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 289,
                                "name": "ownershipFacet",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 159,
                                "src": "2159:14:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_OwnershipFacet_$976",
                                  "typeString": "contract OwnershipFacet"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_OwnershipFacet_$976",
                                  "typeString": "contract OwnershipFacet"
                                }
                              ],
                              "id": 288,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "2151:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 287,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "2151:7:1",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 290,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2151:23:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "2122:52:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 292,
                        "nodeType": "ExpressionStatement",
                        "src": "2122:52:1"
                      },
                      {
                        "expression": {
                          "id": 302,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "id": 293,
                                "name": "diamondCut",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 168,
                                "src": "2184:10:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_struct$_Facet_$985_memory_ptr_$dyn_memory_ptr",
                                  "typeString": "struct IDiamondCut.Facet memory[] memory"
                                }
                              },
                              "id": 295,
                              "indexExpression": {
                                "hexValue": "32",
                                "id": 294,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2195:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_2_by_1",
                                  "typeString": "int_const 2"
                                },
                                "value": "2"
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "2184:13:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Facet_$985_memory_ptr",
                                "typeString": "struct IDiamondCut.Facet memory"
                              }
                            },
                            "id": 296,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "functionSelectors",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 984,
                            "src": "2184:31:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_bytes4_$dyn_memory_ptr",
                              "typeString": "bytes4[] memory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "hexValue": "32",
                                "id": 300,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2231:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_2_by_1",
                                  "typeString": "int_const 2"
                                },
                                "value": "2"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_2_by_1",
                                  "typeString": "int_const 2"
                                }
                              ],
                              "id": 299,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "NewExpression",
                              "src": "2218:12:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes4_$dyn_memory_ptr_$",
                                "typeString": "function (uint256) pure returns (bytes4[] memory)"
                              },
                              "typeName": {
                                "baseType": {
                                  "id": 297,
                                  "name": "bytes4",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "2222:6:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  }
                                },
                                "id": 298,
                                "nodeType": "ArrayTypeName",
                                "src": "2222:8:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_bytes4_$dyn_storage_ptr",
                                  "typeString": "bytes4[]"
                                }
                              }
                            },
                            "id": 301,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2218:15:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_bytes4_$dyn_memory_ptr",
                              "typeString": "bytes4[] memory"
                            }
                          },
                          "src": "2184:49:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_bytes4_$dyn_memory_ptr",
                            "typeString": "bytes4[] memory"
                          }
                        },
                        "id": 303,
                        "nodeType": "ExpressionStatement",
                        "src": "2184:49:1"
                      },
                      {
                        "expression": {
                          "id": 313,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "expression": {
                                "baseExpression": {
                                  "id": 304,
                                  "name": "diamondCut",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 168,
                                  "src": "2243:10:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_struct$_Facet_$985_memory_ptr_$dyn_memory_ptr",
                                    "typeString": "struct IDiamondCut.Facet memory[] memory"
                                  }
                                },
                                "id": 306,
                                "indexExpression": {
                                  "hexValue": "32",
                                  "id": 305,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2254:1:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_2_by_1",
                                    "typeString": "int_const 2"
                                  },
                                  "value": "2"
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "2243:13:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Facet_$985_memory_ptr",
                                  "typeString": "struct IDiamondCut.Facet memory"
                                }
                              },
                              "id": 307,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "functionSelectors",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 984,
                              "src": "2243:31:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bytes4_$dyn_memory_ptr",
                                "typeString": "bytes4[] memory"
                              }
                            },
                            "id": 309,
                            "indexExpression": {
                              "hexValue": "30",
                              "id": 308,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2275:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2243:34:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "expression": {
                                "id": 310,
                                "name": "OwnershipFacet",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 976,
                                "src": "2280:14:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_OwnershipFacet_$976_$",
                                  "typeString": "type(contract OwnershipFacet)"
                                }
                              },
                              "id": 311,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "transferOwnership",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 957,
                              "src": "2280:32:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_declaration_nonpayable$_t_address_$returns$__$",
                                "typeString": "function OwnershipFacet.transferOwnership(address)"
                              }
                            },
                            "id": 312,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "selector",
                            "nodeType": "MemberAccess",
                            "src": "2280:41:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "src": "2243:78:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "id": 314,
                        "nodeType": "ExpressionStatement",
                        "src": "2243:78:1"
                      },
                      {
                        "expression": {
                          "id": 324,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "expression": {
                                "baseExpression": {
                                  "id": 315,
                                  "name": "diamondCut",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 168,
                                  "src": "2331:10:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_struct$_Facet_$985_memory_ptr_$dyn_memory_ptr",
                                    "typeString": "struct IDiamondCut.Facet memory[] memory"
                                  }
                                },
                                "id": 317,
                                "indexExpression": {
                                  "hexValue": "32",
                                  "id": 316,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2342:1:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_2_by_1",
                                    "typeString": "int_const 2"
                                  },
                                  "value": "2"
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "2331:13:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Facet_$985_memory_ptr",
                                  "typeString": "struct IDiamondCut.Facet memory"
                                }
                              },
                              "id": 318,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "functionSelectors",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 984,
                              "src": "2331:31:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bytes4_$dyn_memory_ptr",
                                "typeString": "bytes4[] memory"
                              }
                            },
                            "id": 320,
                            "indexExpression": {
                              "hexValue": "31",
                              "id": 319,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2363:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              },
                              "value": "1"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2331:34:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "expression": {
                                "id": 321,
                                "name": "OwnershipFacet",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 976,
                                "src": "2368:14:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_OwnershipFacet_$976_$",
                                  "typeString": "type(contract OwnershipFacet)"
                                }
                              },
                              "id": 322,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "owner",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 975,
                              "src": "2368:20:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_declaration_view$__$returns$_t_address_$",
                                "typeString": "function OwnershipFacet.owner() view returns (address)"
                              }
                            },
                            "id": 323,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "selector",
                            "nodeType": "MemberAccess",
                            "src": "2368:29:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "src": "2331:66:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "id": 325,
                        "nodeType": "ExpressionStatement",
                        "src": "2331:66:1"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 329,
                              "name": "diamondCut",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 168,
                              "src": "2511:10:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Facet_$985_memory_ptr_$dyn_memory_ptr",
                                "typeString": "struct IDiamondCut.Facet memory[] memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_array$_t_struct$_Facet_$985_memory_ptr_$dyn_memory_ptr",
                                "typeString": "struct IDiamondCut.Facet memory[] memory"
                              }
                            ],
                            "expression": {
                              "id": 326,
                              "name": "LibDiamondCut",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1534,
                              "src": "2486:13:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_LibDiamondCut_$1534_$",
                                "typeString": "type(library LibDiamondCut)"
                              }
                            },
                            "id": 328,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "diamondCut",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1289,
                            "src": "2486:24:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_struct$_Facet_$985_memory_ptr_$dyn_memory_ptr_$returns$__$",
                              "typeString": "function (struct IDiamondCut.Facet memory[] memory)"
                            }
                          },
                          "id": 330,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2486:36:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 331,
                        "nodeType": "ExpressionStatement",
                        "src": "2486:36:1"
                      },
                      {
                        "expression": {
                          "id": 340,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "expression": {
                                "id": 332,
                                "name": "ds",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 127,
                                "src": "2581:2:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                  "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                                }
                              },
                              "id": 337,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "supportedInterfaces",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1570,
                              "src": "2581:22:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes4_$_t_bool_$",
                                "typeString": "mapping(bytes4 => bool)"
                              }
                            },
                            "id": 338,
                            "indexExpression": {
                              "expression": {
                                "expression": {
                                  "id": 334,
                                  "name": "IERC165",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1059,
                                  "src": "2604:7:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_IERC165_$1059_$",
                                    "typeString": "type(contract IERC165)"
                                  }
                                },
                                "id": 335,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "supportsInterface",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1058,
                                "src": "2604:25:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_declaration_view$_t_bytes4_$returns$_t_bool_$",
                                  "typeString": "function IERC165.supportsInterface(bytes4) view returns (bool)"
                                }
                              },
                              "id": 336,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "selector",
                              "nodeType": "MemberAccess",
                              "src": "2604:34:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2581:58:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "74727565",
                            "id": 339,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2642:4:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "2581:65:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 341,
                        "nodeType": "ExpressionStatement",
                        "src": "2581:65:1"
                      },
                      {
                        "expression": {
                          "id": 350,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "expression": {
                                "id": 342,
                                "name": "ds",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 127,
                                "src": "2679:2:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                  "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                                }
                              },
                              "id": 347,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "supportedInterfaces",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1570,
                              "src": "2679:22:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes4_$_t_bool_$",
                                "typeString": "mapping(bytes4 => bool)"
                              }
                            },
                            "id": 348,
                            "indexExpression": {
                              "expression": {
                                "expression": {
                                  "id": 344,
                                  "name": "DiamondCutFacet",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 735,
                                  "src": "2702:15:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_DiamondCutFacet_$735_$",
                                    "typeString": "type(contract DiamondCutFacet)"
                                  }
                                },
                                "id": 345,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "diamondCut",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 535,
                                "src": "2702:26:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_declaration_nonpayable$_t_array$_t_struct$_Facet_$985_calldata_ptr_$dyn_calldata_ptr_$_t_address_$_t_bytes_calldata_ptr_$returns$__$",
                                  "typeString": "function DiamondCutFacet.diamondCut(struct IDiamondCut.Facet calldata[] calldata,address,bytes calldata)"
                                }
                              },
                              "id": 346,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "selector",
                              "nodeType": "MemberAccess",
                              "src": "2702:35:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2679:59:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "74727565",
                            "id": 349,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2741:4:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "2679:66:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 351,
                        "nodeType": "ExpressionStatement",
                        "src": "2679:66:1"
                      },
                      {
                        "assignments": [
                          353
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 353,
                            "mutability": "mutable",
                            "name": "interfaceID",
                            "nodeType": "VariableDeclaration",
                            "scope": 392,
                            "src": "2780:18:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            },
                            "typeName": {
                              "id": 352,
                              "name": "bytes4",
                              "nodeType": "ElementaryTypeName",
                              "src": "2780:6:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 369,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          },
                          "id": 368,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            },
                            "id": 364,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "leftExpression": {
                              "commonType": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              },
                              "id": 360,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "expression": {
                                    "id": 354,
                                    "name": "IDiamondLoupe",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1047,
                                    "src": "2801:13:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_contract$_IDiamondLoupe_$1047_$",
                                      "typeString": "type(contract IDiamondLoupe)"
                                    }
                                  },
                                  "id": 355,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "memberName": "facets",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1022,
                                  "src": "2801:20:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_declaration_view$__$returns$_t_array$_t_struct$_Facet_$1015_memory_ptr_$dyn_memory_ptr_$",
                                    "typeString": "function IDiamondLoupe.facets() view returns (struct IDiamondLoupe.Facet memory[] memory)"
                                  }
                                },
                                "id": 356,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "selector",
                                "nodeType": "MemberAccess",
                                "src": "2801:29:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "^",
                              "rightExpression": {
                                "expression": {
                                  "expression": {
                                    "id": 357,
                                    "name": "IDiamondLoupe",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1047,
                                    "src": "2845:13:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_contract$_IDiamondLoupe_$1047_$",
                                      "typeString": "type(contract IDiamondLoupe)"
                                    }
                                  },
                                  "id": 358,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "memberName": "facetFunctionSelectors",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1031,
                                  "src": "2845:36:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_declaration_view$_t_address_$returns$_t_array$_t_bytes4_$dyn_memory_ptr_$",
                                    "typeString": "function IDiamondLoupe.facetFunctionSelectors(address) view returns (bytes4[] memory)"
                                  }
                                },
                                "id": 359,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "selector",
                                "nodeType": "MemberAccess",
                                "src": "2845:45:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              "src": "2801:89:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "^",
                            "rightExpression": {
                              "expression": {
                                "expression": {
                                  "id": 361,
                                  "name": "IDiamondLoupe",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1047,
                                  "src": "2905:13:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_IDiamondLoupe_$1047_$",
                                    "typeString": "type(contract IDiamondLoupe)"
                                  }
                                },
                                "id": 362,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "facetAddresses",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1038,
                                "src": "2905:28:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_declaration_view$__$returns$_t_array$_t_address_$dyn_memory_ptr_$",
                                  "typeString": "function IDiamondLoupe.facetAddresses() view returns (address[] memory)"
                                }
                              },
                              "id": 363,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "selector",
                              "nodeType": "MemberAccess",
                              "src": "2905:37:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            "src": "2801:141:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "^",
                          "rightExpression": {
                            "expression": {
                              "expression": {
                                "id": 365,
                                "name": "IDiamondLoupe",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1047,
                                "src": "2957:13:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IDiamondLoupe_$1047_$",
                                  "typeString": "type(contract IDiamondLoupe)"
                                }
                              },
                              "id": 366,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "facetAddress",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1046,
                              "src": "2957:26:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_declaration_view$_t_bytes4_$returns$_t_address_$",
                                "typeString": "function IDiamondLoupe.facetAddress(bytes4) view returns (address)"
                              }
                            },
                            "id": 367,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "selector",
                            "nodeType": "MemberAccess",
                            "src": "2957:35:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "src": "2801:191:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2780:212:1"
                      },
                      {
                        "expression": {
                          "id": 376,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "expression": {
                                "id": 370,
                                "name": "ds",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 127,
                                "src": "3002:2:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                  "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                                }
                              },
                              "id": 373,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "supportedInterfaces",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1570,
                              "src": "3002:22:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes4_$_t_bool_$",
                                "typeString": "mapping(bytes4 => bool)"
                              }
                            },
                            "id": 374,
                            "indexExpression": {
                              "id": 372,
                              "name": "interfaceID",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 353,
                              "src": "3025:11:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "3002:35:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "74727565",
                            "id": 375,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3040:4:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "3002:42:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 377,
                        "nodeType": "ExpressionStatement",
                        "src": "3002:42:1"
                      },
                      {
                        "expression": {
                          "id": 390,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "expression": {
                                "id": 378,
                                "name": "ds",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 127,
                                "src": "3073:2:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                  "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                                }
                              },
                              "id": 387,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "supportedInterfaces",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1570,
                              "src": "3073:22:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes4_$_t_bool_$",
                                "typeString": "mapping(bytes4 => bool)"
                              }
                            },
                            "id": 388,
                            "indexExpression": {
                              "commonType": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              },
                              "id": 386,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "expression": {
                                    "id": 380,
                                    "name": "IERC173",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1083,
                                    "src": "3096:7:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_contract$_IERC173_$1083_$",
                                      "typeString": "type(contract IERC173)"
                                    }
                                  },
                                  "id": 381,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "memberName": "transferOwnership",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1082,
                                  "src": "3096:25:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_declaration_nonpayable$_t_address_$returns$__$",
                                    "typeString": "function IERC173.transferOwnership(address)"
                                  }
                                },
                                "id": 382,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "selector",
                                "nodeType": "MemberAccess",
                                "src": "3096:34:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "^",
                              "rightExpression": {
                                "expression": {
                                  "expression": {
                                    "id": 383,
                                    "name": "IERC173",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1083,
                                    "src": "3133:7:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_contract$_IERC173_$1083_$",
                                      "typeString": "type(contract IERC173)"
                                    }
                                  },
                                  "id": 384,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "memberName": "owner",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1076,
                                  "src": "3133:13:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_declaration_view$__$returns$_t_address_$",
                                    "typeString": "function IERC173.owner() view returns (address)"
                                  }
                                },
                                "id": 385,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "selector",
                                "nodeType": "MemberAccess",
                                "src": "3133:22:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              "src": "3096:59:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "3073:83:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "74727565",
                            "id": 389,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3159:4:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "3073:90:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 391,
                        "nodeType": "ExpressionStatement",
                        "src": "3073:90:1"
                      }
                    ]
                  },
                  "id": 393,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 122,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 121,
                        "mutability": "mutable",
                        "name": "owner",
                        "nodeType": "VariableDeclaration",
                        "scope": 393,
                        "src": "650:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 120,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "650:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "649:15:1"
                  },
                  "returnParameters": {
                    "id": 123,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "673:0:1"
                  },
                  "scope": 433,
                  "src": "638:2532:1",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 427,
                    "nodeType": "Block",
                    "src": "3324:757:1",
                    "statements": [
                      {
                        "assignments": [
                          399
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 399,
                            "mutability": "mutable",
                            "name": "ds",
                            "nodeType": "VariableDeclaration",
                            "scope": 427,
                            "src": "3334:43:1",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                              "typeString": "struct LibDiamondStorage.DiamondStorage"
                            },
                            "typeName": {
                              "id": 398,
                              "name": "LibDiamondStorage.DiamondStorage",
                              "nodeType": "UserDefinedTypeName",
                              "referencedDeclaration": 1571,
                              "src": "3334:32:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                "typeString": "struct LibDiamondStorage.DiamondStorage"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 400,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3334:43:1"
                      },
                      {
                        "assignments": [
                          402
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 402,
                            "mutability": "mutable",
                            "name": "position",
                            "nodeType": "VariableDeclaration",
                            "scope": 427,
                            "src": "3387:16:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            "typeName": {
                              "id": 401,
                              "name": "bytes32",
                              "nodeType": "ElementaryTypeName",
                              "src": "3387:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 405,
                        "initialValue": {
                          "expression": {
                            "id": 403,
                            "name": "LibDiamondStorage",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1583,
                            "src": "3406:17:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_LibDiamondStorage_$1583_$",
                              "typeString": "type(library LibDiamondStorage)"
                            }
                          },
                          "id": 404,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "DIAMOND_STORAGE_POSITION",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1542,
                          "src": "3406:42:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3387:61:1"
                      },
                      {
                        "AST": {
                          "nodeType": "YulBlock",
                          "src": "3467:43:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "3481:19:1",
                              "value": {
                                "name": "position",
                                "nodeType": "YulIdentifier",
                                "src": "3492:8:1"
                              },
                              "variableNames": [
                                {
                                  "name": "ds.slot",
                                  "nodeType": "YulIdentifier",
                                  "src": "3481:7:1"
                                }
                              ]
                            }
                          ]
                        },
                        "evmVersion": "istanbul",
                        "externalReferences": [
                          {
                            "declaration": 399,
                            "isOffset": false,
                            "isSlot": true,
                            "src": "3481:7:1",
                            "valueSize": 1
                          },
                          {
                            "declaration": 402,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "3492:8:1",
                            "valueSize": 1
                          }
                        ],
                        "id": 406,
                        "nodeType": "InlineAssembly",
                        "src": "3458:52:1"
                      },
                      {
                        "assignments": [
                          408
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 408,
                            "mutability": "mutable",
                            "name": "facet",
                            "nodeType": "VariableDeclaration",
                            "scope": 427,
                            "src": "3519:13:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 407,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "3519:7:1",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 415,
                        "initialValue": {
                          "expression": {
                            "baseExpression": {
                              "expression": {
                                "id": 409,
                                "name": "ds",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 399,
                                "src": "3535:2:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                  "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                                }
                              },
                              "id": 410,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "selectorToFacetAndPosition",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1559,
                              "src": "3535:29:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes4_$_t_struct$_FacetAddressAndPosition_$1547_storage_$",
                                "typeString": "mapping(bytes4 => struct LibDiamondStorage.FacetAddressAndPosition storage ref)"
                              }
                            },
                            "id": 413,
                            "indexExpression": {
                              "expression": {
                                "id": 411,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "3565:3:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 412,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sig",
                              "nodeType": "MemberAccess",
                              "src": "3565:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "3535:38:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_FacetAddressAndPosition_$1547_storage",
                              "typeString": "struct LibDiamondStorage.FacetAddressAndPosition storage ref"
                            }
                          },
                          "id": 414,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "facetAddress",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1544,
                          "src": "3535:51:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3519:67:1"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 422,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 417,
                                "name": "facet",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 408,
                                "src": "3604:5:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 420,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "3621:1:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 419,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "3613:7:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 418,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "3613:7:1",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 421,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "3613:10:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "src": "3604:19:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4469616d6f6e643a2046756e6374696f6e20646f6573206e6f74206578697374",
                              "id": 423,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3625:34:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_6e6486aeb9db70da259b7171a739046119facaec2d8a6bd46f1145fe8391014a",
                                "typeString": "literal_string \"Diamond: Function does not exist\""
                              },
                              "value": "Diamond: Function does not exist"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_6e6486aeb9db70da259b7171a739046119facaec2d8a6bd46f1145fe8391014a",
                                "typeString": "literal_string \"Diamond: Function does not exist\""
                              }
                            ],
                            "id": 416,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "3596:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 424,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3596:64:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 425,
                        "nodeType": "ExpressionStatement",
                        "src": "3596:64:1"
                      },
                      {
                        "AST": {
                          "nodeType": "YulBlock",
                          "src": "3679:396:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3706:1:1",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3709:1:1",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "arguments": [],
                                    "functionName": {
                                      "name": "calldatasize",
                                      "nodeType": "YulIdentifier",
                                      "src": "3712:12:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3712:14:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldatacopy",
                                  "nodeType": "YulIdentifier",
                                  "src": "3693:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3693:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3693:34:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3740:65:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [],
                                    "functionName": {
                                      "name": "gas",
                                      "nodeType": "YulIdentifier",
                                      "src": "3767:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3767:5:1"
                                  },
                                  {
                                    "name": "facet",
                                    "nodeType": "YulIdentifier",
                                    "src": "3774:5:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3781:1:1",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "arguments": [],
                                    "functionName": {
                                      "name": "calldatasize",
                                      "nodeType": "YulIdentifier",
                                      "src": "3784:12:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3784:14:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3800:1:1",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3803:1:1",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "delegatecall",
                                  "nodeType": "YulIdentifier",
                                  "src": "3754:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3754:51:1"
                              },
                              "variables": [
                                {
                                  "name": "result",
                                  "nodeType": "YulTypedName",
                                  "src": "3744:6:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3833:1:1",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3836:1:1",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "arguments": [],
                                    "functionName": {
                                      "name": "returndatasize",
                                      "nodeType": "YulIdentifier",
                                      "src": "3839:14:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3839:16:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "returndatacopy",
                                  "nodeType": "YulIdentifier",
                                  "src": "3818:14:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3818:38:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3818:38:1"
                            },
                            {
                              "cases": [
                                {
                                  "body": {
                                    "nodeType": "YulBlock",
                                    "src": "3906:67:1",
                                    "statements": [
                                      {
                                        "expression": {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "3935:1:1",
                                              "type": "",
                                              "value": "0"
                                            },
                                            {
                                              "arguments": [],
                                              "functionName": {
                                                "name": "returndatasize",
                                                "nodeType": "YulIdentifier",
                                                "src": "3938:14:1"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "3938:16:1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "revert",
                                            "nodeType": "YulIdentifier",
                                            "src": "3928:6:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "3928:27:1"
                                        },
                                        "nodeType": "YulExpressionStatement",
                                        "src": "3928:27:1"
                                      }
                                    ]
                                  },
                                  "nodeType": "YulCase",
                                  "src": "3899:74:1",
                                  "value": {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3904:1:1",
                                    "type": "",
                                    "value": "0"
                                  }
                                },
                                {
                                  "body": {
                                    "nodeType": "YulBlock",
                                    "src": "3998:67:1",
                                    "statements": [
                                      {
                                        "expression": {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "4027:1:1",
                                              "type": "",
                                              "value": "0"
                                            },
                                            {
                                              "arguments": [],
                                              "functionName": {
                                                "name": "returndatasize",
                                                "nodeType": "YulIdentifier",
                                                "src": "4030:14:1"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "4030:16:1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "return",
                                            "nodeType": "YulIdentifier",
                                            "src": "4020:6:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "4020:27:1"
                                        },
                                        "nodeType": "YulExpressionStatement",
                                        "src": "4020:27:1"
                                      }
                                    ]
                                  },
                                  "nodeType": "YulCase",
                                  "src": "3990:75:1",
                                  "value": "default"
                                }
                              ],
                              "expression": {
                                "name": "result",
                                "nodeType": "YulIdentifier",
                                "src": "3876:6:1"
                              },
                              "nodeType": "YulSwitch",
                              "src": "3869:196:1"
                            }
                          ]
                        },
                        "evmVersion": "istanbul",
                        "externalReferences": [
                          {
                            "declaration": 408,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "3774:5:1",
                            "valueSize": 1
                          }
                        ],
                        "id": 426,
                        "nodeType": "InlineAssembly",
                        "src": "3670:405:1"
                      }
                    ]
                  },
                  "id": 428,
                  "implemented": true,
                  "kind": "fallback",
                  "modifiers": [],
                  "name": "",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 394,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3304:2:1"
                  },
                  "returnParameters": {
                    "id": 395,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3324:0:1"
                  },
                  "scope": 433,
                  "src": "3296:785:1",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 431,
                    "nodeType": "Block",
                    "src": "4114:2:1",
                    "statements": []
                  },
                  "id": 432,
                  "implemented": true,
                  "kind": "receive",
                  "modifiers": [],
                  "name": "",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 429,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4094:2:1"
                  },
                  "returnParameters": {
                    "id": 430,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4114:0:1"
                  },
                  "scope": 433,
                  "src": "4087:29:1",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 434,
              "src": "525:3593:1"
            }
          ],
          "src": "32:4087:1"
        },
        "id": 1
      },
      "solc_0.7/diamond/facets/DiamondCutFacet.sol": {
        "ast": {
          "absolutePath": "solc_0.7/diamond/facets/DiamondCutFacet.sol",
          "exportedSymbols": {
            "DiamondCutFacet": [
              735
            ]
          },
          "id": 736,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 435,
              "literals": [
                "solidity",
                "^",
                "0.7",
                ".1"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:23:2"
            },
            {
              "id": 436,
              "literals": [
                "experimental",
                "ABIEncoderV2"
              ],
              "nodeType": "PragmaDirective",
              "src": "56:33:2"
            },
            {
              "absolutePath": "solc_0.7/diamond/libraries/LibDiamondStorage.sol",
              "file": "../libraries/LibDiamondStorage.sol",
              "id": 437,
              "nodeType": "ImportDirective",
              "scope": 736,
              "sourceUnit": 1584,
              "src": "387:44:2",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "solc_0.7/diamond/interfaces/IDiamondCut.sol",
              "file": "../interfaces/IDiamondCut.sol",
              "id": 438,
              "nodeType": "ImportDirective",
              "scope": 736,
              "sourceUnit": 1007,
              "src": "432:39:2",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "solc_0.7/diamond/libraries/LibDiamondCut.sol",
              "file": "../libraries/LibDiamondCut.sol",
              "id": 439,
              "nodeType": "ImportDirective",
              "scope": 736,
              "sourceUnit": 1535,
              "src": "472:40:2",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 440,
                    "name": "IDiamondCut",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 1006,
                    "src": "542:11:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IDiamondCut_$1006",
                      "typeString": "contract IDiamondCut"
                    }
                  },
                  "id": 441,
                  "nodeType": "InheritanceSpecifier",
                  "src": "542:11:2"
                }
              ],
              "contractDependencies": [
                1006
              ],
              "contractKind": "contract",
              "fullyImplemented": true,
              "id": 735,
              "linearizedBaseContracts": [
                735,
                1006
              ],
              "name": "DiamondCutFacet",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "baseFunctions": [
                    996
                  ],
                  "body": {
                    "id": 534,
                    "nodeType": "Block",
                    "src": "1187:898:2",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 454,
                              "name": "_diamondCut",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 445,
                              "src": "1209:11:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Facet_$985_calldata_ptr_$dyn_calldata_ptr",
                                "typeString": "struct IDiamondCut.Facet calldata[] calldata"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_array$_t_struct$_Facet_$985_calldata_ptr_$dyn_calldata_ptr",
                                "typeString": "struct IDiamondCut.Facet calldata[] calldata"
                              }
                            ],
                            "id": 453,
                            "name": "externalCut",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 734,
                            "src": "1197:11:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_struct$_Facet_$985_calldata_ptr_$dyn_calldata_ptr_$returns$__$",
                              "typeString": "function (struct IDiamondCut.Facet calldata[] calldata)"
                            }
                          },
                          "id": 455,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1197:24:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 456,
                        "nodeType": "ExpressionStatement",
                        "src": "1197:24:2"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 458,
                              "name": "_diamondCut",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 445,
                              "src": "1247:11:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Facet_$985_calldata_ptr_$dyn_calldata_ptr",
                                "typeString": "struct IDiamondCut.Facet calldata[] calldata"
                              }
                            },
                            {
                              "id": 459,
                              "name": "_init",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 447,
                              "src": "1260:5:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 460,
                              "name": "_calldata",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 449,
                              "src": "1267:9:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_calldata_ptr",
                                "typeString": "bytes calldata"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_array$_t_struct$_Facet_$985_calldata_ptr_$dyn_calldata_ptr",
                                "typeString": "struct IDiamondCut.Facet calldata[] calldata"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bytes_calldata_ptr",
                                "typeString": "bytes calldata"
                              }
                            ],
                            "id": 457,
                            "name": "DiamondCut",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1005,
                            "src": "1236:10:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_array$_t_struct$_Facet_$985_memory_ptr_$dyn_memory_ptr_$_t_address_$_t_bytes_memory_ptr_$returns$__$",
                              "typeString": "function (struct IDiamondCut.Facet memory[] memory,address,bytes memory)"
                            }
                          },
                          "id": 461,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1236:41:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 462,
                        "nodeType": "EmitStatement",
                        "src": "1231:46:2"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 468,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 463,
                            "name": "_init",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 447,
                            "src": "1291:5:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 466,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1308:1:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 465,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "1300:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 464,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "1300:7:2",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 467,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1300:10:2",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "src": "1291:19:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 532,
                          "nodeType": "Block",
                          "src": "1439:640:2",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 482,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "expression": {
                                        "id": 479,
                                        "name": "_calldata",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 449,
                                        "src": "1461:9:2",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes_calldata_ptr",
                                          "typeString": "bytes calldata"
                                        }
                                      },
                                      "id": 480,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "length",
                                      "nodeType": "MemberAccess",
                                      "src": "1461:16:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": ">",
                                    "rightExpression": {
                                      "hexValue": "30",
                                      "id": 481,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "1480:1:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    },
                                    "src": "1461:20:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  {
                                    "hexValue": "4469616d6f6e6443757446616365743a205f63616c6c6461746120697320656d70747920627574205f696e6974206973206e6f742061646472657373283029",
                                    "id": 483,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "1483:65:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_77bd75fae9af81ca5e95129d2f62b5000140414d865197b9321208d5b46726e2",
                                      "typeString": "literal_string \"DiamondCutFacet: _calldata is empty but _init is not address(0)\""
                                    },
                                    "value": "DiamondCutFacet: _calldata is empty but _init is not address(0)"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    {
                                      "typeIdentifier": "t_stringliteral_77bd75fae9af81ca5e95129d2f62b5000140414d865197b9321208d5b46726e2",
                                      "typeString": "literal_string \"DiamondCutFacet: _calldata is empty but _init is not address(0)\""
                                    }
                                  ],
                                  "id": 478,
                                  "name": "require",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [
                                    -18,
                                    -18
                                  ],
                                  "referencedDeclaration": -18,
                                  "src": "1453:7:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                    "typeString": "function (bool,string memory) pure"
                                  }
                                },
                                "id": 484,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1453:96:2",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 485,
                              "nodeType": "ExpressionStatement",
                              "src": "1453:96:2"
                            },
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                "id": 491,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 486,
                                  "name": "_init",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 447,
                                  "src": "1567:5:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "!=",
                                "rightExpression": {
                                  "arguments": [
                                    {
                                      "id": 489,
                                      "name": "this",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -28,
                                      "src": "1584:4:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_DiamondCutFacet_$735",
                                        "typeString": "contract DiamondCutFacet"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_DiamondCutFacet_$735",
                                        "typeString": "contract DiamondCutFacet"
                                      }
                                    ],
                                    "id": 488,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "1576:7:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 487,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "1576:7:2",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 490,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "1576:13:2",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "src": "1567:22:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 500,
                              "nodeType": "IfStatement",
                              "src": "1563:143:2",
                              "trueBody": {
                                "id": 499,
                                "nodeType": "Block",
                                "src": "1591:115:2",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "id": 495,
                                          "name": "_init",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 447,
                                          "src": "1639:5:2",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        },
                                        {
                                          "hexValue": "4469616d6f6e6443757446616365743a205f696e6974206164647265737320686173206e6f20636f6465",
                                          "id": 496,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "string",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "1646:44:2",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_stringliteral_148cf483d8c51f8df13b79488908be2ce68d320569c0b5e815a2e8f2b59001c1",
                                            "typeString": "literal_string \"DiamondCutFacet: _init address has no code\""
                                          },
                                          "value": "DiamondCutFacet: _init address has no code"
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          },
                                          {
                                            "typeIdentifier": "t_stringliteral_148cf483d8c51f8df13b79488908be2ce68d320569c0b5e815a2e8f2b59001c1",
                                            "typeString": "literal_string \"DiamondCutFacet: _init address has no code\""
                                          }
                                        ],
                                        "expression": {
                                          "id": 492,
                                          "name": "LibDiamondCut",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1534,
                                          "src": "1609:13:2",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_contract$_LibDiamondCut_$1534_$",
                                            "typeString": "type(library LibDiamondCut)"
                                          }
                                        },
                                        "id": 494,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "hasContractCode",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 1533,
                                        "src": "1609:29:2",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_internal_view$_t_address_$_t_string_memory_ptr_$returns$__$",
                                          "typeString": "function (address,string memory) view"
                                        }
                                      },
                                      "id": 497,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "1609:82:2",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_tuple$__$",
                                        "typeString": "tuple()"
                                      }
                                    },
                                    "id": 498,
                                    "nodeType": "ExpressionStatement",
                                    "src": "1609:82:2"
                                  }
                                ]
                              }
                            },
                            {
                              "assignments": [
                                502,
                                504
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 502,
                                  "mutability": "mutable",
                                  "name": "success",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 532,
                                  "src": "1720:12:2",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "typeName": {
                                    "id": 501,
                                    "name": "bool",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "1720:4:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "visibility": "internal"
                                },
                                {
                                  "constant": false,
                                  "id": 504,
                                  "mutability": "mutable",
                                  "name": "error",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 532,
                                  "src": "1734:18:2",
                                  "stateVariable": false,
                                  "storageLocation": "memory",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes"
                                  },
                                  "typeName": {
                                    "id": 503,
                                    "name": "bytes",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "1734:5:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_storage_ptr",
                                      "typeString": "bytes"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 509,
                              "initialValue": {
                                "arguments": [
                                  {
                                    "id": 507,
                                    "name": "_calldata",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 449,
                                    "src": "1775:9:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_calldata_ptr",
                                      "typeString": "bytes calldata"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bytes_calldata_ptr",
                                      "typeString": "bytes calldata"
                                    }
                                  ],
                                  "expression": {
                                    "id": 505,
                                    "name": "_init",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 447,
                                    "src": "1756:5:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "id": 506,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "delegatecall",
                                  "nodeType": "MemberAccess",
                                  "src": "1756:18:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                    "typeString": "function (bytes memory) returns (bool,bytes memory)"
                                  }
                                },
                                "id": 508,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1756:29:2",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                                  "typeString": "tuple(bool,bytes memory)"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "1719:66:2"
                            },
                            {
                              "condition": {
                                "id": 511,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "UnaryOperation",
                                "operator": "!",
                                "prefix": true,
                                "src": "1803:8:2",
                                "subExpression": {
                                  "id": 510,
                                  "name": "success",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 502,
                                  "src": "1804:7:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 531,
                              "nodeType": "IfStatement",
                              "src": "1799:270:2",
                              "trueBody": {
                                "id": 530,
                                "nodeType": "Block",
                                "src": "1813:256:2",
                                "statements": [
                                  {
                                    "condition": {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 515,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "expression": {
                                          "id": 512,
                                          "name": "error",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 504,
                                          "src": "1835:5:2",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes_memory_ptr",
                                            "typeString": "bytes memory"
                                          }
                                        },
                                        "id": 513,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "length",
                                        "nodeType": "MemberAccess",
                                        "src": "1835:12:2",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": ">",
                                      "rightExpression": {
                                        "hexValue": "30",
                                        "id": 514,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "1850:1:2",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      },
                                      "src": "1835:16:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "falseBody": {
                                      "id": 528,
                                      "nodeType": "Block",
                                      "src": "1964:91:2",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "hexValue": "4469616d6f6e6443757446616365743a205f696e69742066756e6374696f6e207265766572746564",
                                                "id": 525,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": true,
                                                "kind": "string",
                                                "lValueRequested": false,
                                                "nodeType": "Literal",
                                                "src": "1993:42:2",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_stringliteral_e4c3c3c077f061cc94330f46193a6873abf99718ae815adc8936f103bafab2fc",
                                                  "typeString": "literal_string \"DiamondCutFacet: _init function reverted\""
                                                },
                                                "value": "DiamondCutFacet: _init function reverted"
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_stringliteral_e4c3c3c077f061cc94330f46193a6873abf99718ae815adc8936f103bafab2fc",
                                                  "typeString": "literal_string \"DiamondCutFacet: _init function reverted\""
                                                }
                                              ],
                                              "id": 524,
                                              "name": "revert",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [
                                                -19,
                                                -19
                                              ],
                                              "referencedDeclaration": -19,
                                              "src": "1986:6:2",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
                                                "typeString": "function (string memory) pure"
                                              }
                                            },
                                            "id": 526,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "kind": "functionCall",
                                            "lValueRequested": false,
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "1986:50:2",
                                            "tryCall": false,
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_tuple$__$",
                                              "typeString": "tuple()"
                                            }
                                          },
                                          "id": 527,
                                          "nodeType": "ExpressionStatement",
                                          "src": "1986:50:2"
                                        }
                                      ]
                                    },
                                    "id": 529,
                                    "nodeType": "IfStatement",
                                    "src": "1831:224:2",
                                    "trueBody": {
                                      "id": 523,
                                      "nodeType": "Block",
                                      "src": "1853:105:2",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "id": 519,
                                                    "name": "error",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 504,
                                                    "src": "1932:5:2",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_bytes_memory_ptr",
                                                      "typeString": "bytes memory"
                                                    }
                                                  }
                                                ],
                                                "expression": {
                                                  "argumentTypes": [
                                                    {
                                                      "typeIdentifier": "t_bytes_memory_ptr",
                                                      "typeString": "bytes memory"
                                                    }
                                                  ],
                                                  "id": 518,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": true,
                                                  "lValueRequested": false,
                                                  "nodeType": "ElementaryTypeNameExpression",
                                                  "src": "1925:6:2",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                                                    "typeString": "type(string storage pointer)"
                                                  },
                                                  "typeName": {
                                                    "id": 517,
                                                    "name": "string",
                                                    "nodeType": "ElementaryTypeName",
                                                    "src": "1925:6:2",
                                                    "typeDescriptions": {}
                                                  }
                                                },
                                                "id": 520,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "kind": "typeConversion",
                                                "lValueRequested": false,
                                                "names": [],
                                                "nodeType": "FunctionCall",
                                                "src": "1925:13:2",
                                                "tryCall": false,
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_string_memory_ptr",
                                                  "typeString": "string memory"
                                                }
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_string_memory_ptr",
                                                  "typeString": "string memory"
                                                }
                                              ],
                                              "id": 516,
                                              "name": "revert",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [
                                                -19,
                                                -19
                                              ],
                                              "referencedDeclaration": -19,
                                              "src": "1918:6:2",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
                                                "typeString": "function (string memory) pure"
                                              }
                                            },
                                            "id": 521,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "kind": "functionCall",
                                            "lValueRequested": false,
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "1918:21:2",
                                            "tryCall": false,
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_tuple$__$",
                                              "typeString": "tuple()"
                                            }
                                          },
                                          "id": 522,
                                          "nodeType": "ExpressionStatement",
                                          "src": "1918:21:2"
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "id": 533,
                        "nodeType": "IfStatement",
                        "src": "1287:792:2",
                        "trueBody": {
                          "id": 477,
                          "nodeType": "Block",
                          "src": "1312:121:2",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 473,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "expression": {
                                        "id": 470,
                                        "name": "_calldata",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 449,
                                        "src": "1334:9:2",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes_calldata_ptr",
                                          "typeString": "bytes calldata"
                                        }
                                      },
                                      "id": 471,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "length",
                                      "nodeType": "MemberAccess",
                                      "src": "1334:16:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "==",
                                    "rightExpression": {
                                      "hexValue": "30",
                                      "id": 472,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "1354:1:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    },
                                    "src": "1334:21:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  {
                                    "hexValue": "4469616d6f6e6443757446616365743a205f696e69742069732061646472657373283029206275745f63616c6c64617461206973206e6f7420656d707479",
                                    "id": 474,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "1357:64:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_6c339ceb2ae8b18269ce602b3b38ec310fbd008c6322d933aa8de3474d9de17a",
                                      "typeString": "literal_string \"DiamondCutFacet: _init is address(0) but_calldata is not empty\""
                                    },
                                    "value": "DiamondCutFacet: _init is address(0) but_calldata is not empty"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    {
                                      "typeIdentifier": "t_stringliteral_6c339ceb2ae8b18269ce602b3b38ec310fbd008c6322d933aa8de3474d9de17a",
                                      "typeString": "literal_string \"DiamondCutFacet: _init is address(0) but_calldata is not empty\""
                                    }
                                  ],
                                  "id": 469,
                                  "name": "require",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [
                                    -18,
                                    -18
                                  ],
                                  "referencedDeclaration": -18,
                                  "src": "1326:7:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                    "typeString": "function (bool,string memory) pure"
                                  }
                                },
                                "id": 475,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1326:96:2",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 476,
                              "nodeType": "ExpressionStatement",
                              "src": "1326:96:2"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": {
                    "id": 442,
                    "nodeType": "StructuredDocumentation",
                    "src": "605:438:2",
                    "text": "@notice Add/replace/remove any number of functions and optionally execute\n         a function with delegatecall\n @param _diamondCut Contains the facet addresses and function selectors\n @param _init The address of the contract or facet to execute _calldata\n @param _calldata A function call, including function selector and arguments\n                  _calldata is executed with delegatecall on _init"
                  },
                  "functionSelector": "e712b4e1",
                  "id": 535,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "diamondCut",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 451,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "1178:8:2"
                  },
                  "parameters": {
                    "id": 450,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 445,
                        "mutability": "mutable",
                        "name": "_diamondCut",
                        "nodeType": "VariableDeclaration",
                        "scope": 535,
                        "src": "1077:28:2",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Facet_$985_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "struct IDiamondCut.Facet[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 443,
                            "name": "Facet",
                            "nodeType": "UserDefinedTypeName",
                            "referencedDeclaration": 985,
                            "src": "1077:5:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Facet_$985_storage_ptr",
                              "typeString": "struct IDiamondCut.Facet"
                            }
                          },
                          "id": 444,
                          "nodeType": "ArrayTypeName",
                          "src": "1077:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Facet_$985_storage_$dyn_storage_ptr",
                            "typeString": "struct IDiamondCut.Facet[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 447,
                        "mutability": "mutable",
                        "name": "_init",
                        "nodeType": "VariableDeclaration",
                        "scope": 535,
                        "src": "1115:13:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 446,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1115:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 449,
                        "mutability": "mutable",
                        "name": "_calldata",
                        "nodeType": "VariableDeclaration",
                        "scope": 535,
                        "src": "1138:24:2",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 448,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "1138:5:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1067:101:2"
                  },
                  "returnParameters": {
                    "id": 452,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1187:0:2"
                  },
                  "scope": 735,
                  "src": "1048:1037:2",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 733,
                    "nodeType": "Block",
                    "src": "2541:2283:2",
                    "statements": [
                      {
                        "assignments": [
                          544
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 544,
                            "mutability": "mutable",
                            "name": "ds",
                            "nodeType": "VariableDeclaration",
                            "scope": 733,
                            "src": "2551:43:2",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                              "typeString": "struct LibDiamondStorage.DiamondStorage"
                            },
                            "typeName": {
                              "id": 543,
                              "name": "LibDiamondStorage.DiamondStorage",
                              "nodeType": "UserDefinedTypeName",
                              "referencedDeclaration": 1571,
                              "src": "2551:32:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                "typeString": "struct LibDiamondStorage.DiamondStorage"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 548,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 545,
                              "name": "LibDiamondStorage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1583,
                              "src": "2597:17:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_LibDiamondStorage_$1583_$",
                                "typeString": "type(library LibDiamondStorage)"
                              }
                            },
                            "id": 546,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "diamondStorage",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1582,
                            "src": "2597:32:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_DiamondStorage_$1571_storage_ptr_$",
                              "typeString": "function () pure returns (struct LibDiamondStorage.DiamondStorage storage pointer)"
                            }
                          },
                          "id": 547,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2597:34:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                            "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2551:80:2"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 554,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 550,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "2649:3:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 551,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "2649:10:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "expression": {
                                  "id": 552,
                                  "name": "ds",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 544,
                                  "src": "2663:2:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                    "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                                  }
                                },
                                "id": 553,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "contractOwner",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1555,
                                "src": "2663:16:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "2649:30:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4d757374206f776e2074686520636f6e74726163742e",
                              "id": 555,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2681:24:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_0e82b990864eae1c907cbad09422fafe5b0fe335c0f2f8501c3fd26849f25167",
                                "typeString": "literal_string \"Must own the contract.\""
                              },
                              "value": "Must own the contract."
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_0e82b990864eae1c907cbad09422fafe5b0fe335c0f2f8501c3fd26849f25167",
                                "typeString": "literal_string \"Must own the contract.\""
                              }
                            ],
                            "id": 549,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "2641:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 556,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2641:65:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 557,
                        "nodeType": "ExpressionStatement",
                        "src": "2641:65:2"
                      },
                      {
                        "body": {
                          "id": 731,
                          "nodeType": "Block",
                          "src": "2788:2030:2",
                          "statements": [
                            {
                              "assignments": [
                                569
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 569,
                                  "mutability": "mutable",
                                  "name": "newFacetAddress",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 731,
                                  "src": "2802:23:2",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  "typeName": {
                                    "id": 568,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "2802:7:2",
                                    "stateMutability": "nonpayable",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 574,
                              "initialValue": {
                                "expression": {
                                  "baseExpression": {
                                    "id": 570,
                                    "name": "_diamondCut",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 538,
                                    "src": "2828:11:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_struct$_Facet_$985_calldata_ptr_$dyn_calldata_ptr",
                                      "typeString": "struct IDiamondCut.Facet calldata[] calldata"
                                    }
                                  },
                                  "id": 572,
                                  "indexExpression": {
                                    "id": 571,
                                    "name": "facetIndex",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 559,
                                    "src": "2840:10:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "2828:23:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Facet_$985_calldata_ptr",
                                    "typeString": "struct IDiamondCut.Facet calldata"
                                  }
                                },
                                "id": 573,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "facetAddress",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 981,
                                "src": "2828:36:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "2802:62:2"
                            },
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                "id": 580,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 575,
                                  "name": "newFacetAddress",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 569,
                                  "src": "2921:15:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "!=",
                                "rightExpression": {
                                  "arguments": [
                                    {
                                      "hexValue": "30",
                                      "id": 578,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "2948:1:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      }
                                    ],
                                    "id": 577,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "2940:7:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 576,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "2940:7:2",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 579,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2940:10:2",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                },
                                "src": "2921:29:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": {
                                "id": 729,
                                "nodeType": "Block",
                                "src": "4502:306:2",
                                "statements": [
                                  {
                                    "body": {
                                      "id": 727,
                                      "nodeType": "Block",
                                      "src": "4667:127:2",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "baseExpression": {
                                                  "expression": {
                                                    "baseExpression": {
                                                      "id": 719,
                                                      "name": "_diamondCut",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 538,
                                                      "src": "4718:11:2",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_array$_t_struct$_Facet_$985_calldata_ptr_$dyn_calldata_ptr",
                                                        "typeString": "struct IDiamondCut.Facet calldata[] calldata"
                                                      }
                                                    },
                                                    "id": 721,
                                                    "indexExpression": {
                                                      "id": 720,
                                                      "name": "facetIndex",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 559,
                                                      "src": "4730:10:2",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_uint256",
                                                        "typeString": "uint256"
                                                      }
                                                    },
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": false,
                                                    "lValueRequested": false,
                                                    "nodeType": "IndexAccess",
                                                    "src": "4718:23:2",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_struct$_Facet_$985_calldata_ptr",
                                                      "typeString": "struct IDiamondCut.Facet calldata"
                                                    }
                                                  },
                                                  "id": 722,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "memberName": "functionSelectors",
                                                  "nodeType": "MemberAccess",
                                                  "referencedDeclaration": 984,
                                                  "src": "4718:41:2",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_array$_t_bytes4_$dyn_calldata_ptr",
                                                    "typeString": "bytes4[] calldata"
                                                  }
                                                },
                                                "id": 724,
                                                "indexExpression": {
                                                  "id": 723,
                                                  "name": "selectorIndex",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 704,
                                                  "src": "4760:13:2",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "nodeType": "IndexAccess",
                                                "src": "4718:56:2",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_bytes4",
                                                  "typeString": "bytes4"
                                                }
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_bytes4",
                                                  "typeString": "bytes4"
                                                }
                                              ],
                                              "expression": {
                                                "id": 716,
                                                "name": "LibDiamondCut",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1534,
                                                "src": "4689:13:2",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_type$_t_contract$_LibDiamondCut_$1534_$",
                                                  "typeString": "type(library LibDiamondCut)"
                                                }
                                              },
                                              "id": 718,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberName": "removeSelector",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": 1514,
                                              "src": "4689:28:2",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_function_internal_nonpayable$_t_bytes4_$returns$__$",
                                                "typeString": "function (bytes4)"
                                              }
                                            },
                                            "id": 725,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "kind": "functionCall",
                                            "lValueRequested": false,
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "4689:86:2",
                                            "tryCall": false,
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_tuple$__$",
                                              "typeString": "tuple()"
                                            }
                                          },
                                          "id": 726,
                                          "nodeType": "ExpressionStatement",
                                          "src": "4689:86:2"
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 712,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "id": 706,
                                        "name": "selectorIndex",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 704,
                                        "src": "4584:13:2",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "<",
                                      "rightExpression": {
                                        "expression": {
                                          "expression": {
                                            "baseExpression": {
                                              "id": 707,
                                              "name": "_diamondCut",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 538,
                                              "src": "4600:11:2",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_array$_t_struct$_Facet_$985_calldata_ptr_$dyn_calldata_ptr",
                                                "typeString": "struct IDiamondCut.Facet calldata[] calldata"
                                              }
                                            },
                                            "id": 709,
                                            "indexExpression": {
                                              "id": 708,
                                              "name": "facetIndex",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 559,
                                              "src": "4612:10:2",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "IndexAccess",
                                            "src": "4600:23:2",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_Facet_$985_calldata_ptr",
                                              "typeString": "struct IDiamondCut.Facet calldata"
                                            }
                                          },
                                          "id": 710,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "functionSelectors",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 984,
                                          "src": "4600:41:2",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_array$_t_bytes4_$dyn_calldata_ptr",
                                            "typeString": "bytes4[] calldata"
                                          }
                                        },
                                        "id": 711,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "length",
                                        "nodeType": "MemberAccess",
                                        "src": "4600:48:2",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "4584:64:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "id": 728,
                                    "initializationExpression": {
                                      "assignments": [
                                        704
                                      ],
                                      "declarations": [
                                        {
                                          "constant": false,
                                          "id": 704,
                                          "mutability": "mutable",
                                          "name": "selectorIndex",
                                          "nodeType": "VariableDeclaration",
                                          "scope": 728,
                                          "src": "4561:21:2",
                                          "stateVariable": false,
                                          "storageLocation": "default",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "typeName": {
                                            "id": 703,
                                            "name": "uint256",
                                            "nodeType": "ElementaryTypeName",
                                            "src": "4561:7:2",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "visibility": "internal"
                                        }
                                      ],
                                      "id": 705,
                                      "nodeType": "VariableDeclarationStatement",
                                      "src": "4561:21:2"
                                    },
                                    "loopExpression": {
                                      "expression": {
                                        "id": 714,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "UnaryOperation",
                                        "operator": "++",
                                        "prefix": false,
                                        "src": "4650:15:2",
                                        "subExpression": {
                                          "id": 713,
                                          "name": "selectorIndex",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 704,
                                          "src": "4650:13:2",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "id": 715,
                                      "nodeType": "ExpressionStatement",
                                      "src": "4650:15:2"
                                    },
                                    "nodeType": "ForStatement",
                                    "src": "4556:238:2"
                                  }
                                ]
                              },
                              "id": 730,
                              "nodeType": "IfStatement",
                              "src": "2917:1891:2",
                              "trueBody": {
                                "id": 702,
                                "nodeType": "Block",
                                "src": "2952:1544:2",
                                "statements": [
                                  {
                                    "assignments": [
                                      582
                                    ],
                                    "declarations": [
                                      {
                                        "constant": false,
                                        "id": 582,
                                        "mutability": "mutable",
                                        "name": "facetAddressPosition",
                                        "nodeType": "VariableDeclaration",
                                        "scope": 702,
                                        "src": "2970:28:2",
                                        "stateVariable": false,
                                        "storageLocation": "default",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "typeName": {
                                          "id": 581,
                                          "name": "uint256",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "2970:7:2",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "visibility": "internal"
                                      }
                                    ],
                                    "id": 588,
                                    "initialValue": {
                                      "expression": {
                                        "baseExpression": {
                                          "expression": {
                                            "id": 583,
                                            "name": "ds",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 544,
                                            "src": "3001:2:2",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                              "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                                            }
                                          },
                                          "id": 584,
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "facetFunctionSelectors",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 1563,
                                          "src": "3001:25:2",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$1553_storage_$",
                                            "typeString": "mapping(address => struct LibDiamondStorage.FacetFunctionSelectors storage ref)"
                                          }
                                        },
                                        "id": 586,
                                        "indexExpression": {
                                          "id": 585,
                                          "name": "newFacetAddress",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 569,
                                          "src": "3027:15:2",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "3001:42:2",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_FacetFunctionSelectors_$1553_storage",
                                          "typeString": "struct LibDiamondStorage.FacetFunctionSelectors storage ref"
                                        }
                                      },
                                      "id": 587,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "facetAddressPosition",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 1552,
                                      "src": "3001:63:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint16",
                                        "typeString": "uint16"
                                      }
                                    },
                                    "nodeType": "VariableDeclarationStatement",
                                    "src": "2970:94:2"
                                  },
                                  {
                                    "condition": {
                                      "commonType": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      },
                                      "id": 600,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 591,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "id": 589,
                                          "name": "facetAddressPosition",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 582,
                                          "src": "3148:20:2",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "==",
                                        "rightExpression": {
                                          "hexValue": "30",
                                          "id": 590,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "number",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "3172:1:2",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_rational_0_by_1",
                                            "typeString": "int_const 0"
                                          },
                                          "value": "0"
                                        },
                                        "src": "3148:25:2",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "&&",
                                      "rightExpression": {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 599,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "expression": {
                                            "expression": {
                                              "baseExpression": {
                                                "expression": {
                                                  "id": 592,
                                                  "name": "ds",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 544,
                                                  "src": "3177:2:2",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                                    "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                                                  }
                                                },
                                                "id": 593,
                                                "isConstant": false,
                                                "isLValue": true,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "memberName": "facetFunctionSelectors",
                                                "nodeType": "MemberAccess",
                                                "referencedDeclaration": 1563,
                                                "src": "3177:25:2",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$1553_storage_$",
                                                  "typeString": "mapping(address => struct LibDiamondStorage.FacetFunctionSelectors storage ref)"
                                                }
                                              },
                                              "id": 595,
                                              "indexExpression": {
                                                "id": 594,
                                                "name": "newFacetAddress",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 569,
                                                "src": "3203:15:2",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_address",
                                                  "typeString": "address"
                                                }
                                              },
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "nodeType": "IndexAccess",
                                              "src": "3177:42:2",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_struct$_FacetFunctionSelectors_$1553_storage",
                                                "typeString": "struct LibDiamondStorage.FacetFunctionSelectors storage ref"
                                              }
                                            },
                                            "id": 596,
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "functionSelectors",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 1550,
                                            "src": "3177:60:2",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_array$_t_bytes4_$dyn_storage",
                                              "typeString": "bytes4[] storage ref"
                                            }
                                          },
                                          "id": 597,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "length",
                                          "nodeType": "MemberAccess",
                                          "src": "3177:67:2",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "==",
                                        "rightExpression": {
                                          "hexValue": "30",
                                          "id": 598,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "number",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "3248:1:2",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_rational_0_by_1",
                                            "typeString": "int_const 0"
                                          },
                                          "value": "0"
                                        },
                                        "src": "3177:72:2",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "src": "3148:101:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "id": 635,
                                    "nodeType": "IfStatement",
                                    "src": "3144:482:2",
                                    "trueBody": {
                                      "id": 634,
                                      "nodeType": "Block",
                                      "src": "3251:375:2",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "id": 604,
                                                "name": "newFacetAddress",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 569,
                                                "src": "3303:15:2",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_address",
                                                  "typeString": "address"
                                                }
                                              },
                                              {
                                                "hexValue": "4469616d6f6e6443757446616365743a204e657720666163657420686173206e6f20636f6465",
                                                "id": 605,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": true,
                                                "kind": "string",
                                                "lValueRequested": false,
                                                "nodeType": "Literal",
                                                "src": "3320:40:2",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_stringliteral_52dc41addb216c8980a9d228afa27d4f75e31292f4a4e53a1042f3ebbd4a4123",
                                                  "typeString": "literal_string \"DiamondCutFacet: New facet has no code\""
                                                },
                                                "value": "DiamondCutFacet: New facet has no code"
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_address",
                                                  "typeString": "address"
                                                },
                                                {
                                                  "typeIdentifier": "t_stringliteral_52dc41addb216c8980a9d228afa27d4f75e31292f4a4e53a1042f3ebbd4a4123",
                                                  "typeString": "literal_string \"DiamondCutFacet: New facet has no code\""
                                                }
                                              ],
                                              "expression": {
                                                "id": 601,
                                                "name": "LibDiamondCut",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1534,
                                                "src": "3273:13:2",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_type$_t_contract$_LibDiamondCut_$1534_$",
                                                  "typeString": "type(library LibDiamondCut)"
                                                }
                                              },
                                              "id": 603,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberName": "hasContractCode",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": 1533,
                                              "src": "3273:29:2",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_function_internal_view$_t_address_$_t_string_memory_ptr_$returns$__$",
                                                "typeString": "function (address,string memory) view"
                                              }
                                            },
                                            "id": 606,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "kind": "functionCall",
                                            "lValueRequested": false,
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "3273:88:2",
                                            "tryCall": false,
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_tuple$__$",
                                              "typeString": "tuple()"
                                            }
                                          },
                                          "id": 607,
                                          "nodeType": "ExpressionStatement",
                                          "src": "3273:88:2"
                                        },
                                        {
                                          "expression": {
                                            "id": 612,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftHandSide": {
                                              "id": 608,
                                              "name": "facetAddressPosition",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 582,
                                              "src": "3383:20:2",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "nodeType": "Assignment",
                                            "operator": "=",
                                            "rightHandSide": {
                                              "expression": {
                                                "expression": {
                                                  "id": 609,
                                                  "name": "ds",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 544,
                                                  "src": "3406:2:2",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                                    "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                                                  }
                                                },
                                                "id": 610,
                                                "isConstant": false,
                                                "isLValue": true,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "memberName": "facetAddresses",
                                                "nodeType": "MemberAccess",
                                                "referencedDeclaration": 1566,
                                                "src": "3406:17:2",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                                  "typeString": "address[] storage ref"
                                                }
                                              },
                                              "id": 611,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberName": "length",
                                              "nodeType": "MemberAccess",
                                              "src": "3406:24:2",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "src": "3383:47:2",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "id": 613,
                                          "nodeType": "ExpressionStatement",
                                          "src": "3383:47:2"
                                        },
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "id": 619,
                                                "name": "newFacetAddress",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 569,
                                                "src": "3475:15:2",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_address",
                                                  "typeString": "address"
                                                }
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_address",
                                                  "typeString": "address"
                                                }
                                              ],
                                              "expression": {
                                                "expression": {
                                                  "id": 614,
                                                  "name": "ds",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 544,
                                                  "src": "3452:2:2",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                                    "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                                                  }
                                                },
                                                "id": 617,
                                                "isConstant": false,
                                                "isLValue": true,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "memberName": "facetAddresses",
                                                "nodeType": "MemberAccess",
                                                "referencedDeclaration": 1566,
                                                "src": "3452:17:2",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                                  "typeString": "address[] storage ref"
                                                }
                                              },
                                              "id": 618,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberName": "push",
                                              "nodeType": "MemberAccess",
                                              "src": "3452:22:2",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_function_arraypush_nonpayable$_t_address_$returns$__$",
                                                "typeString": "function (address)"
                                              }
                                            },
                                            "id": 620,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "kind": "functionCall",
                                            "lValueRequested": false,
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "3452:39:2",
                                            "tryCall": false,
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_tuple$__$",
                                              "typeString": "tuple()"
                                            }
                                          },
                                          "id": 621,
                                          "nodeType": "ExpressionStatement",
                                          "src": "3452:39:2"
                                        },
                                        {
                                          "expression": {
                                            "id": 632,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftHandSide": {
                                              "expression": {
                                                "baseExpression": {
                                                  "expression": {
                                                    "id": 622,
                                                    "name": "ds",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 544,
                                                    "src": "3513:2:2",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                                      "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                                                    }
                                                  },
                                                  "id": 625,
                                                  "isConstant": false,
                                                  "isLValue": true,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "memberName": "facetFunctionSelectors",
                                                  "nodeType": "MemberAccess",
                                                  "referencedDeclaration": 1563,
                                                  "src": "3513:25:2",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$1553_storage_$",
                                                    "typeString": "mapping(address => struct LibDiamondStorage.FacetFunctionSelectors storage ref)"
                                                  }
                                                },
                                                "id": 626,
                                                "indexExpression": {
                                                  "id": 624,
                                                  "name": "newFacetAddress",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 569,
                                                  "src": "3539:15:2",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_address",
                                                    "typeString": "address"
                                                  }
                                                },
                                                "isConstant": false,
                                                "isLValue": true,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "nodeType": "IndexAccess",
                                                "src": "3513:42:2",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_struct$_FacetFunctionSelectors_$1553_storage",
                                                  "typeString": "struct LibDiamondStorage.FacetFunctionSelectors storage ref"
                                                }
                                              },
                                              "id": 627,
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": true,
                                              "memberName": "facetAddressPosition",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": 1552,
                                              "src": "3513:63:2",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint16",
                                                "typeString": "uint16"
                                              }
                                            },
                                            "nodeType": "Assignment",
                                            "operator": "=",
                                            "rightHandSide": {
                                              "arguments": [
                                                {
                                                  "id": 630,
                                                  "name": "facetAddressPosition",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 582,
                                                  "src": "3586:20:2",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                }
                                              ],
                                              "expression": {
                                                "argumentTypes": [
                                                  {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                ],
                                                "id": 629,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": true,
                                                "lValueRequested": false,
                                                "nodeType": "ElementaryTypeNameExpression",
                                                "src": "3579:6:2",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_type$_t_uint16_$",
                                                  "typeString": "type(uint16)"
                                                },
                                                "typeName": {
                                                  "id": 628,
                                                  "name": "uint16",
                                                  "nodeType": "ElementaryTypeName",
                                                  "src": "3579:6:2",
                                                  "typeDescriptions": {}
                                                }
                                              },
                                              "id": 631,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "kind": "typeConversion",
                                              "lValueRequested": false,
                                              "names": [],
                                              "nodeType": "FunctionCall",
                                              "src": "3579:28:2",
                                              "tryCall": false,
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint16",
                                                "typeString": "uint16"
                                              }
                                            },
                                            "src": "3513:94:2",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint16",
                                              "typeString": "uint16"
                                            }
                                          },
                                          "id": 633,
                                          "nodeType": "ExpressionStatement",
                                          "src": "3513:94:2"
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "body": {
                                      "id": 700,
                                      "nodeType": "Block",
                                      "src": "3798:684:2",
                                      "statements": [
                                        {
                                          "assignments": [
                                            650
                                          ],
                                          "declarations": [
                                            {
                                              "constant": false,
                                              "id": 650,
                                              "mutability": "mutable",
                                              "name": "selector",
                                              "nodeType": "VariableDeclaration",
                                              "scope": 700,
                                              "src": "3820:15:2",
                                              "stateVariable": false,
                                              "storageLocation": "default",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bytes4",
                                                "typeString": "bytes4"
                                              },
                                              "typeName": {
                                                "id": 649,
                                                "name": "bytes4",
                                                "nodeType": "ElementaryTypeName",
                                                "src": "3820:6:2",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_bytes4",
                                                  "typeString": "bytes4"
                                                }
                                              },
                                              "visibility": "internal"
                                            }
                                          ],
                                          "id": 657,
                                          "initialValue": {
                                            "baseExpression": {
                                              "expression": {
                                                "baseExpression": {
                                                  "id": 651,
                                                  "name": "_diamondCut",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 538,
                                                  "src": "3838:11:2",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_array$_t_struct$_Facet_$985_calldata_ptr_$dyn_calldata_ptr",
                                                    "typeString": "struct IDiamondCut.Facet calldata[] calldata"
                                                  }
                                                },
                                                "id": 653,
                                                "indexExpression": {
                                                  "id": 652,
                                                  "name": "facetIndex",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 559,
                                                  "src": "3850:10:2",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "nodeType": "IndexAccess",
                                                "src": "3838:23:2",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_struct$_Facet_$985_calldata_ptr",
                                                  "typeString": "struct IDiamondCut.Facet calldata"
                                                }
                                              },
                                              "id": 654,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberName": "functionSelectors",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": 984,
                                              "src": "3838:41:2",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_array$_t_bytes4_$dyn_calldata_ptr",
                                                "typeString": "bytes4[] calldata"
                                              }
                                            },
                                            "id": 656,
                                            "indexExpression": {
                                              "id": 655,
                                              "name": "selectorIndex",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 637,
                                              "src": "3880:13:2",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "IndexAccess",
                                            "src": "3838:56:2",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bytes4",
                                              "typeString": "bytes4"
                                            }
                                          },
                                          "nodeType": "VariableDeclarationStatement",
                                          "src": "3820:74:2"
                                        },
                                        {
                                          "assignments": [
                                            659
                                          ],
                                          "declarations": [
                                            {
                                              "constant": false,
                                              "id": 659,
                                              "mutability": "mutable",
                                              "name": "oldFacet",
                                              "nodeType": "VariableDeclaration",
                                              "scope": 700,
                                              "src": "3916:16:2",
                                              "stateVariable": false,
                                              "storageLocation": "default",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              },
                                              "typeName": {
                                                "id": 658,
                                                "name": "address",
                                                "nodeType": "ElementaryTypeName",
                                                "src": "3916:7:2",
                                                "stateMutability": "nonpayable",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_address",
                                                  "typeString": "address"
                                                }
                                              },
                                              "visibility": "internal"
                                            }
                                          ],
                                          "id": 665,
                                          "initialValue": {
                                            "expression": {
                                              "baseExpression": {
                                                "expression": {
                                                  "id": 660,
                                                  "name": "ds",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 544,
                                                  "src": "3935:2:2",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                                    "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                                                  }
                                                },
                                                "id": 661,
                                                "isConstant": false,
                                                "isLValue": true,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "memberName": "selectorToFacetAndPosition",
                                                "nodeType": "MemberAccess",
                                                "referencedDeclaration": 1559,
                                                "src": "3935:29:2",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_mapping$_t_bytes4_$_t_struct$_FacetAddressAndPosition_$1547_storage_$",
                                                  "typeString": "mapping(bytes4 => struct LibDiamondStorage.FacetAddressAndPosition storage ref)"
                                                }
                                              },
                                              "id": 663,
                                              "indexExpression": {
                                                "id": 662,
                                                "name": "selector",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 650,
                                                "src": "3965:8:2",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_bytes4",
                                                  "typeString": "bytes4"
                                                }
                                              },
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "nodeType": "IndexAccess",
                                              "src": "3935:39:2",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_struct$_FacetAddressAndPosition_$1547_storage",
                                                "typeString": "struct LibDiamondStorage.FacetAddressAndPosition storage ref"
                                              }
                                            },
                                            "id": 664,
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "facetAddress",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 1544,
                                            "src": "3935:52:2",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_address",
                                              "typeString": "address"
                                            }
                                          },
                                          "nodeType": "VariableDeclarationStatement",
                                          "src": "3916:71:2"
                                        },
                                        {
                                          "condition": {
                                            "commonType": {
                                              "typeIdentifier": "t_address",
                                              "typeString": "address"
                                            },
                                            "id": 671,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftExpression": {
                                              "id": 666,
                                              "name": "oldFacet",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 659,
                                              "src": "4040:8:2",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              }
                                            },
                                            "nodeType": "BinaryOperation",
                                            "operator": "==",
                                            "rightExpression": {
                                              "arguments": [
                                                {
                                                  "hexValue": "30",
                                                  "id": 669,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": true,
                                                  "kind": "number",
                                                  "lValueRequested": false,
                                                  "nodeType": "Literal",
                                                  "src": "4060:1:2",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_rational_0_by_1",
                                                    "typeString": "int_const 0"
                                                  },
                                                  "value": "0"
                                                }
                                              ],
                                              "expression": {
                                                "argumentTypes": [
                                                  {
                                                    "typeIdentifier": "t_rational_0_by_1",
                                                    "typeString": "int_const 0"
                                                  }
                                                ],
                                                "id": 668,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": true,
                                                "lValueRequested": false,
                                                "nodeType": "ElementaryTypeNameExpression",
                                                "src": "4052:7:2",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_type$_t_address_$",
                                                  "typeString": "type(address)"
                                                },
                                                "typeName": {
                                                  "id": 667,
                                                  "name": "address",
                                                  "nodeType": "ElementaryTypeName",
                                                  "src": "4052:7:2",
                                                  "typeDescriptions": {}
                                                }
                                              },
                                              "id": 670,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "typeConversion",
                                              "lValueRequested": false,
                                              "names": [],
                                              "nodeType": "FunctionCall",
                                              "src": "4052:10:2",
                                              "tryCall": false,
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_address_payable",
                                                "typeString": "address payable"
                                              }
                                            },
                                            "src": "4040:22:2",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bool",
                                              "typeString": "bool"
                                            }
                                          },
                                          "falseBody": {
                                            "id": 698,
                                            "nodeType": "Block",
                                            "src": "4171:293:2",
                                            "statements": [
                                              {
                                                "condition": {
                                                  "commonType": {
                                                    "typeIdentifier": "t_address",
                                                    "typeString": "address"
                                                  },
                                                  "id": 682,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "leftExpression": {
                                                    "id": 680,
                                                    "name": "oldFacet",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 659,
                                                    "src": "4236:8:2",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_address",
                                                      "typeString": "address"
                                                    }
                                                  },
                                                  "nodeType": "BinaryOperation",
                                                  "operator": "!=",
                                                  "rightExpression": {
                                                    "id": 681,
                                                    "name": "newFacetAddress",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 569,
                                                    "src": "4248:15:2",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_address",
                                                      "typeString": "address"
                                                    }
                                                  },
                                                  "src": "4236:27:2",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_bool",
                                                    "typeString": "bool"
                                                  }
                                                },
                                                "id": 697,
                                                "nodeType": "IfStatement",
                                                "src": "4232:210:2",
                                                "trueBody": {
                                                  "id": 696,
                                                  "nodeType": "Block",
                                                  "src": "4265:177:2",
                                                  "statements": [
                                                    {
                                                      "expression": {
                                                        "arguments": [
                                                          {
                                                            "id": 686,
                                                            "name": "selector",
                                                            "nodeType": "Identifier",
                                                            "overloadedDeclarations": [],
                                                            "referencedDeclaration": 650,
                                                            "src": "4324:8:2",
                                                            "typeDescriptions": {
                                                              "typeIdentifier": "t_bytes4",
                                                              "typeString": "bytes4"
                                                            }
                                                          }
                                                        ],
                                                        "expression": {
                                                          "argumentTypes": [
                                                            {
                                                              "typeIdentifier": "t_bytes4",
                                                              "typeString": "bytes4"
                                                            }
                                                          ],
                                                          "expression": {
                                                            "id": 683,
                                                            "name": "LibDiamondCut",
                                                            "nodeType": "Identifier",
                                                            "overloadedDeclarations": [],
                                                            "referencedDeclaration": 1534,
                                                            "src": "4295:13:2",
                                                            "typeDescriptions": {
                                                              "typeIdentifier": "t_type$_t_contract$_LibDiamondCut_$1534_$",
                                                              "typeString": "type(library LibDiamondCut)"
                                                            }
                                                          },
                                                          "id": 685,
                                                          "isConstant": false,
                                                          "isLValue": false,
                                                          "isPure": false,
                                                          "lValueRequested": false,
                                                          "memberName": "removeSelector",
                                                          "nodeType": "MemberAccess",
                                                          "referencedDeclaration": 1514,
                                                          "src": "4295:28:2",
                                                          "typeDescriptions": {
                                                            "typeIdentifier": "t_function_internal_nonpayable$_t_bytes4_$returns$__$",
                                                            "typeString": "function (bytes4)"
                                                          }
                                                        },
                                                        "id": 687,
                                                        "isConstant": false,
                                                        "isLValue": false,
                                                        "isPure": false,
                                                        "kind": "functionCall",
                                                        "lValueRequested": false,
                                                        "names": [],
                                                        "nodeType": "FunctionCall",
                                                        "src": "4295:38:2",
                                                        "tryCall": false,
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_tuple$__$",
                                                          "typeString": "tuple()"
                                                        }
                                                      },
                                                      "id": 688,
                                                      "nodeType": "ExpressionStatement",
                                                      "src": "4295:38:2"
                                                    },
                                                    {
                                                      "expression": {
                                                        "arguments": [
                                                          {
                                                            "id": 692,
                                                            "name": "newFacetAddress",
                                                            "nodeType": "Identifier",
                                                            "overloadedDeclarations": [],
                                                            "referencedDeclaration": 569,
                                                            "src": "4389:15:2",
                                                            "typeDescriptions": {
                                                              "typeIdentifier": "t_address",
                                                              "typeString": "address"
                                                            }
                                                          },
                                                          {
                                                            "id": 693,
                                                            "name": "selector",
                                                            "nodeType": "Identifier",
                                                            "overloadedDeclarations": [],
                                                            "referencedDeclaration": 650,
                                                            "src": "4406:8:2",
                                                            "typeDescriptions": {
                                                              "typeIdentifier": "t_bytes4",
                                                              "typeString": "bytes4"
                                                            }
                                                          }
                                                        ],
                                                        "expression": {
                                                          "argumentTypes": [
                                                            {
                                                              "typeIdentifier": "t_address",
                                                              "typeString": "address"
                                                            },
                                                            {
                                                              "typeIdentifier": "t_bytes4",
                                                              "typeString": "bytes4"
                                                            }
                                                          ],
                                                          "expression": {
                                                            "id": 689,
                                                            "name": "LibDiamondCut",
                                                            "nodeType": "Identifier",
                                                            "overloadedDeclarations": [],
                                                            "referencedDeclaration": 1534,
                                                            "src": "4363:13:2",
                                                            "typeDescriptions": {
                                                              "typeIdentifier": "t_type$_t_contract$_LibDiamondCut_$1534_$",
                                                              "typeString": "type(library LibDiamondCut)"
                                                            }
                                                          },
                                                          "id": 691,
                                                          "isConstant": false,
                                                          "isLValue": false,
                                                          "isPure": false,
                                                          "lValueRequested": false,
                                                          "memberName": "addSelector",
                                                          "nodeType": "MemberAccess",
                                                          "referencedDeclaration": 1345,
                                                          "src": "4363:25:2",
                                                          "typeDescriptions": {
                                                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes4_$returns$__$",
                                                            "typeString": "function (address,bytes4)"
                                                          }
                                                        },
                                                        "id": 694,
                                                        "isConstant": false,
                                                        "isLValue": false,
                                                        "isPure": false,
                                                        "kind": "functionCall",
                                                        "lValueRequested": false,
                                                        "names": [],
                                                        "nodeType": "FunctionCall",
                                                        "src": "4363:52:2",
                                                        "tryCall": false,
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_tuple$__$",
                                                          "typeString": "tuple()"
                                                        }
                                                      },
                                                      "id": 695,
                                                      "nodeType": "ExpressionStatement",
                                                      "src": "4363:52:2"
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          },
                                          "id": 699,
                                          "nodeType": "IfStatement",
                                          "src": "4036:428:2",
                                          "trueBody": {
                                            "id": 679,
                                            "nodeType": "Block",
                                            "src": "4064:101:2",
                                            "statements": [
                                              {
                                                "expression": {
                                                  "arguments": [
                                                    {
                                                      "id": 675,
                                                      "name": "newFacetAddress",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 569,
                                                      "src": "4116:15:2",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_address",
                                                        "typeString": "address"
                                                      }
                                                    },
                                                    {
                                                      "id": 676,
                                                      "name": "selector",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 650,
                                                      "src": "4133:8:2",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_bytes4",
                                                        "typeString": "bytes4"
                                                      }
                                                    }
                                                  ],
                                                  "expression": {
                                                    "argumentTypes": [
                                                      {
                                                        "typeIdentifier": "t_address",
                                                        "typeString": "address"
                                                      },
                                                      {
                                                        "typeIdentifier": "t_bytes4",
                                                        "typeString": "bytes4"
                                                      }
                                                    ],
                                                    "expression": {
                                                      "id": 672,
                                                      "name": "LibDiamondCut",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 1534,
                                                      "src": "4090:13:2",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_type$_t_contract$_LibDiamondCut_$1534_$",
                                                        "typeString": "type(library LibDiamondCut)"
                                                      }
                                                    },
                                                    "id": 674,
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": false,
                                                    "lValueRequested": false,
                                                    "memberName": "addSelector",
                                                    "nodeType": "MemberAccess",
                                                    "referencedDeclaration": 1345,
                                                    "src": "4090:25:2",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes4_$returns$__$",
                                                      "typeString": "function (address,bytes4)"
                                                    }
                                                  },
                                                  "id": 677,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "kind": "functionCall",
                                                  "lValueRequested": false,
                                                  "names": [],
                                                  "nodeType": "FunctionCall",
                                                  "src": "4090:52:2",
                                                  "tryCall": false,
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_tuple$__$",
                                                    "typeString": "tuple()"
                                                  }
                                                },
                                                "id": 678,
                                                "nodeType": "ExpressionStatement",
                                                "src": "4090:52:2"
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 645,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "id": 639,
                                        "name": "selectorIndex",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 637,
                                        "src": "3715:13:2",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "<",
                                      "rightExpression": {
                                        "expression": {
                                          "expression": {
                                            "baseExpression": {
                                              "id": 640,
                                              "name": "_diamondCut",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 538,
                                              "src": "3731:11:2",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_array$_t_struct$_Facet_$985_calldata_ptr_$dyn_calldata_ptr",
                                                "typeString": "struct IDiamondCut.Facet calldata[] calldata"
                                              }
                                            },
                                            "id": 642,
                                            "indexExpression": {
                                              "id": 641,
                                              "name": "facetIndex",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 559,
                                              "src": "3743:10:2",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "IndexAccess",
                                            "src": "3731:23:2",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_Facet_$985_calldata_ptr",
                                              "typeString": "struct IDiamondCut.Facet calldata"
                                            }
                                          },
                                          "id": 643,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "functionSelectors",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 984,
                                          "src": "3731:41:2",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_array$_t_bytes4_$dyn_calldata_ptr",
                                            "typeString": "bytes4[] calldata"
                                          }
                                        },
                                        "id": 644,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "length",
                                        "nodeType": "MemberAccess",
                                        "src": "3731:48:2",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "3715:64:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "id": 701,
                                    "initializationExpression": {
                                      "assignments": [
                                        637
                                      ],
                                      "declarations": [
                                        {
                                          "constant": false,
                                          "id": 637,
                                          "mutability": "mutable",
                                          "name": "selectorIndex",
                                          "nodeType": "VariableDeclaration",
                                          "scope": 701,
                                          "src": "3692:21:2",
                                          "stateVariable": false,
                                          "storageLocation": "default",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "typeName": {
                                            "id": 636,
                                            "name": "uint256",
                                            "nodeType": "ElementaryTypeName",
                                            "src": "3692:7:2",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "visibility": "internal"
                                        }
                                      ],
                                      "id": 638,
                                      "nodeType": "VariableDeclarationStatement",
                                      "src": "3692:21:2"
                                    },
                                    "loopExpression": {
                                      "expression": {
                                        "id": 647,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "UnaryOperation",
                                        "operator": "++",
                                        "prefix": false,
                                        "src": "3781:15:2",
                                        "subExpression": {
                                          "id": 646,
                                          "name": "selectorIndex",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 637,
                                          "src": "3781:13:2",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "id": 648,
                                      "nodeType": "ExpressionStatement",
                                      "src": "3781:15:2"
                                    },
                                    "nodeType": "ForStatement",
                                    "src": "3687:795:2"
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 564,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 561,
                            "name": "facetIndex",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 559,
                            "src": "2741:10:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "expression": {
                              "id": 562,
                              "name": "_diamondCut",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 538,
                              "src": "2754:11:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Facet_$985_calldata_ptr_$dyn_calldata_ptr",
                                "typeString": "struct IDiamondCut.Facet calldata[] calldata"
                              }
                            },
                            "id": 563,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "2754:18:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2741:31:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 732,
                        "initializationExpression": {
                          "assignments": [
                            559
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 559,
                              "mutability": "mutable",
                              "name": "facetIndex",
                              "nodeType": "VariableDeclaration",
                              "scope": 732,
                              "src": "2721:18:2",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 558,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "2721:7:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 560,
                          "nodeType": "VariableDeclarationStatement",
                          "src": "2721:18:2"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 566,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "2774:12:2",
                            "subExpression": {
                              "id": 565,
                              "name": "facetIndex",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 559,
                              "src": "2774:10:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 567,
                          "nodeType": "ExpressionStatement",
                          "src": "2774:12:2"
                        },
                        "nodeType": "ForStatement",
                        "src": "2716:2102:2"
                      }
                    ]
                  },
                  "id": 734,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "externalCut",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 539,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 538,
                        "mutability": "mutable",
                        "name": "_diamondCut",
                        "nodeType": "VariableDeclaration",
                        "scope": 734,
                        "src": "2502:28:2",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Facet_$985_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "struct IDiamondCut.Facet[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 536,
                            "name": "Facet",
                            "nodeType": "UserDefinedTypeName",
                            "referencedDeclaration": 985,
                            "src": "2502:5:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Facet_$985_storage_ptr",
                              "typeString": "struct IDiamondCut.Facet"
                            }
                          },
                          "id": 537,
                          "nodeType": "ArrayTypeName",
                          "src": "2502:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Facet_$985_storage_$dyn_storage_ptr",
                            "typeString": "struct IDiamondCut.Facet[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2501:30:2"
                  },
                  "returnParameters": {
                    "id": 540,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2541:0:2"
                  },
                  "scope": 735,
                  "src": "2481:2343:2",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 736,
              "src": "514:4312:2"
            }
          ],
          "src": "32:4795:2"
        },
        "id": 2
      },
      "solc_0.7/diamond/facets/DiamondLoupeFacet.sol": {
        "ast": {
          "absolutePath": "solc_0.7/diamond/facets/DiamondLoupeFacet.sol",
          "exportedSymbols": {
            "DiamondLoupeFacet": [
              911
            ]
          },
          "id": 912,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 737,
              "literals": [
                "solidity",
                "^",
                "0.7",
                ".1"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:23:3"
            },
            {
              "id": 738,
              "literals": [
                "experimental",
                "ABIEncoderV2"
              ],
              "nodeType": "PragmaDirective",
              "src": "56:33:3"
            },
            {
              "absolutePath": "solc_0.7/diamond/libraries/LibDiamondStorage.sol",
              "file": "../libraries/LibDiamondStorage.sol",
              "id": 739,
              "nodeType": "ImportDirective",
              "scope": 912,
              "sourceUnit": 1584,
              "src": "381:44:3",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "solc_0.7/diamond/interfaces/IDiamondCut.sol",
              "file": "../interfaces/IDiamondCut.sol",
              "id": 740,
              "nodeType": "ImportDirective",
              "scope": 912,
              "sourceUnit": 1007,
              "src": "426:39:3",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "solc_0.7/diamond/interfaces/IDiamondLoupe.sol",
              "file": "../interfaces/IDiamondLoupe.sol",
              "id": 741,
              "nodeType": "ImportDirective",
              "scope": 912,
              "sourceUnit": 1048,
              "src": "466:41:3",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "solc_0.7/diamond/interfaces/IERC165.sol",
              "file": "../interfaces/IERC165.sol",
              "id": 742,
              "nodeType": "ImportDirective",
              "scope": 912,
              "sourceUnit": 1060,
              "src": "508:35:3",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 743,
                    "name": "IDiamondLoupe",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 1047,
                    "src": "575:13:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IDiamondLoupe_$1047",
                      "typeString": "contract IDiamondLoupe"
                    }
                  },
                  "id": 744,
                  "nodeType": "InheritanceSpecifier",
                  "src": "575:13:3"
                },
                {
                  "baseName": {
                    "id": 745,
                    "name": "IERC165",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 1059,
                    "src": "590:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC165_$1059",
                      "typeString": "contract IERC165"
                    }
                  },
                  "id": 746,
                  "nodeType": "InheritanceSpecifier",
                  "src": "590:7:3"
                }
              ],
              "contractDependencies": [
                1047,
                1059
              ],
              "contractKind": "contract",
              "fullyImplemented": true,
              "id": 911,
              "linearizedBaseContracts": [
                911,
                1059,
                1047
              ],
              "name": "DiamondLoupeFacet",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "baseFunctions": [
                    1022
                  ],
                  "body": {
                    "id": 812,
                    "nodeType": "Block",
                    "src": "1154:460:3",
                    "statements": [
                      {
                        "assignments": [
                          757
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 757,
                            "mutability": "mutable",
                            "name": "ds",
                            "nodeType": "VariableDeclaration",
                            "scope": 812,
                            "src": "1164:43:3",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                              "typeString": "struct LibDiamondStorage.DiamondStorage"
                            },
                            "typeName": {
                              "id": 756,
                              "name": "LibDiamondStorage.DiamondStorage",
                              "nodeType": "UserDefinedTypeName",
                              "referencedDeclaration": 1571,
                              "src": "1164:32:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                "typeString": "struct LibDiamondStorage.DiamondStorage"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 761,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 758,
                              "name": "LibDiamondStorage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1583,
                              "src": "1210:17:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_LibDiamondStorage_$1583_$",
                                "typeString": "type(library LibDiamondStorage)"
                              }
                            },
                            "id": 759,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "diamondStorage",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1582,
                            "src": "1210:32:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_DiamondStorage_$1571_storage_ptr_$",
                              "typeString": "function () pure returns (struct LibDiamondStorage.DiamondStorage storage pointer)"
                            }
                          },
                          "id": 760,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1210:34:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                            "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1164:80:3"
                      },
                      {
                        "assignments": [
                          763
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 763,
                            "mutability": "mutable",
                            "name": "numFacets",
                            "nodeType": "VariableDeclaration",
                            "scope": 812,
                            "src": "1254:17:3",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 762,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "1254:7:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 767,
                        "initialValue": {
                          "expression": {
                            "expression": {
                              "id": 764,
                              "name": "ds",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 757,
                              "src": "1274:2:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                              }
                            },
                            "id": 765,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "facetAddresses",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1566,
                            "src": "1274:17:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_storage",
                              "typeString": "address[] storage ref"
                            }
                          },
                          "id": 766,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "1274:24:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1254:44:3"
                      },
                      {
                        "expression": {
                          "id": 774,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 768,
                            "name": "facets_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 752,
                            "src": "1308:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_Facet_$1015_memory_ptr_$dyn_memory_ptr",
                              "typeString": "struct IDiamondLoupe.Facet memory[] memory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 772,
                                "name": "numFacets",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 763,
                                "src": "1330:9:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 771,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "NewExpression",
                              "src": "1318:11:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_Facet_$1015_memory_ptr_$dyn_memory_ptr_$",
                                "typeString": "function (uint256) pure returns (struct IDiamondLoupe.Facet memory[] memory)"
                              },
                              "typeName": {
                                "baseType": {
                                  "id": 769,
                                  "name": "Facet",
                                  "nodeType": "UserDefinedTypeName",
                                  "referencedDeclaration": 1015,
                                  "src": "1322:5:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Facet_$1015_storage_ptr",
                                    "typeString": "struct IDiamondLoupe.Facet"
                                  }
                                },
                                "id": 770,
                                "nodeType": "ArrayTypeName",
                                "src": "1322:7:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_struct$_Facet_$1015_storage_$dyn_storage_ptr",
                                  "typeString": "struct IDiamondLoupe.Facet[]"
                                }
                              }
                            },
                            "id": 773,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1318:22:3",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_Facet_$1015_memory_ptr_$dyn_memory_ptr",
                              "typeString": "struct IDiamondLoupe.Facet memory[] memory"
                            }
                          },
                          "src": "1308:32:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Facet_$1015_memory_ptr_$dyn_memory_ptr",
                            "typeString": "struct IDiamondLoupe.Facet memory[] memory"
                          }
                        },
                        "id": 775,
                        "nodeType": "ExpressionStatement",
                        "src": "1308:32:3"
                      },
                      {
                        "body": {
                          "id": 810,
                          "nodeType": "Block",
                          "src": "1386:222:3",
                          "statements": [
                            {
                              "assignments": [
                                786
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 786,
                                  "mutability": "mutable",
                                  "name": "facetAddress",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 810,
                                  "src": "1400:20:3",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  "typeName": {
                                    "id": 785,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "1400:7:3",
                                    "stateMutability": "nonpayable",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 791,
                              "initialValue": {
                                "baseExpression": {
                                  "expression": {
                                    "id": 787,
                                    "name": "ds",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 757,
                                    "src": "1423:2:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                      "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                                    }
                                  },
                                  "id": 788,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "facetAddresses",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1566,
                                  "src": "1423:17:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                    "typeString": "address[] storage ref"
                                  }
                                },
                                "id": 790,
                                "indexExpression": {
                                  "id": 789,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 777,
                                  "src": "1441:1:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "1423:20:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "1400:43:3"
                            },
                            {
                              "expression": {
                                "id": 797,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "expression": {
                                    "baseExpression": {
                                      "id": 792,
                                      "name": "facets_",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 752,
                                      "src": "1457:7:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_struct$_Facet_$1015_memory_ptr_$dyn_memory_ptr",
                                        "typeString": "struct IDiamondLoupe.Facet memory[] memory"
                                      }
                                    },
                                    "id": 794,
                                    "indexExpression": {
                                      "id": 793,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 777,
                                      "src": "1465:1:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "1457:10:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Facet_$1015_memory_ptr",
                                      "typeString": "struct IDiamondLoupe.Facet memory"
                                    }
                                  },
                                  "id": 795,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "memberName": "facetAddress",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1011,
                                  "src": "1457:23:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "id": 796,
                                  "name": "facetAddress",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 786,
                                  "src": "1483:12:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "src": "1457:38:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "id": 798,
                              "nodeType": "ExpressionStatement",
                              "src": "1457:38:3"
                            },
                            {
                              "expression": {
                                "id": 808,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "expression": {
                                    "baseExpression": {
                                      "id": 799,
                                      "name": "facets_",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 752,
                                      "src": "1509:7:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_struct$_Facet_$1015_memory_ptr_$dyn_memory_ptr",
                                        "typeString": "struct IDiamondLoupe.Facet memory[] memory"
                                      }
                                    },
                                    "id": 801,
                                    "indexExpression": {
                                      "id": 800,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 777,
                                      "src": "1517:1:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "1509:10:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Facet_$1015_memory_ptr",
                                      "typeString": "struct IDiamondLoupe.Facet memory"
                                    }
                                  },
                                  "id": 802,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "memberName": "functionSelectors",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1014,
                                  "src": "1509:28:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_bytes4_$dyn_memory_ptr",
                                    "typeString": "bytes4[] memory"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "expression": {
                                    "baseExpression": {
                                      "expression": {
                                        "id": 803,
                                        "name": "ds",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 757,
                                        "src": "1540:2:3",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                          "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                                        }
                                      },
                                      "id": 804,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "facetFunctionSelectors",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 1563,
                                      "src": "1540:25:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$1553_storage_$",
                                        "typeString": "mapping(address => struct LibDiamondStorage.FacetFunctionSelectors storage ref)"
                                      }
                                    },
                                    "id": 806,
                                    "indexExpression": {
                                      "id": 805,
                                      "name": "facetAddress",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 786,
                                      "src": "1566:12:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "1540:39:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_FacetFunctionSelectors_$1553_storage",
                                      "typeString": "struct LibDiamondStorage.FacetFunctionSelectors storage ref"
                                    }
                                  },
                                  "id": 807,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "functionSelectors",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1550,
                                  "src": "1540:57:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_bytes4_$dyn_storage",
                                    "typeString": "bytes4[] storage ref"
                                  }
                                },
                                "src": "1509:88:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_bytes4_$dyn_memory_ptr",
                                  "typeString": "bytes4[] memory"
                                }
                              },
                              "id": 809,
                              "nodeType": "ExpressionStatement",
                              "src": "1509:88:3"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 781,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 779,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 777,
                            "src": "1366:1:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "id": 780,
                            "name": "numFacets",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 763,
                            "src": "1370:9:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1366:13:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 811,
                        "initializationExpression": {
                          "assignments": [
                            777
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 777,
                              "mutability": "mutable",
                              "name": "i",
                              "nodeType": "VariableDeclaration",
                              "scope": 811,
                              "src": "1355:9:3",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 776,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "1355:7:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 778,
                          "nodeType": "VariableDeclarationStatement",
                          "src": "1355:9:3"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 783,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "1381:3:3",
                            "subExpression": {
                              "id": 782,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 777,
                              "src": "1381:1:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 784,
                          "nodeType": "ExpressionStatement",
                          "src": "1381:3:3"
                        },
                        "nodeType": "ForStatement",
                        "src": "1350:258:3"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 747,
                    "nodeType": "StructuredDocumentation",
                    "src": "997:78:3",
                    "text": "@notice Gets all facets and their selectors.\n @return facets_ Facet"
                  },
                  "functionSelector": "7a0ed627",
                  "id": 813,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "facets",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 749,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "1107:8:3"
                  },
                  "parameters": {
                    "id": 748,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1095:2:3"
                  },
                  "returnParameters": {
                    "id": 753,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 752,
                        "mutability": "mutable",
                        "name": "facets_",
                        "nodeType": "VariableDeclaration",
                        "scope": 813,
                        "src": "1130:22:3",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Facet_$1015_memory_ptr_$dyn_memory_ptr",
                          "typeString": "struct IDiamondLoupe.Facet[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 750,
                            "name": "Facet",
                            "nodeType": "UserDefinedTypeName",
                            "referencedDeclaration": 1015,
                            "src": "1130:5:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Facet_$1015_storage_ptr",
                              "typeString": "struct IDiamondLoupe.Facet"
                            }
                          },
                          "id": 751,
                          "nodeType": "ArrayTypeName",
                          "src": "1130:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Facet_$1015_storage_$dyn_storage_ptr",
                            "typeString": "struct IDiamondLoupe.Facet[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1129:24:3"
                  },
                  "scope": 911,
                  "src": "1080:534:3",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "baseFunctions": [
                    1031
                  ],
                  "body": {
                    "id": 839,
                    "nodeType": "Block",
                    "src": "1891:184:3",
                    "statements": [
                      {
                        "assignments": [
                          826
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 826,
                            "mutability": "mutable",
                            "name": "ds",
                            "nodeType": "VariableDeclaration",
                            "scope": 839,
                            "src": "1901:43:3",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                              "typeString": "struct LibDiamondStorage.DiamondStorage"
                            },
                            "typeName": {
                              "id": 825,
                              "name": "LibDiamondStorage.DiamondStorage",
                              "nodeType": "UserDefinedTypeName",
                              "referencedDeclaration": 1571,
                              "src": "1901:32:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                "typeString": "struct LibDiamondStorage.DiamondStorage"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 830,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 827,
                              "name": "LibDiamondStorage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1583,
                              "src": "1947:17:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_LibDiamondStorage_$1583_$",
                                "typeString": "type(library LibDiamondStorage)"
                              }
                            },
                            "id": 828,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "diamondStorage",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1582,
                            "src": "1947:32:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_DiamondStorage_$1571_storage_ptr_$",
                              "typeString": "function () pure returns (struct LibDiamondStorage.DiamondStorage storage pointer)"
                            }
                          },
                          "id": 829,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1947:34:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                            "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1901:80:3"
                      },
                      {
                        "expression": {
                          "id": 837,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 831,
                            "name": "facetFunctionSelectors_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 821,
                            "src": "1991:23:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_bytes4_$dyn_memory_ptr",
                              "typeString": "bytes4[] memory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "baseExpression": {
                                "expression": {
                                  "id": 832,
                                  "name": "ds",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 826,
                                  "src": "2017:2:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                    "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                                  }
                                },
                                "id": 833,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "facetFunctionSelectors",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1563,
                                "src": "2017:25:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$1553_storage_$",
                                  "typeString": "mapping(address => struct LibDiamondStorage.FacetFunctionSelectors storage ref)"
                                }
                              },
                              "id": 835,
                              "indexExpression": {
                                "id": 834,
                                "name": "_facet",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 816,
                                "src": "2043:6:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "2017:33:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_FacetFunctionSelectors_$1553_storage",
                                "typeString": "struct LibDiamondStorage.FacetFunctionSelectors storage ref"
                              }
                            },
                            "id": 836,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "functionSelectors",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1550,
                            "src": "2017:51:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_bytes4_$dyn_storage",
                              "typeString": "bytes4[] storage ref"
                            }
                          },
                          "src": "1991:77:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_bytes4_$dyn_memory_ptr",
                            "typeString": "bytes4[] memory"
                          }
                        },
                        "id": 838,
                        "nodeType": "ExpressionStatement",
                        "src": "1991:77:3"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 814,
                    "nodeType": "StructuredDocumentation",
                    "src": "1620:145:3",
                    "text": "@notice Gets all the function selectors provided by a facet.\n @param _facet The facet address.\n @return facetFunctionSelectors_"
                  },
                  "functionSelector": "adfca15e",
                  "id": 840,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "facetFunctionSelectors",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 818,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "1827:8:3"
                  },
                  "parameters": {
                    "id": 817,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 816,
                        "mutability": "mutable",
                        "name": "_facet",
                        "nodeType": "VariableDeclaration",
                        "scope": 840,
                        "src": "1802:14:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 815,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1802:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1801:16:3"
                  },
                  "returnParameters": {
                    "id": 822,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 821,
                        "mutability": "mutable",
                        "name": "facetFunctionSelectors_",
                        "nodeType": "VariableDeclaration",
                        "scope": 840,
                        "src": "1850:39:3",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes4_$dyn_memory_ptr",
                          "typeString": "bytes4[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 819,
                            "name": "bytes4",
                            "nodeType": "ElementaryTypeName",
                            "src": "1850:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "id": 820,
                          "nodeType": "ArrayTypeName",
                          "src": "1850:8:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_bytes4_$dyn_storage_ptr",
                            "typeString": "bytes4[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1849:41:3"
                  },
                  "scope": 911,
                  "src": "1770:305:3",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "baseFunctions": [
                    1038
                  ],
                  "body": {
                    "id": 861,
                    "nodeType": "Block",
                    "src": "2268:142:3",
                    "statements": [
                      {
                        "assignments": [
                          851
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 851,
                            "mutability": "mutable",
                            "name": "ds",
                            "nodeType": "VariableDeclaration",
                            "scope": 861,
                            "src": "2278:43:3",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                              "typeString": "struct LibDiamondStorage.DiamondStorage"
                            },
                            "typeName": {
                              "id": 850,
                              "name": "LibDiamondStorage.DiamondStorage",
                              "nodeType": "UserDefinedTypeName",
                              "referencedDeclaration": 1571,
                              "src": "2278:32:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                "typeString": "struct LibDiamondStorage.DiamondStorage"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 855,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 852,
                              "name": "LibDiamondStorage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1583,
                              "src": "2324:17:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_LibDiamondStorage_$1583_$",
                                "typeString": "type(library LibDiamondStorage)"
                              }
                            },
                            "id": 853,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "diamondStorage",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1582,
                            "src": "2324:32:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_DiamondStorage_$1571_storage_ptr_$",
                              "typeString": "function () pure returns (struct LibDiamondStorage.DiamondStorage storage pointer)"
                            }
                          },
                          "id": 854,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2324:34:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                            "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2278:80:3"
                      },
                      {
                        "expression": {
                          "id": 859,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 856,
                            "name": "facetAddresses_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 846,
                            "src": "2368:15:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                              "typeString": "address[] memory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 857,
                              "name": "ds",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 851,
                              "src": "2386:2:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                              }
                            },
                            "id": 858,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "facetAddresses",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1566,
                            "src": "2386:17:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_storage",
                              "typeString": "address[] storage ref"
                            }
                          },
                          "src": "2368:35:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                            "typeString": "address[] memory"
                          }
                        },
                        "id": 860,
                        "nodeType": "ExpressionStatement",
                        "src": "2368:35:3"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 841,
                    "nodeType": "StructuredDocumentation",
                    "src": "2081:90:3",
                    "text": "@notice Get all the facet addresses used by a diamond.\n @return facetAddresses_"
                  },
                  "functionSelector": "52ef6b2c",
                  "id": 862,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "facetAddresses",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 843,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "2211:8:3"
                  },
                  "parameters": {
                    "id": 842,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2199:2:3"
                  },
                  "returnParameters": {
                    "id": 847,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 846,
                        "mutability": "mutable",
                        "name": "facetAddresses_",
                        "nodeType": "VariableDeclaration",
                        "scope": 862,
                        "src": "2234:32:3",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 844,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "2234:7:3",
                            "stateMutability": "nonpayable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 845,
                          "nodeType": "ArrayTypeName",
                          "src": "2234:9:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                            "typeString": "address[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2233:34:3"
                  },
                  "scope": 911,
                  "src": "2176:234:3",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "baseFunctions": [
                    1046
                  ],
                  "body": {
                    "id": 887,
                    "nodeType": "Block",
                    "src": "2743:184:3",
                    "statements": [
                      {
                        "assignments": [
                          874
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 874,
                            "mutability": "mutable",
                            "name": "ds",
                            "nodeType": "VariableDeclaration",
                            "scope": 887,
                            "src": "2753:43:3",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                              "typeString": "struct LibDiamondStorage.DiamondStorage"
                            },
                            "typeName": {
                              "id": 873,
                              "name": "LibDiamondStorage.DiamondStorage",
                              "nodeType": "UserDefinedTypeName",
                              "referencedDeclaration": 1571,
                              "src": "2753:32:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                "typeString": "struct LibDiamondStorage.DiamondStorage"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 878,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 875,
                              "name": "LibDiamondStorage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1583,
                              "src": "2799:17:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_LibDiamondStorage_$1583_$",
                                "typeString": "type(library LibDiamondStorage)"
                              }
                            },
                            "id": 876,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "diamondStorage",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1582,
                            "src": "2799:32:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_DiamondStorage_$1571_storage_ptr_$",
                              "typeString": "function () pure returns (struct LibDiamondStorage.DiamondStorage storage pointer)"
                            }
                          },
                          "id": 877,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2799:34:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                            "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2753:80:3"
                      },
                      {
                        "expression": {
                          "id": 885,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 879,
                            "name": "facetAddress_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 869,
                            "src": "2843:13:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "baseExpression": {
                                "expression": {
                                  "id": 880,
                                  "name": "ds",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 874,
                                  "src": "2859:2:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                    "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                                  }
                                },
                                "id": 881,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "selectorToFacetAndPosition",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1559,
                                "src": "2859:29:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_bytes4_$_t_struct$_FacetAddressAndPosition_$1547_storage_$",
                                  "typeString": "mapping(bytes4 => struct LibDiamondStorage.FacetAddressAndPosition storage ref)"
                                }
                              },
                              "id": 883,
                              "indexExpression": {
                                "id": 882,
                                "name": "_functionSelector",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 865,
                                "src": "2889:17:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "2859:48:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_FacetAddressAndPosition_$1547_storage",
                                "typeString": "struct LibDiamondStorage.FacetAddressAndPosition storage ref"
                              }
                            },
                            "id": 884,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "facetAddress",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1544,
                            "src": "2859:61:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "2843:77:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 886,
                        "nodeType": "ExpressionStatement",
                        "src": "2843:77:3"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 863,
                    "nodeType": "StructuredDocumentation",
                    "src": "2416:219:3",
                    "text": "@notice Gets the facet that supports the given selector.\n @dev If facet is not found return address(0).\n @param _functionSelector The function selector.\n @return facetAddress_ The facet address."
                  },
                  "functionSelector": "cdffacc6",
                  "id": 888,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "facetAddress",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 867,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "2697:8:3"
                  },
                  "parameters": {
                    "id": 866,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 865,
                        "mutability": "mutable",
                        "name": "_functionSelector",
                        "nodeType": "VariableDeclaration",
                        "scope": 888,
                        "src": "2662:24:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "typeName": {
                          "id": 864,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "2662:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2661:26:3"
                  },
                  "returnParameters": {
                    "id": 870,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 869,
                        "mutability": "mutable",
                        "name": "facetAddress_",
                        "nodeType": "VariableDeclaration",
                        "scope": 888,
                        "src": "2720:21:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 868,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2720:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2719:23:3"
                  },
                  "scope": 911,
                  "src": "2640:287:3",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "baseFunctions": [
                    1058
                  ],
                  "body": {
                    "id": 909,
                    "nodeType": "Block",
                    "src": "3051:150:3",
                    "statements": [
                      {
                        "assignments": [
                          899
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 899,
                            "mutability": "mutable",
                            "name": "ds",
                            "nodeType": "VariableDeclaration",
                            "scope": 909,
                            "src": "3061:43:3",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                              "typeString": "struct LibDiamondStorage.DiamondStorage"
                            },
                            "typeName": {
                              "id": 898,
                              "name": "LibDiamondStorage.DiamondStorage",
                              "nodeType": "UserDefinedTypeName",
                              "referencedDeclaration": 1571,
                              "src": "3061:32:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                "typeString": "struct LibDiamondStorage.DiamondStorage"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 903,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 900,
                              "name": "LibDiamondStorage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1583,
                              "src": "3107:17:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_LibDiamondStorage_$1583_$",
                                "typeString": "type(library LibDiamondStorage)"
                              }
                            },
                            "id": 901,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "diamondStorage",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1582,
                            "src": "3107:32:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_DiamondStorage_$1571_storage_ptr_$",
                              "typeString": "function () pure returns (struct LibDiamondStorage.DiamondStorage storage pointer)"
                            }
                          },
                          "id": 902,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3107:34:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                            "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3061:80:3"
                      },
                      {
                        "expression": {
                          "baseExpression": {
                            "expression": {
                              "id": 904,
                              "name": "ds",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 899,
                              "src": "3158:2:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                              }
                            },
                            "id": 905,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "supportedInterfaces",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1570,
                            "src": "3158:22:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_bytes4_$_t_bool_$",
                              "typeString": "mapping(bytes4 => bool)"
                            }
                          },
                          "id": 907,
                          "indexExpression": {
                            "id": 906,
                            "name": "_interfaceId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 890,
                            "src": "3181:12:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "3158:36:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 895,
                        "id": 908,
                        "nodeType": "Return",
                        "src": "3151:43:3"
                      }
                    ]
                  },
                  "functionSelector": "01ffc9a7",
                  "id": 910,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "supportsInterface",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 892,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "3022:8:3"
                  },
                  "parameters": {
                    "id": 891,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 890,
                        "mutability": "mutable",
                        "name": "_interfaceId",
                        "nodeType": "VariableDeclaration",
                        "scope": 910,
                        "src": "2992:19:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "typeName": {
                          "id": 889,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "2992:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2991:21:3"
                  },
                  "returnParameters": {
                    "id": 895,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 894,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 910,
                        "src": "3045:4:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 893,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "3045:4:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3044:6:3"
                  },
                  "scope": 911,
                  "src": "2965:236:3",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 912,
              "src": "545:2658:3"
            }
          ],
          "src": "32:3172:3"
        },
        "id": 3
      },
      "solc_0.7/diamond/facets/OwnershipFacet.sol": {
        "ast": {
          "absolutePath": "solc_0.7/diamond/facets/OwnershipFacet.sol",
          "exportedSymbols": {
            "OwnershipFacet": [
              976
            ]
          },
          "id": 977,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 913,
              "literals": [
                "solidity",
                "^",
                "0.7",
                ".1"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:23:4"
            },
            {
              "id": 914,
              "literals": [
                "experimental",
                "ABIEncoderV2"
              ],
              "nodeType": "PragmaDirective",
              "src": "56:33:4"
            },
            {
              "absolutePath": "solc_0.7/diamond/libraries/LibDiamondStorage.sol",
              "file": "../libraries/LibDiamondStorage.sol",
              "id": 915,
              "nodeType": "ImportDirective",
              "scope": 977,
              "sourceUnit": 1584,
              "src": "335:44:4",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "solc_0.7/diamond/interfaces/IERC173.sol",
              "file": "../interfaces/IERC173.sol",
              "id": 916,
              "nodeType": "ImportDirective",
              "scope": 977,
              "sourceUnit": 1084,
              "src": "380:35:4",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 917,
                    "name": "IERC173",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 1083,
                    "src": "444:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC173_$1083",
                      "typeString": "contract IERC173"
                    }
                  },
                  "id": 918,
                  "nodeType": "InheritanceSpecifier",
                  "src": "444:7:4"
                }
              ],
              "contractDependencies": [
                1083
              ],
              "contractKind": "contract",
              "fullyImplemented": true,
              "id": 976,
              "linearizedBaseContracts": [
                976,
                1083
              ],
              "name": "OwnershipFacet",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "baseFunctions": [
                    1082
                  ],
                  "body": {
                    "id": 956,
                    "nodeType": "Block",
                    "src": "521:313:4",
                    "statements": [
                      {
                        "assignments": [
                          927
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 927,
                            "mutability": "mutable",
                            "name": "ds",
                            "nodeType": "VariableDeclaration",
                            "scope": 956,
                            "src": "531:43:4",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                              "typeString": "struct LibDiamondStorage.DiamondStorage"
                            },
                            "typeName": {
                              "id": 926,
                              "name": "LibDiamondStorage.DiamondStorage",
                              "nodeType": "UserDefinedTypeName",
                              "referencedDeclaration": 1571,
                              "src": "531:32:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                "typeString": "struct LibDiamondStorage.DiamondStorage"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 931,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 928,
                              "name": "LibDiamondStorage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1583,
                              "src": "577:17:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_LibDiamondStorage_$1583_$",
                                "typeString": "type(library LibDiamondStorage)"
                              }
                            },
                            "id": 929,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "diamondStorage",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1582,
                            "src": "577:32:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_DiamondStorage_$1571_storage_ptr_$",
                              "typeString": "function () pure returns (struct LibDiamondStorage.DiamondStorage storage pointer)"
                            }
                          },
                          "id": 930,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "577:34:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                            "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "531:80:4"
                      },
                      {
                        "assignments": [
                          933
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 933,
                            "mutability": "mutable",
                            "name": "currentOwner",
                            "nodeType": "VariableDeclaration",
                            "scope": 956,
                            "src": "621:20:4",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 932,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "621:7:4",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 936,
                        "initialValue": {
                          "expression": {
                            "id": 934,
                            "name": "ds",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 927,
                            "src": "644:2:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                              "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                            }
                          },
                          "id": 935,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "contractOwner",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1555,
                          "src": "644:16:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "621:39:4"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 941,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 938,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "678:3:4",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 939,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "678:10:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "id": 940,
                                "name": "currentOwner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 933,
                                "src": "692:12:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "678:26:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4d757374206f776e2074686520636f6e74726163742e",
                              "id": 942,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "706:24:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_0e82b990864eae1c907cbad09422fafe5b0fe335c0f2f8501c3fd26849f25167",
                                "typeString": "literal_string \"Must own the contract.\""
                              },
                              "value": "Must own the contract."
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_0e82b990864eae1c907cbad09422fafe5b0fe335c0f2f8501c3fd26849f25167",
                                "typeString": "literal_string \"Must own the contract.\""
                              }
                            ],
                            "id": 937,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "670:7:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 943,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "670:61:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 944,
                        "nodeType": "ExpressionStatement",
                        "src": "670:61:4"
                      },
                      {
                        "expression": {
                          "id": 949,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 945,
                              "name": "ds",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 927,
                              "src": "741:2:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                              }
                            },
                            "id": 947,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "contractOwner",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1555,
                            "src": "741:16:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 948,
                            "name": "newOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 920,
                            "src": "760:8:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "741:27:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 950,
                        "nodeType": "ExpressionStatement",
                        "src": "741:27:4"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 952,
                              "name": "currentOwner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 933,
                              "src": "804:12:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 953,
                              "name": "newOwner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 920,
                              "src": "818:8:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 951,
                            "name": "OwnershipTransferred",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1070,
                            "src": "783:20:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                              "typeString": "function (address,address)"
                            }
                          },
                          "id": 954,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "783:44:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 955,
                        "nodeType": "EmitStatement",
                        "src": "778:49:4"
                      }
                    ]
                  },
                  "functionSelector": "f2fde38b",
                  "id": 957,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transferOwnership",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 922,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "512:8:4"
                  },
                  "parameters": {
                    "id": 921,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 920,
                        "mutability": "mutable",
                        "name": "newOwner",
                        "nodeType": "VariableDeclaration",
                        "scope": 957,
                        "src": "485:16:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 919,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "485:7:4",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "484:18:4"
                  },
                  "returnParameters": {
                    "id": 923,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "521:0:4"
                  },
                  "scope": 976,
                  "src": "458:376:4",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "baseFunctions": [
                    1076
                  ],
                  "body": {
                    "id": 974,
                    "nodeType": "Block",
                    "src": "898:130:4",
                    "statements": [
                      {
                        "assignments": [
                          966
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 966,
                            "mutability": "mutable",
                            "name": "ds",
                            "nodeType": "VariableDeclaration",
                            "scope": 974,
                            "src": "908:43:4",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                              "typeString": "struct LibDiamondStorage.DiamondStorage"
                            },
                            "typeName": {
                              "id": 965,
                              "name": "LibDiamondStorage.DiamondStorage",
                              "nodeType": "UserDefinedTypeName",
                              "referencedDeclaration": 1571,
                              "src": "908:32:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                "typeString": "struct LibDiamondStorage.DiamondStorage"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 970,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 967,
                              "name": "LibDiamondStorage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1583,
                              "src": "954:17:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_LibDiamondStorage_$1583_$",
                                "typeString": "type(library LibDiamondStorage)"
                              }
                            },
                            "id": 968,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "diamondStorage",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1582,
                            "src": "954:32:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_DiamondStorage_$1571_storage_ptr_$",
                              "typeString": "function () pure returns (struct LibDiamondStorage.DiamondStorage storage pointer)"
                            }
                          },
                          "id": 969,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "954:34:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                            "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "908:80:4"
                      },
                      {
                        "expression": {
                          "expression": {
                            "id": 971,
                            "name": "ds",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 966,
                            "src": "1005:2:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                              "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                            }
                          },
                          "id": 972,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "contractOwner",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1555,
                          "src": "1005:16:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 962,
                        "id": 973,
                        "nodeType": "Return",
                        "src": "998:23:4"
                      }
                    ]
                  },
                  "functionSelector": "8da5cb5b",
                  "id": 975,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "owner",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 959,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "866:8:4"
                  },
                  "parameters": {
                    "id": 958,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "854:2:4"
                  },
                  "returnParameters": {
                    "id": 962,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 961,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 975,
                        "src": "889:7:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 960,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "889:7:4",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "888:9:4"
                  },
                  "scope": 976,
                  "src": "840:188:4",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 977,
              "src": "417:613:4"
            }
          ],
          "src": "32:999:4"
        },
        "id": 4
      },
      "solc_0.7/diamond/interfaces/IDiamondCut.sol": {
        "ast": {
          "absolutePath": "solc_0.7/diamond/interfaces/IDiamondCut.sol",
          "exportedSymbols": {
            "IDiamondCut": [
              1006
            ]
          },
          "id": 1007,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 978,
              "literals": [
                "solidity",
                "^",
                "0.7",
                ".1"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:23:5"
            },
            {
              "id": 979,
              "literals": [
                "experimental",
                "ABIEncoderV2"
              ],
              "nodeType": "PragmaDirective",
              "src": "56:33:5"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "interface",
              "fullyImplemented": false,
              "id": 1006,
              "linearizedBaseContracts": [
                1006
              ],
              "name": "IDiamondCut",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "canonicalName": "IDiamondCut.Facet",
                  "id": 985,
                  "members": [
                    {
                      "constant": false,
                      "id": 981,
                      "mutability": "mutable",
                      "name": "facetAddress",
                      "nodeType": "VariableDeclaration",
                      "scope": 985,
                      "src": "386:20:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 980,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "386:7:5",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 984,
                      "mutability": "mutable",
                      "name": "functionSelectors",
                      "nodeType": "VariableDeclaration",
                      "scope": 985,
                      "src": "416:26:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_bytes4_$dyn_storage_ptr",
                        "typeString": "bytes4[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 982,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "416:6:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "id": 983,
                        "nodeType": "ArrayTypeName",
                        "src": "416:8:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes4_$dyn_storage_ptr",
                          "typeString": "bytes4[]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "Facet",
                  "nodeType": "StructDefinition",
                  "scope": 1006,
                  "src": "363:86:5",
                  "visibility": "public"
                },
                {
                  "documentation": {
                    "id": 986,
                    "nodeType": "StructuredDocumentation",
                    "src": "455:438:5",
                    "text": "@notice Add/replace/remove any number of functions and optionally execute\n         a function with delegatecall\n @param _diamondCut Contains the facet addresses and function selectors\n @param _init The address of the contract or facet to execute _calldata\n @param _calldata A function call, including function selector and arguments\n                  _calldata is executed with delegatecall on _init"
                  },
                  "functionSelector": "e712b4e1",
                  "id": 996,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "diamondCut",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 994,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 989,
                        "mutability": "mutable",
                        "name": "_diamondCut",
                        "nodeType": "VariableDeclaration",
                        "scope": 996,
                        "src": "927:28:5",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Facet_$985_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "struct IDiamondCut.Facet[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 987,
                            "name": "Facet",
                            "nodeType": "UserDefinedTypeName",
                            "referencedDeclaration": 985,
                            "src": "927:5:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Facet_$985_storage_ptr",
                              "typeString": "struct IDiamondCut.Facet"
                            }
                          },
                          "id": 988,
                          "nodeType": "ArrayTypeName",
                          "src": "927:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Facet_$985_storage_$dyn_storage_ptr",
                            "typeString": "struct IDiamondCut.Facet[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 991,
                        "mutability": "mutable",
                        "name": "_init",
                        "nodeType": "VariableDeclaration",
                        "scope": 996,
                        "src": "965:13:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 990,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "965:7:5",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 993,
                        "mutability": "mutable",
                        "name": "_calldata",
                        "nodeType": "VariableDeclaration",
                        "scope": 996,
                        "src": "988:24:5",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 992,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "988:5:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "917:101:5"
                  },
                  "returnParameters": {
                    "id": 995,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1027:0:5"
                  },
                  "scope": 1006,
                  "src": "898:130:5",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "anonymous": false,
                  "id": 1005,
                  "name": "DiamondCut",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1004,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 999,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "_diamondCut",
                        "nodeType": "VariableDeclaration",
                        "scope": 1005,
                        "src": "1051:19:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Facet_$985_memory_ptr_$dyn_memory_ptr",
                          "typeString": "struct IDiamondCut.Facet[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 997,
                            "name": "Facet",
                            "nodeType": "UserDefinedTypeName",
                            "referencedDeclaration": 985,
                            "src": "1051:5:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Facet_$985_storage_ptr",
                              "typeString": "struct IDiamondCut.Facet"
                            }
                          },
                          "id": 998,
                          "nodeType": "ArrayTypeName",
                          "src": "1051:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Facet_$985_storage_$dyn_storage_ptr",
                            "typeString": "struct IDiamondCut.Facet[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1001,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "_init",
                        "nodeType": "VariableDeclaration",
                        "scope": 1005,
                        "src": "1072:13:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1000,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1072:7:5",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1003,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "_calldata",
                        "nodeType": "VariableDeclaration",
                        "scope": 1005,
                        "src": "1087:15:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1002,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "1087:5:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1050:53:5"
                  },
                  "src": "1034:70:5"
                }
              ],
              "scope": 1007,
              "src": "335:771:5"
            }
          ],
          "src": "32:1075:5"
        },
        "id": 5
      },
      "solc_0.7/diamond/interfaces/IDiamondLoupe.sol": {
        "ast": {
          "absolutePath": "solc_0.7/diamond/interfaces/IDiamondLoupe.sol",
          "exportedSymbols": {
            "IDiamondLoupe": [
              1047
            ]
          },
          "id": 1048,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1008,
              "literals": [
                "solidity",
                "^",
                "0.7",
                ".1"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:23:6"
            },
            {
              "id": 1009,
              "literals": [
                "experimental",
                "ABIEncoderV2"
              ],
              "nodeType": "PragmaDirective",
              "src": "56:33:6"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "interface",
              "fullyImplemented": false,
              "id": 1047,
              "linearizedBaseContracts": [
                1047
              ],
              "name": "IDiamondLoupe",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "canonicalName": "IDiamondLoupe.Facet",
                  "id": 1015,
                  "members": [
                    {
                      "constant": false,
                      "id": 1011,
                      "mutability": "mutable",
                      "name": "facetAddress",
                      "nodeType": "VariableDeclaration",
                      "scope": 1015,
                      "src": "569:20:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1010,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "569:7:6",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1014,
                      "mutability": "mutable",
                      "name": "functionSelectors",
                      "nodeType": "VariableDeclaration",
                      "scope": 1015,
                      "src": "599:26:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_bytes4_$dyn_storage_ptr",
                        "typeString": "bytes4[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 1012,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "599:6:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "id": 1013,
                        "nodeType": "ArrayTypeName",
                        "src": "599:8:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes4_$dyn_storage_ptr",
                          "typeString": "bytes4[]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "Facet",
                  "nodeType": "StructDefinition",
                  "scope": 1047,
                  "src": "546:86:6",
                  "visibility": "public"
                },
                {
                  "documentation": {
                    "id": 1016,
                    "nodeType": "StructuredDocumentation",
                    "src": "638:106:6",
                    "text": "@notice Gets all facet addresses and their four byte function selectors.\n @return facets_ Facet"
                  },
                  "functionSelector": "7a0ed627",
                  "id": 1022,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "facets",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1017,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "764:2:6"
                  },
                  "returnParameters": {
                    "id": 1021,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1020,
                        "mutability": "mutable",
                        "name": "facets_",
                        "nodeType": "VariableDeclaration",
                        "scope": 1022,
                        "src": "790:22:6",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Facet_$1015_memory_ptr_$dyn_memory_ptr",
                          "typeString": "struct IDiamondLoupe.Facet[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1018,
                            "name": "Facet",
                            "nodeType": "UserDefinedTypeName",
                            "referencedDeclaration": 1015,
                            "src": "790:5:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Facet_$1015_storage_ptr",
                              "typeString": "struct IDiamondLoupe.Facet"
                            }
                          },
                          "id": 1019,
                          "nodeType": "ArrayTypeName",
                          "src": "790:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Facet_$1015_storage_$dyn_storage_ptr",
                            "typeString": "struct IDiamondLoupe.Facet[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "789:24:6"
                  },
                  "scope": 1047,
                  "src": "749:65:6",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 1023,
                    "nodeType": "StructuredDocumentation",
                    "src": "820:155:6",
                    "text": "@notice Gets all the function selectors supported by a specific facet.\n @param _facet The facet address.\n @return facetFunctionSelectors_"
                  },
                  "functionSelector": "adfca15e",
                  "id": 1031,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "facetFunctionSelectors",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1026,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1025,
                        "mutability": "mutable",
                        "name": "_facet",
                        "nodeType": "VariableDeclaration",
                        "scope": 1031,
                        "src": "1012:14:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1024,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1012:7:6",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1011:16:6"
                  },
                  "returnParameters": {
                    "id": 1030,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1029,
                        "mutability": "mutable",
                        "name": "facetFunctionSelectors_",
                        "nodeType": "VariableDeclaration",
                        "scope": 1031,
                        "src": "1051:39:6",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes4_$dyn_memory_ptr",
                          "typeString": "bytes4[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1027,
                            "name": "bytes4",
                            "nodeType": "ElementaryTypeName",
                            "src": "1051:6:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "id": 1028,
                          "nodeType": "ArrayTypeName",
                          "src": "1051:8:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_bytes4_$dyn_storage_ptr",
                            "typeString": "bytes4[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1050:41:6"
                  },
                  "scope": 1047,
                  "src": "980:112:6",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 1032,
                    "nodeType": "StructuredDocumentation",
                    "src": "1098:90:6",
                    "text": "@notice Get all the facet addresses used by a diamond.\n @return facetAddresses_"
                  },
                  "functionSelector": "52ef6b2c",
                  "id": 1038,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "facetAddresses",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1033,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1216:2:6"
                  },
                  "returnParameters": {
                    "id": 1037,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1036,
                        "mutability": "mutable",
                        "name": "facetAddresses_",
                        "nodeType": "VariableDeclaration",
                        "scope": 1038,
                        "src": "1242:32:6",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1034,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "1242:7:6",
                            "stateMutability": "nonpayable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 1035,
                          "nodeType": "ArrayTypeName",
                          "src": "1242:9:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                            "typeString": "address[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1241:34:6"
                  },
                  "scope": 1047,
                  "src": "1193:83:6",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 1039,
                    "nodeType": "StructuredDocumentation",
                    "src": "1282:219:6",
                    "text": "@notice Gets the facet that supports the given selector.\n @dev If facet is not found return address(0).\n @param _functionSelector The function selector.\n @return facetAddress_ The facet address."
                  },
                  "functionSelector": "cdffacc6",
                  "id": 1046,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "facetAddress",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1042,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1041,
                        "mutability": "mutable",
                        "name": "_functionSelector",
                        "nodeType": "VariableDeclaration",
                        "scope": 1046,
                        "src": "1528:24:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "typeName": {
                          "id": 1040,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "1528:6:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1527:26:6"
                  },
                  "returnParameters": {
                    "id": 1045,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1044,
                        "mutability": "mutable",
                        "name": "facetAddress_",
                        "nodeType": "VariableDeclaration",
                        "scope": 1046,
                        "src": "1577:21:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1043,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1577:7:6",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1576:23:6"
                  },
                  "scope": 1047,
                  "src": "1506:94:6",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 1048,
              "src": "436:1166:6"
            }
          ],
          "src": "32:1571:6"
        },
        "id": 6
      },
      "solc_0.7/diamond/interfaces/IERC165.sol": {
        "ast": {
          "absolutePath": "solc_0.7/diamond/interfaces/IERC165.sol",
          "exportedSymbols": {
            "IERC165": [
              1059
            ]
          },
          "id": 1060,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1049,
              "literals": [
                "solidity",
                "^",
                "0.7",
                ".1"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:23:7"
            },
            {
              "id": 1050,
              "literals": [
                "experimental",
                "ABIEncoderV2"
              ],
              "nodeType": "PragmaDirective",
              "src": "56:33:7"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "interface",
              "fullyImplemented": false,
              "id": 1059,
              "linearizedBaseContracts": [
                1059
              ],
              "name": "IERC165",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "documentation": {
                    "id": 1051,
                    "nodeType": "StructuredDocumentation",
                    "src": "115:373:7",
                    "text": "@notice Query if a contract implements an interface\n @param interfaceId The interface identifier, as specified in ERC-165\n @dev Interface identification is specified in ERC-165. This function\n  uses less than 30,000 gas.\n @return `true` if the contract implements `interfaceID` and\n  `interfaceID` is not 0xffffffff, `false` otherwise"
                  },
                  "functionSelector": "01ffc9a7",
                  "id": 1058,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "supportsInterface",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1054,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1053,
                        "mutability": "mutable",
                        "name": "interfaceId",
                        "nodeType": "VariableDeclaration",
                        "scope": 1058,
                        "src": "520:18:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "typeName": {
                          "id": 1052,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "520:6:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "519:20:7"
                  },
                  "returnParameters": {
                    "id": 1057,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1056,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1058,
                        "src": "563:4:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 1055,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "563:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "562:6:7"
                  },
                  "scope": 1059,
                  "src": "493:76:7",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 1060,
              "src": "91:480:7"
            }
          ],
          "src": "32:540:7"
        },
        "id": 7
      },
      "solc_0.7/diamond/interfaces/IERC173.sol": {
        "ast": {
          "absolutePath": "solc_0.7/diamond/interfaces/IERC173.sol",
          "exportedSymbols": {
            "IERC173": [
              1083
            ]
          },
          "id": 1084,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1061,
              "literals": [
                "solidity",
                "^",
                "0.7",
                ".1"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:23:8"
            },
            {
              "id": 1062,
              "literals": [
                "experimental",
                "ABIEncoderV2"
              ],
              "nodeType": "PragmaDirective",
              "src": "56:33:8"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 1063,
                "nodeType": "StructuredDocumentation",
                "src": "91:114:8",
                "text": "@title ERC-173 Contract Ownership Standard\n  Note: the ERC-165 identifier for this interface is 0x7f5828d0"
              },
              "fullyImplemented": false,
              "id": 1083,
              "linearizedBaseContracts": [
                1083
              ],
              "name": "IERC173",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 1064,
                    "nodeType": "StructuredDocumentation",
                    "src": "245:57:8",
                    "text": "@dev This emits when ownership of a contract changes."
                  },
                  "id": 1070,
                  "name": "OwnershipTransferred",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1069,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1066,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "previousOwner",
                        "nodeType": "VariableDeclaration",
                        "scope": 1070,
                        "src": "334:29:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1065,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "334:7:8",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1068,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "newOwner",
                        "nodeType": "VariableDeclaration",
                        "scope": 1070,
                        "src": "365:24:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1067,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "365:7:8",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "333:57:8"
                  },
                  "src": "307:84:8"
                },
                {
                  "documentation": {
                    "id": 1071,
                    "nodeType": "StructuredDocumentation",
                    "src": "397:82:8",
                    "text": "@notice Get the address of the owner\n @return The address of the owner."
                  },
                  "functionSelector": "8da5cb5b",
                  "id": 1076,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "owner",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1072,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "498:2:8"
                  },
                  "returnParameters": {
                    "id": 1075,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1074,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1076,
                        "src": "524:7:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1073,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "524:7:8",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "523:9:8"
                  },
                  "scope": 1083,
                  "src": "484:49:8",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 1077,
                    "nodeType": "StructuredDocumentation",
                    "src": "539:198:8",
                    "text": "@notice Set the address of the new owner of the contract\n @dev Set _newOwner to address(0) to renounce any ownership.\n @param _newOwner The address of the new owner of the contract"
                  },
                  "functionSelector": "f2fde38b",
                  "id": 1082,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transferOwnership",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1080,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1079,
                        "mutability": "mutable",
                        "name": "_newOwner",
                        "nodeType": "VariableDeclaration",
                        "scope": 1082,
                        "src": "769:17:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1078,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "769:7:8",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "768:19:8"
                  },
                  "returnParameters": {
                    "id": 1081,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "796:0:8"
                  },
                  "scope": 1083,
                  "src": "742:55:8",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 1084,
              "src": "221:578:8"
            }
          ],
          "src": "32:768:8"
        },
        "id": 8
      },
      "solc_0.7/diamond/libraries/LibDiamondCut.sol": {
        "ast": {
          "absolutePath": "solc_0.7/diamond/libraries/LibDiamondCut.sol",
          "exportedSymbols": {
            "LibDiamondCut": [
              1534
            ]
          },
          "id": 1535,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1085,
              "literals": [
                "solidity",
                "^",
                "0.7",
                ".1"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:23:9"
            },
            {
              "id": 1086,
              "literals": [
                "experimental",
                "ABIEncoderV2"
              ],
              "nodeType": "PragmaDirective",
              "src": "56:33:9"
            },
            {
              "absolutePath": "solc_0.7/diamond/libraries/LibDiamondStorage.sol",
              "file": "./LibDiamondStorage.sol",
              "id": 1087,
              "nodeType": "ImportDirective",
              "scope": 1535,
              "sourceUnit": 1584,
              "src": "387:33:9",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "solc_0.7/diamond/interfaces/IDiamondCut.sol",
              "file": "../interfaces/IDiamondCut.sol",
              "id": 1088,
              "nodeType": "ImportDirective",
              "scope": 1535,
              "sourceUnit": 1007,
              "src": "421:39:9",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "library",
              "fullyImplemented": true,
              "id": 1534,
              "linearizedBaseContracts": [
                1534
              ],
              "name": "LibDiamondCut",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "anonymous": false,
                  "id": 1097,
                  "name": "DiamondCut",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1096,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1091,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "_diamondCut",
                        "nodeType": "VariableDeclaration",
                        "scope": 1097,
                        "src": "507:31:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Facet_$985_memory_ptr_$dyn_memory_ptr",
                          "typeString": "struct IDiamondCut.Facet[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1089,
                            "name": "IDiamondCut.Facet",
                            "nodeType": "UserDefinedTypeName",
                            "referencedDeclaration": 985,
                            "src": "507:17:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Facet_$985_storage_ptr",
                              "typeString": "struct IDiamondCut.Facet"
                            }
                          },
                          "id": 1090,
                          "nodeType": "ArrayTypeName",
                          "src": "507:19:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Facet_$985_storage_$dyn_storage_ptr",
                            "typeString": "struct IDiamondCut.Facet[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1093,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "_init",
                        "nodeType": "VariableDeclaration",
                        "scope": 1097,
                        "src": "540:13:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1092,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "540:7:9",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1095,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "_calldata",
                        "nodeType": "VariableDeclaration",
                        "scope": 1097,
                        "src": "555:15:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1094,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "555:5:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "506:65:9"
                  },
                  "src": "490:82:9"
                },
                {
                  "body": {
                    "id": 1288,
                    "nodeType": "Block",
                    "src": "1036:2200:9",
                    "statements": [
                      {
                        "assignments": [
                          1106
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1106,
                            "mutability": "mutable",
                            "name": "ds",
                            "nodeType": "VariableDeclaration",
                            "scope": 1288,
                            "src": "1046:43:9",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                              "typeString": "struct LibDiamondStorage.DiamondStorage"
                            },
                            "typeName": {
                              "id": 1105,
                              "name": "LibDiamondStorage.DiamondStorage",
                              "nodeType": "UserDefinedTypeName",
                              "referencedDeclaration": 1571,
                              "src": "1046:32:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                "typeString": "struct LibDiamondStorage.DiamondStorage"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1110,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 1107,
                              "name": "LibDiamondStorage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1583,
                              "src": "1092:17:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_LibDiamondStorage_$1583_$",
                                "typeString": "type(library LibDiamondStorage)"
                              }
                            },
                            "id": 1108,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "diamondStorage",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1582,
                            "src": "1092:32:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_DiamondStorage_$1571_storage_ptr_$",
                              "typeString": "function () pure returns (struct LibDiamondStorage.DiamondStorage storage pointer)"
                            }
                          },
                          "id": 1109,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1092:34:9",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                            "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1046:80:9"
                      },
                      {
                        "body": {
                          "id": 1274,
                          "nodeType": "Block",
                          "src": "1208:1958:9",
                          "statements": [
                            {
                              "assignments": [
                                1122
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 1122,
                                  "mutability": "mutable",
                                  "name": "newFacetAddress",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 1274,
                                  "src": "1222:23:9",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  "typeName": {
                                    "id": 1121,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "1222:7:9",
                                    "stateMutability": "nonpayable",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 1127,
                              "initialValue": {
                                "expression": {
                                  "baseExpression": {
                                    "id": 1123,
                                    "name": "_diamondCut",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1100,
                                    "src": "1248:11:9",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_struct$_Facet_$985_memory_ptr_$dyn_memory_ptr",
                                      "typeString": "struct IDiamondCut.Facet memory[] memory"
                                    }
                                  },
                                  "id": 1125,
                                  "indexExpression": {
                                    "id": 1124,
                                    "name": "facetIndex",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1112,
                                    "src": "1260:10:9",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "1248:23:9",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Facet_$985_memory_ptr",
                                    "typeString": "struct IDiamondCut.Facet memory"
                                  }
                                },
                                "id": 1126,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "facetAddress",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 981,
                                "src": "1248:36:9",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "1222:62:9"
                            },
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                "id": 1133,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 1128,
                                  "name": "newFacetAddress",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1122,
                                  "src": "1341:15:9",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "!=",
                                "rightExpression": {
                                  "arguments": [
                                    {
                                      "hexValue": "30",
                                      "id": 1131,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "1368:1:9",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      }
                                    ],
                                    "id": 1130,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "1360:7:9",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 1129,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "1360:7:9",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 1132,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "1360:10:9",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                },
                                "src": "1341:29:9",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": {
                                "id": 1272,
                                "nodeType": "Block",
                                "src": "2864:292:9",
                                "statements": [
                                  {
                                    "body": {
                                      "id": 1270,
                                      "nodeType": "Block",
                                      "src": "3029:113:9",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "baseExpression": {
                                                  "expression": {
                                                    "baseExpression": {
                                                      "id": 1262,
                                                      "name": "_diamondCut",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 1100,
                                                      "src": "3066:11:9",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_array$_t_struct$_Facet_$985_memory_ptr_$dyn_memory_ptr",
                                                        "typeString": "struct IDiamondCut.Facet memory[] memory"
                                                      }
                                                    },
                                                    "id": 1264,
                                                    "indexExpression": {
                                                      "id": 1263,
                                                      "name": "facetIndex",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 1112,
                                                      "src": "3078:10:9",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_uint256",
                                                        "typeString": "uint256"
                                                      }
                                                    },
                                                    "isConstant": false,
                                                    "isLValue": true,
                                                    "isPure": false,
                                                    "lValueRequested": false,
                                                    "nodeType": "IndexAccess",
                                                    "src": "3066:23:9",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_struct$_Facet_$985_memory_ptr",
                                                      "typeString": "struct IDiamondCut.Facet memory"
                                                    }
                                                  },
                                                  "id": 1265,
                                                  "isConstant": false,
                                                  "isLValue": true,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "memberName": "functionSelectors",
                                                  "nodeType": "MemberAccess",
                                                  "referencedDeclaration": 984,
                                                  "src": "3066:41:9",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_array$_t_bytes4_$dyn_memory_ptr",
                                                    "typeString": "bytes4[] memory"
                                                  }
                                                },
                                                "id": 1267,
                                                "indexExpression": {
                                                  "id": 1266,
                                                  "name": "selectorIndex",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 1249,
                                                  "src": "3108:13:9",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "isConstant": false,
                                                "isLValue": true,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "nodeType": "IndexAccess",
                                                "src": "3066:56:9",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_bytes4",
                                                  "typeString": "bytes4"
                                                }
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_bytes4",
                                                  "typeString": "bytes4"
                                                }
                                              ],
                                              "id": 1261,
                                              "name": "removeSelector",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1514,
                                              "src": "3051:14:9",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_function_internal_nonpayable$_t_bytes4_$returns$__$",
                                                "typeString": "function (bytes4)"
                                              }
                                            },
                                            "id": 1268,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "kind": "functionCall",
                                            "lValueRequested": false,
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "3051:72:9",
                                            "tryCall": false,
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_tuple$__$",
                                              "typeString": "tuple()"
                                            }
                                          },
                                          "id": 1269,
                                          "nodeType": "ExpressionStatement",
                                          "src": "3051:72:9"
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 1257,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "id": 1251,
                                        "name": "selectorIndex",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1249,
                                        "src": "2946:13:9",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "<",
                                      "rightExpression": {
                                        "expression": {
                                          "expression": {
                                            "baseExpression": {
                                              "id": 1252,
                                              "name": "_diamondCut",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1100,
                                              "src": "2962:11:9",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_array$_t_struct$_Facet_$985_memory_ptr_$dyn_memory_ptr",
                                                "typeString": "struct IDiamondCut.Facet memory[] memory"
                                              }
                                            },
                                            "id": 1254,
                                            "indexExpression": {
                                              "id": 1253,
                                              "name": "facetIndex",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1112,
                                              "src": "2974:10:9",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "IndexAccess",
                                            "src": "2962:23:9",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_Facet_$985_memory_ptr",
                                              "typeString": "struct IDiamondCut.Facet memory"
                                            }
                                          },
                                          "id": 1255,
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "functionSelectors",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 984,
                                          "src": "2962:41:9",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_array$_t_bytes4_$dyn_memory_ptr",
                                            "typeString": "bytes4[] memory"
                                          }
                                        },
                                        "id": 1256,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "length",
                                        "nodeType": "MemberAccess",
                                        "src": "2962:48:9",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "2946:64:9",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "id": 1271,
                                    "initializationExpression": {
                                      "assignments": [
                                        1249
                                      ],
                                      "declarations": [
                                        {
                                          "constant": false,
                                          "id": 1249,
                                          "mutability": "mutable",
                                          "name": "selectorIndex",
                                          "nodeType": "VariableDeclaration",
                                          "scope": 1271,
                                          "src": "2923:21:9",
                                          "stateVariable": false,
                                          "storageLocation": "default",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "typeName": {
                                            "id": 1248,
                                            "name": "uint256",
                                            "nodeType": "ElementaryTypeName",
                                            "src": "2923:7:9",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "visibility": "internal"
                                        }
                                      ],
                                      "id": 1250,
                                      "nodeType": "VariableDeclarationStatement",
                                      "src": "2923:21:9"
                                    },
                                    "loopExpression": {
                                      "expression": {
                                        "id": 1259,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "UnaryOperation",
                                        "operator": "++",
                                        "prefix": false,
                                        "src": "3012:15:9",
                                        "subExpression": {
                                          "id": 1258,
                                          "name": "selectorIndex",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1249,
                                          "src": "3012:13:9",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "id": 1260,
                                      "nodeType": "ExpressionStatement",
                                      "src": "3012:15:9"
                                    },
                                    "nodeType": "ForStatement",
                                    "src": "2918:224:9"
                                  }
                                ]
                              },
                              "id": 1273,
                              "nodeType": "IfStatement",
                              "src": "1337:1819:9",
                              "trueBody": {
                                "id": 1247,
                                "nodeType": "Block",
                                "src": "1372:1486:9",
                                "statements": [
                                  {
                                    "assignments": [
                                      1135
                                    ],
                                    "declarations": [
                                      {
                                        "constant": false,
                                        "id": 1135,
                                        "mutability": "mutable",
                                        "name": "facetAddressPosition",
                                        "nodeType": "VariableDeclaration",
                                        "scope": 1247,
                                        "src": "1390:28:9",
                                        "stateVariable": false,
                                        "storageLocation": "default",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "typeName": {
                                          "id": 1134,
                                          "name": "uint256",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "1390:7:9",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "visibility": "internal"
                                      }
                                    ],
                                    "id": 1141,
                                    "initialValue": {
                                      "expression": {
                                        "baseExpression": {
                                          "expression": {
                                            "id": 1136,
                                            "name": "ds",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1106,
                                            "src": "1421:2:9",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                              "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                                            }
                                          },
                                          "id": 1137,
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "facetFunctionSelectors",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 1563,
                                          "src": "1421:25:9",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$1553_storage_$",
                                            "typeString": "mapping(address => struct LibDiamondStorage.FacetFunctionSelectors storage ref)"
                                          }
                                        },
                                        "id": 1139,
                                        "indexExpression": {
                                          "id": 1138,
                                          "name": "newFacetAddress",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1122,
                                          "src": "1447:15:9",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "1421:42:9",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_FacetFunctionSelectors_$1553_storage",
                                          "typeString": "struct LibDiamondStorage.FacetFunctionSelectors storage ref"
                                        }
                                      },
                                      "id": 1140,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "facetAddressPosition",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 1552,
                                      "src": "1421:63:9",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint16",
                                        "typeString": "uint16"
                                      }
                                    },
                                    "nodeType": "VariableDeclarationStatement",
                                    "src": "1390:94:9"
                                  },
                                  {
                                    "condition": {
                                      "commonType": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      },
                                      "id": 1153,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 1144,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "id": 1142,
                                          "name": "facetAddressPosition",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1135,
                                          "src": "1568:20:9",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "==",
                                        "rightExpression": {
                                          "hexValue": "30",
                                          "id": 1143,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "number",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "1592:1:9",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_rational_0_by_1",
                                            "typeString": "int_const 0"
                                          },
                                          "value": "0"
                                        },
                                        "src": "1568:25:9",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "&&",
                                      "rightExpression": {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 1152,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "expression": {
                                            "expression": {
                                              "baseExpression": {
                                                "expression": {
                                                  "id": 1145,
                                                  "name": "ds",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 1106,
                                                  "src": "1597:2:9",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                                    "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                                                  }
                                                },
                                                "id": 1146,
                                                "isConstant": false,
                                                "isLValue": true,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "memberName": "facetFunctionSelectors",
                                                "nodeType": "MemberAccess",
                                                "referencedDeclaration": 1563,
                                                "src": "1597:25:9",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$1553_storage_$",
                                                  "typeString": "mapping(address => struct LibDiamondStorage.FacetFunctionSelectors storage ref)"
                                                }
                                              },
                                              "id": 1148,
                                              "indexExpression": {
                                                "id": 1147,
                                                "name": "newFacetAddress",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1122,
                                                "src": "1623:15:9",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_address",
                                                  "typeString": "address"
                                                }
                                              },
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "nodeType": "IndexAccess",
                                              "src": "1597:42:9",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_struct$_FacetFunctionSelectors_$1553_storage",
                                                "typeString": "struct LibDiamondStorage.FacetFunctionSelectors storage ref"
                                              }
                                            },
                                            "id": 1149,
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "functionSelectors",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 1550,
                                            "src": "1597:60:9",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_array$_t_bytes4_$dyn_storage",
                                              "typeString": "bytes4[] storage ref"
                                            }
                                          },
                                          "id": 1150,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "length",
                                          "nodeType": "MemberAccess",
                                          "src": "1597:67:9",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "==",
                                        "rightExpression": {
                                          "hexValue": "30",
                                          "id": 1151,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "number",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "1668:1:9",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_rational_0_by_1",
                                            "typeString": "int_const 0"
                                          },
                                          "value": "0"
                                        },
                                        "src": "1597:72:9",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "src": "1568:101:9",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "id": 1186,
                                    "nodeType": "IfStatement",
                                    "src": "1564:466:9",
                                    "trueBody": {
                                      "id": 1185,
                                      "nodeType": "Block",
                                      "src": "1671:359:9",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "id": 1155,
                                                "name": "newFacetAddress",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1122,
                                                "src": "1709:15:9",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_address",
                                                  "typeString": "address"
                                                }
                                              },
                                              {
                                                "hexValue": "4c69624469616d6f6e644375743a204e657720666163657420686173206e6f20636f6465",
                                                "id": 1156,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": true,
                                                "kind": "string",
                                                "lValueRequested": false,
                                                "nodeType": "Literal",
                                                "src": "1726:38:9",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_stringliteral_846ccbeb9c32d4d40d2c1bf991251db6ab65744a2f52b273947cee088a65504b",
                                                  "typeString": "literal_string \"LibDiamondCut: New facet has no code\""
                                                },
                                                "value": "LibDiamondCut: New facet has no code"
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_address",
                                                  "typeString": "address"
                                                },
                                                {
                                                  "typeIdentifier": "t_stringliteral_846ccbeb9c32d4d40d2c1bf991251db6ab65744a2f52b273947cee088a65504b",
                                                  "typeString": "literal_string \"LibDiamondCut: New facet has no code\""
                                                }
                                              ],
                                              "id": 1154,
                                              "name": "hasContractCode",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1533,
                                              "src": "1693:15:9",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_function_internal_view$_t_address_$_t_string_memory_ptr_$returns$__$",
                                                "typeString": "function (address,string memory) view"
                                              }
                                            },
                                            "id": 1157,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "kind": "functionCall",
                                            "lValueRequested": false,
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "1693:72:9",
                                            "tryCall": false,
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_tuple$__$",
                                              "typeString": "tuple()"
                                            }
                                          },
                                          "id": 1158,
                                          "nodeType": "ExpressionStatement",
                                          "src": "1693:72:9"
                                        },
                                        {
                                          "expression": {
                                            "id": 1163,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftHandSide": {
                                              "id": 1159,
                                              "name": "facetAddressPosition",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1135,
                                              "src": "1787:20:9",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "nodeType": "Assignment",
                                            "operator": "=",
                                            "rightHandSide": {
                                              "expression": {
                                                "expression": {
                                                  "id": 1160,
                                                  "name": "ds",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 1106,
                                                  "src": "1810:2:9",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                                    "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                                                  }
                                                },
                                                "id": 1161,
                                                "isConstant": false,
                                                "isLValue": true,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "memberName": "facetAddresses",
                                                "nodeType": "MemberAccess",
                                                "referencedDeclaration": 1566,
                                                "src": "1810:17:9",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                                  "typeString": "address[] storage ref"
                                                }
                                              },
                                              "id": 1162,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberName": "length",
                                              "nodeType": "MemberAccess",
                                              "src": "1810:24:9",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "src": "1787:47:9",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "id": 1164,
                                          "nodeType": "ExpressionStatement",
                                          "src": "1787:47:9"
                                        },
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "id": 1170,
                                                "name": "newFacetAddress",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1122,
                                                "src": "1879:15:9",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_address",
                                                  "typeString": "address"
                                                }
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_address",
                                                  "typeString": "address"
                                                }
                                              ],
                                              "expression": {
                                                "expression": {
                                                  "id": 1165,
                                                  "name": "ds",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 1106,
                                                  "src": "1856:2:9",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                                    "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                                                  }
                                                },
                                                "id": 1168,
                                                "isConstant": false,
                                                "isLValue": true,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "memberName": "facetAddresses",
                                                "nodeType": "MemberAccess",
                                                "referencedDeclaration": 1566,
                                                "src": "1856:17:9",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                                  "typeString": "address[] storage ref"
                                                }
                                              },
                                              "id": 1169,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberName": "push",
                                              "nodeType": "MemberAccess",
                                              "src": "1856:22:9",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_function_arraypush_nonpayable$_t_address_$returns$__$",
                                                "typeString": "function (address)"
                                              }
                                            },
                                            "id": 1171,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "kind": "functionCall",
                                            "lValueRequested": false,
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "1856:39:9",
                                            "tryCall": false,
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_tuple$__$",
                                              "typeString": "tuple()"
                                            }
                                          },
                                          "id": 1172,
                                          "nodeType": "ExpressionStatement",
                                          "src": "1856:39:9"
                                        },
                                        {
                                          "expression": {
                                            "id": 1183,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftHandSide": {
                                              "expression": {
                                                "baseExpression": {
                                                  "expression": {
                                                    "id": 1173,
                                                    "name": "ds",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 1106,
                                                    "src": "1917:2:9",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                                      "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                                                    }
                                                  },
                                                  "id": 1176,
                                                  "isConstant": false,
                                                  "isLValue": true,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "memberName": "facetFunctionSelectors",
                                                  "nodeType": "MemberAccess",
                                                  "referencedDeclaration": 1563,
                                                  "src": "1917:25:9",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$1553_storage_$",
                                                    "typeString": "mapping(address => struct LibDiamondStorage.FacetFunctionSelectors storage ref)"
                                                  }
                                                },
                                                "id": 1177,
                                                "indexExpression": {
                                                  "id": 1175,
                                                  "name": "newFacetAddress",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 1122,
                                                  "src": "1943:15:9",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_address",
                                                    "typeString": "address"
                                                  }
                                                },
                                                "isConstant": false,
                                                "isLValue": true,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "nodeType": "IndexAccess",
                                                "src": "1917:42:9",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_struct$_FacetFunctionSelectors_$1553_storage",
                                                  "typeString": "struct LibDiamondStorage.FacetFunctionSelectors storage ref"
                                                }
                                              },
                                              "id": 1178,
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": true,
                                              "memberName": "facetAddressPosition",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": 1552,
                                              "src": "1917:63:9",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint16",
                                                "typeString": "uint16"
                                              }
                                            },
                                            "nodeType": "Assignment",
                                            "operator": "=",
                                            "rightHandSide": {
                                              "arguments": [
                                                {
                                                  "id": 1181,
                                                  "name": "facetAddressPosition",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 1135,
                                                  "src": "1990:20:9",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                }
                                              ],
                                              "expression": {
                                                "argumentTypes": [
                                                  {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                ],
                                                "id": 1180,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": true,
                                                "lValueRequested": false,
                                                "nodeType": "ElementaryTypeNameExpression",
                                                "src": "1983:6:9",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_type$_t_uint16_$",
                                                  "typeString": "type(uint16)"
                                                },
                                                "typeName": {
                                                  "id": 1179,
                                                  "name": "uint16",
                                                  "nodeType": "ElementaryTypeName",
                                                  "src": "1983:6:9",
                                                  "typeDescriptions": {}
                                                }
                                              },
                                              "id": 1182,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "kind": "typeConversion",
                                              "lValueRequested": false,
                                              "names": [],
                                              "nodeType": "FunctionCall",
                                              "src": "1983:28:9",
                                              "tryCall": false,
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint16",
                                                "typeString": "uint16"
                                              }
                                            },
                                            "src": "1917:94:9",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint16",
                                              "typeString": "uint16"
                                            }
                                          },
                                          "id": 1184,
                                          "nodeType": "ExpressionStatement",
                                          "src": "1917:94:9"
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "body": {
                                      "id": 1245,
                                      "nodeType": "Block",
                                      "src": "2202:642:9",
                                      "statements": [
                                        {
                                          "assignments": [
                                            1201
                                          ],
                                          "declarations": [
                                            {
                                              "constant": false,
                                              "id": 1201,
                                              "mutability": "mutable",
                                              "name": "selector",
                                              "nodeType": "VariableDeclaration",
                                              "scope": 1245,
                                              "src": "2224:15:9",
                                              "stateVariable": false,
                                              "storageLocation": "default",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bytes4",
                                                "typeString": "bytes4"
                                              },
                                              "typeName": {
                                                "id": 1200,
                                                "name": "bytes4",
                                                "nodeType": "ElementaryTypeName",
                                                "src": "2224:6:9",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_bytes4",
                                                  "typeString": "bytes4"
                                                }
                                              },
                                              "visibility": "internal"
                                            }
                                          ],
                                          "id": 1208,
                                          "initialValue": {
                                            "baseExpression": {
                                              "expression": {
                                                "baseExpression": {
                                                  "id": 1202,
                                                  "name": "_diamondCut",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 1100,
                                                  "src": "2242:11:9",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_array$_t_struct$_Facet_$985_memory_ptr_$dyn_memory_ptr",
                                                    "typeString": "struct IDiamondCut.Facet memory[] memory"
                                                  }
                                                },
                                                "id": 1204,
                                                "indexExpression": {
                                                  "id": 1203,
                                                  "name": "facetIndex",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 1112,
                                                  "src": "2254:10:9",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "isConstant": false,
                                                "isLValue": true,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "nodeType": "IndexAccess",
                                                "src": "2242:23:9",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_struct$_Facet_$985_memory_ptr",
                                                  "typeString": "struct IDiamondCut.Facet memory"
                                                }
                                              },
                                              "id": 1205,
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberName": "functionSelectors",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": 984,
                                              "src": "2242:41:9",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_array$_t_bytes4_$dyn_memory_ptr",
                                                "typeString": "bytes4[] memory"
                                              }
                                            },
                                            "id": 1207,
                                            "indexExpression": {
                                              "id": 1206,
                                              "name": "selectorIndex",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1188,
                                              "src": "2284:13:9",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "IndexAccess",
                                            "src": "2242:56:9",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bytes4",
                                              "typeString": "bytes4"
                                            }
                                          },
                                          "nodeType": "VariableDeclarationStatement",
                                          "src": "2224:74:9"
                                        },
                                        {
                                          "assignments": [
                                            1210
                                          ],
                                          "declarations": [
                                            {
                                              "constant": false,
                                              "id": 1210,
                                              "mutability": "mutable",
                                              "name": "oldFacet",
                                              "nodeType": "VariableDeclaration",
                                              "scope": 1245,
                                              "src": "2320:16:9",
                                              "stateVariable": false,
                                              "storageLocation": "default",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              },
                                              "typeName": {
                                                "id": 1209,
                                                "name": "address",
                                                "nodeType": "ElementaryTypeName",
                                                "src": "2320:7:9",
                                                "stateMutability": "nonpayable",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_address",
                                                  "typeString": "address"
                                                }
                                              },
                                              "visibility": "internal"
                                            }
                                          ],
                                          "id": 1216,
                                          "initialValue": {
                                            "expression": {
                                              "baseExpression": {
                                                "expression": {
                                                  "id": 1211,
                                                  "name": "ds",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 1106,
                                                  "src": "2339:2:9",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                                    "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                                                  }
                                                },
                                                "id": 1212,
                                                "isConstant": false,
                                                "isLValue": true,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "memberName": "selectorToFacetAndPosition",
                                                "nodeType": "MemberAccess",
                                                "referencedDeclaration": 1559,
                                                "src": "2339:29:9",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_mapping$_t_bytes4_$_t_struct$_FacetAddressAndPosition_$1547_storage_$",
                                                  "typeString": "mapping(bytes4 => struct LibDiamondStorage.FacetAddressAndPosition storage ref)"
                                                }
                                              },
                                              "id": 1214,
                                              "indexExpression": {
                                                "id": 1213,
                                                "name": "selector",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1201,
                                                "src": "2369:8:9",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_bytes4",
                                                  "typeString": "bytes4"
                                                }
                                              },
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "nodeType": "IndexAccess",
                                              "src": "2339:39:9",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_struct$_FacetAddressAndPosition_$1547_storage",
                                                "typeString": "struct LibDiamondStorage.FacetAddressAndPosition storage ref"
                                              }
                                            },
                                            "id": 1215,
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "facetAddress",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 1544,
                                            "src": "2339:52:9",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_address",
                                              "typeString": "address"
                                            }
                                          },
                                          "nodeType": "VariableDeclarationStatement",
                                          "src": "2320:71:9"
                                        },
                                        {
                                          "condition": {
                                            "commonType": {
                                              "typeIdentifier": "t_address",
                                              "typeString": "address"
                                            },
                                            "id": 1222,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftExpression": {
                                              "id": 1217,
                                              "name": "oldFacet",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1210,
                                              "src": "2444:8:9",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              }
                                            },
                                            "nodeType": "BinaryOperation",
                                            "operator": "==",
                                            "rightExpression": {
                                              "arguments": [
                                                {
                                                  "hexValue": "30",
                                                  "id": 1220,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": true,
                                                  "kind": "number",
                                                  "lValueRequested": false,
                                                  "nodeType": "Literal",
                                                  "src": "2464:1:9",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_rational_0_by_1",
                                                    "typeString": "int_const 0"
                                                  },
                                                  "value": "0"
                                                }
                                              ],
                                              "expression": {
                                                "argumentTypes": [
                                                  {
                                                    "typeIdentifier": "t_rational_0_by_1",
                                                    "typeString": "int_const 0"
                                                  }
                                                ],
                                                "id": 1219,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": true,
                                                "lValueRequested": false,
                                                "nodeType": "ElementaryTypeNameExpression",
                                                "src": "2456:7:9",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_type$_t_address_$",
                                                  "typeString": "type(address)"
                                                },
                                                "typeName": {
                                                  "id": 1218,
                                                  "name": "address",
                                                  "nodeType": "ElementaryTypeName",
                                                  "src": "2456:7:9",
                                                  "typeDescriptions": {}
                                                }
                                              },
                                              "id": 1221,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "typeConversion",
                                              "lValueRequested": false,
                                              "names": [],
                                              "nodeType": "FunctionCall",
                                              "src": "2456:10:9",
                                              "tryCall": false,
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_address_payable",
                                                "typeString": "address payable"
                                              }
                                            },
                                            "src": "2444:22:9",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bool",
                                              "typeString": "bool"
                                            }
                                          },
                                          "falseBody": {
                                            "id": 1243,
                                            "nodeType": "Block",
                                            "src": "2561:265:9",
                                            "statements": [
                                              {
                                                "condition": {
                                                  "commonType": {
                                                    "typeIdentifier": "t_address",
                                                    "typeString": "address"
                                                  },
                                                  "id": 1231,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "leftExpression": {
                                                    "id": 1229,
                                                    "name": "oldFacet",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 1210,
                                                    "src": "2626:8:9",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_address",
                                                      "typeString": "address"
                                                    }
                                                  },
                                                  "nodeType": "BinaryOperation",
                                                  "operator": "!=",
                                                  "rightExpression": {
                                                    "id": 1230,
                                                    "name": "newFacetAddress",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 1122,
                                                    "src": "2638:15:9",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_address",
                                                      "typeString": "address"
                                                    }
                                                  },
                                                  "src": "2626:27:9",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_bool",
                                                    "typeString": "bool"
                                                  }
                                                },
                                                "id": 1242,
                                                "nodeType": "IfStatement",
                                                "src": "2622:182:9",
                                                "trueBody": {
                                                  "id": 1241,
                                                  "nodeType": "Block",
                                                  "src": "2655:149:9",
                                                  "statements": [
                                                    {
                                                      "expression": {
                                                        "arguments": [
                                                          {
                                                            "id": 1233,
                                                            "name": "selector",
                                                            "nodeType": "Identifier",
                                                            "overloadedDeclarations": [],
                                                            "referencedDeclaration": 1201,
                                                            "src": "2700:8:9",
                                                            "typeDescriptions": {
                                                              "typeIdentifier": "t_bytes4",
                                                              "typeString": "bytes4"
                                                            }
                                                          }
                                                        ],
                                                        "expression": {
                                                          "argumentTypes": [
                                                            {
                                                              "typeIdentifier": "t_bytes4",
                                                              "typeString": "bytes4"
                                                            }
                                                          ],
                                                          "id": 1232,
                                                          "name": "removeSelector",
                                                          "nodeType": "Identifier",
                                                          "overloadedDeclarations": [],
                                                          "referencedDeclaration": 1514,
                                                          "src": "2685:14:9",
                                                          "typeDescriptions": {
                                                            "typeIdentifier": "t_function_internal_nonpayable$_t_bytes4_$returns$__$",
                                                            "typeString": "function (bytes4)"
                                                          }
                                                        },
                                                        "id": 1234,
                                                        "isConstant": false,
                                                        "isLValue": false,
                                                        "isPure": false,
                                                        "kind": "functionCall",
                                                        "lValueRequested": false,
                                                        "names": [],
                                                        "nodeType": "FunctionCall",
                                                        "src": "2685:24:9",
                                                        "tryCall": false,
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_tuple$__$",
                                                          "typeString": "tuple()"
                                                        }
                                                      },
                                                      "id": 1235,
                                                      "nodeType": "ExpressionStatement",
                                                      "src": "2685:24:9"
                                                    },
                                                    {
                                                      "expression": {
                                                        "arguments": [
                                                          {
                                                            "id": 1237,
                                                            "name": "newFacetAddress",
                                                            "nodeType": "Identifier",
                                                            "overloadedDeclarations": [],
                                                            "referencedDeclaration": 1122,
                                                            "src": "2751:15:9",
                                                            "typeDescriptions": {
                                                              "typeIdentifier": "t_address",
                                                              "typeString": "address"
                                                            }
                                                          },
                                                          {
                                                            "id": 1238,
                                                            "name": "selector",
                                                            "nodeType": "Identifier",
                                                            "overloadedDeclarations": [],
                                                            "referencedDeclaration": 1201,
                                                            "src": "2768:8:9",
                                                            "typeDescriptions": {
                                                              "typeIdentifier": "t_bytes4",
                                                              "typeString": "bytes4"
                                                            }
                                                          }
                                                        ],
                                                        "expression": {
                                                          "argumentTypes": [
                                                            {
                                                              "typeIdentifier": "t_address",
                                                              "typeString": "address"
                                                            },
                                                            {
                                                              "typeIdentifier": "t_bytes4",
                                                              "typeString": "bytes4"
                                                            }
                                                          ],
                                                          "id": 1236,
                                                          "name": "addSelector",
                                                          "nodeType": "Identifier",
                                                          "overloadedDeclarations": [],
                                                          "referencedDeclaration": 1345,
                                                          "src": "2739:11:9",
                                                          "typeDescriptions": {
                                                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes4_$returns$__$",
                                                            "typeString": "function (address,bytes4)"
                                                          }
                                                        },
                                                        "id": 1239,
                                                        "isConstant": false,
                                                        "isLValue": false,
                                                        "isPure": false,
                                                        "kind": "functionCall",
                                                        "lValueRequested": false,
                                                        "names": [],
                                                        "nodeType": "FunctionCall",
                                                        "src": "2739:38:9",
                                                        "tryCall": false,
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_tuple$__$",
                                                          "typeString": "tuple()"
                                                        }
                                                      },
                                                      "id": 1240,
                                                      "nodeType": "ExpressionStatement",
                                                      "src": "2739:38:9"
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          },
                                          "id": 1244,
                                          "nodeType": "IfStatement",
                                          "src": "2440:386:9",
                                          "trueBody": {
                                            "id": 1228,
                                            "nodeType": "Block",
                                            "src": "2468:87:9",
                                            "statements": [
                                              {
                                                "expression": {
                                                  "arguments": [
                                                    {
                                                      "id": 1224,
                                                      "name": "newFacetAddress",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 1122,
                                                      "src": "2506:15:9",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_address",
                                                        "typeString": "address"
                                                      }
                                                    },
                                                    {
                                                      "id": 1225,
                                                      "name": "selector",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 1201,
                                                      "src": "2523:8:9",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_bytes4",
                                                        "typeString": "bytes4"
                                                      }
                                                    }
                                                  ],
                                                  "expression": {
                                                    "argumentTypes": [
                                                      {
                                                        "typeIdentifier": "t_address",
                                                        "typeString": "address"
                                                      },
                                                      {
                                                        "typeIdentifier": "t_bytes4",
                                                        "typeString": "bytes4"
                                                      }
                                                    ],
                                                    "id": 1223,
                                                    "name": "addSelector",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 1345,
                                                    "src": "2494:11:9",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes4_$returns$__$",
                                                      "typeString": "function (address,bytes4)"
                                                    }
                                                  },
                                                  "id": 1226,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "kind": "functionCall",
                                                  "lValueRequested": false,
                                                  "names": [],
                                                  "nodeType": "FunctionCall",
                                                  "src": "2494:38:9",
                                                  "tryCall": false,
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_tuple$__$",
                                                    "typeString": "tuple()"
                                                  }
                                                },
                                                "id": 1227,
                                                "nodeType": "ExpressionStatement",
                                                "src": "2494:38:9"
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 1196,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "id": 1190,
                                        "name": "selectorIndex",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1188,
                                        "src": "2119:13:9",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "<",
                                      "rightExpression": {
                                        "expression": {
                                          "expression": {
                                            "baseExpression": {
                                              "id": 1191,
                                              "name": "_diamondCut",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1100,
                                              "src": "2135:11:9",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_array$_t_struct$_Facet_$985_memory_ptr_$dyn_memory_ptr",
                                                "typeString": "struct IDiamondCut.Facet memory[] memory"
                                              }
                                            },
                                            "id": 1193,
                                            "indexExpression": {
                                              "id": 1192,
                                              "name": "facetIndex",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1112,
                                              "src": "2147:10:9",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "IndexAccess",
                                            "src": "2135:23:9",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_Facet_$985_memory_ptr",
                                              "typeString": "struct IDiamondCut.Facet memory"
                                            }
                                          },
                                          "id": 1194,
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "functionSelectors",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 984,
                                          "src": "2135:41:9",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_array$_t_bytes4_$dyn_memory_ptr",
                                            "typeString": "bytes4[] memory"
                                          }
                                        },
                                        "id": 1195,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "length",
                                        "nodeType": "MemberAccess",
                                        "src": "2135:48:9",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "2119:64:9",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "id": 1246,
                                    "initializationExpression": {
                                      "assignments": [
                                        1188
                                      ],
                                      "declarations": [
                                        {
                                          "constant": false,
                                          "id": 1188,
                                          "mutability": "mutable",
                                          "name": "selectorIndex",
                                          "nodeType": "VariableDeclaration",
                                          "scope": 1246,
                                          "src": "2096:21:9",
                                          "stateVariable": false,
                                          "storageLocation": "default",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "typeName": {
                                            "id": 1187,
                                            "name": "uint256",
                                            "nodeType": "ElementaryTypeName",
                                            "src": "2096:7:9",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "visibility": "internal"
                                        }
                                      ],
                                      "id": 1189,
                                      "nodeType": "VariableDeclarationStatement",
                                      "src": "2096:21:9"
                                    },
                                    "loopExpression": {
                                      "expression": {
                                        "id": 1198,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "UnaryOperation",
                                        "operator": "++",
                                        "prefix": false,
                                        "src": "2185:15:9",
                                        "subExpression": {
                                          "id": 1197,
                                          "name": "selectorIndex",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1188,
                                          "src": "2185:13:9",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "id": 1199,
                                      "nodeType": "ExpressionStatement",
                                      "src": "2185:15:9"
                                    },
                                    "nodeType": "ForStatement",
                                    "src": "2091:753:9"
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1117,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1114,
                            "name": "facetIndex",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1112,
                            "src": "1161:10:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "expression": {
                              "id": 1115,
                              "name": "_diamondCut",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1100,
                              "src": "1174:11:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Facet_$985_memory_ptr_$dyn_memory_ptr",
                                "typeString": "struct IDiamondCut.Facet memory[] memory"
                              }
                            },
                            "id": 1116,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "1174:18:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1161:31:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1275,
                        "initializationExpression": {
                          "assignments": [
                            1112
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 1112,
                              "mutability": "mutable",
                              "name": "facetIndex",
                              "nodeType": "VariableDeclaration",
                              "scope": 1275,
                              "src": "1141:18:9",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 1111,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "1141:7:9",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 1113,
                          "nodeType": "VariableDeclarationStatement",
                          "src": "1141:18:9"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 1119,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "1194:12:9",
                            "subExpression": {
                              "id": 1118,
                              "name": "facetIndex",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1112,
                              "src": "1194:10:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1120,
                          "nodeType": "ExpressionStatement",
                          "src": "1194:12:9"
                        },
                        "nodeType": "ForStatement",
                        "src": "1136:2030:9"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 1277,
                              "name": "_diamondCut",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1100,
                              "src": "3191:11:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Facet_$985_memory_ptr_$dyn_memory_ptr",
                                "typeString": "struct IDiamondCut.Facet memory[] memory"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 1280,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3212:1:9",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 1279,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "3204:7:9",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 1278,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "3204:7:9",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 1281,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3204:10:9",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 1284,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3226:1:9",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 1283,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "NewExpression",
                                "src": "3216:9:9",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function (uint256) pure returns (bytes memory)"
                                },
                                "typeName": {
                                  "id": 1282,
                                  "name": "bytes",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "3220:5:9",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_storage_ptr",
                                    "typeString": "bytes"
                                  }
                                }
                              },
                              "id": 1285,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3216:12:9",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_array$_t_struct$_Facet_$985_memory_ptr_$dyn_memory_ptr",
                                "typeString": "struct IDiamondCut.Facet memory[] memory"
                              },
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 1276,
                            "name": "DiamondCut",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1097,
                            "src": "3180:10:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_array$_t_struct$_Facet_$985_memory_ptr_$dyn_memory_ptr_$_t_address_$_t_bytes_memory_ptr_$returns$__$",
                              "typeString": "function (struct IDiamondCut.Facet memory[] memory,address,bytes memory)"
                            }
                          },
                          "id": 1286,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3180:49:9",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1287,
                        "nodeType": "EmitStatement",
                        "src": "3175:54:9"
                      }
                    ]
                  },
                  "id": 1289,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "diamondCut",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1101,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1100,
                        "mutability": "mutable",
                        "name": "_diamondCut",
                        "nodeType": "VariableDeclaration",
                        "scope": 1289,
                        "src": "987:38:9",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Facet_$985_memory_ptr_$dyn_memory_ptr",
                          "typeString": "struct IDiamondCut.Facet[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1098,
                            "name": "IDiamondCut.Facet",
                            "nodeType": "UserDefinedTypeName",
                            "referencedDeclaration": 985,
                            "src": "987:17:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Facet_$985_storage_ptr",
                              "typeString": "struct IDiamondCut.Facet"
                            }
                          },
                          "id": 1099,
                          "nodeType": "ArrayTypeName",
                          "src": "987:19:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Facet_$985_storage_$dyn_storage_ptr",
                            "typeString": "struct IDiamondCut.Facet[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "986:40:9"
                  },
                  "returnParameters": {
                    "id": 1102,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1036:0:9"
                  },
                  "scope": 1534,
                  "src": "967:2269:9",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1344,
                    "nodeType": "Block",
                    "src": "3309:452:9",
                    "statements": [
                      {
                        "assignments": [
                          1299
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1299,
                            "mutability": "mutable",
                            "name": "ds",
                            "nodeType": "VariableDeclaration",
                            "scope": 1344,
                            "src": "3319:43:9",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                              "typeString": "struct LibDiamondStorage.DiamondStorage"
                            },
                            "typeName": {
                              "id": 1298,
                              "name": "LibDiamondStorage.DiamondStorage",
                              "nodeType": "UserDefinedTypeName",
                              "referencedDeclaration": 1571,
                              "src": "3319:32:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                "typeString": "struct LibDiamondStorage.DiamondStorage"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1303,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 1300,
                              "name": "LibDiamondStorage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1583,
                              "src": "3365:17:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_LibDiamondStorage_$1583_$",
                                "typeString": "type(library LibDiamondStorage)"
                              }
                            },
                            "id": 1301,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "diamondStorage",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1582,
                            "src": "3365:32:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_DiamondStorage_$1571_storage_ptr_$",
                              "typeString": "function () pure returns (struct LibDiamondStorage.DiamondStorage storage pointer)"
                            }
                          },
                          "id": 1302,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3365:34:9",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                            "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3319:80:9"
                      },
                      {
                        "assignments": [
                          1305
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1305,
                            "mutability": "mutable",
                            "name": "selectorPosition",
                            "nodeType": "VariableDeclaration",
                            "scope": 1344,
                            "src": "3409:24:9",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1304,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "3409:7:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1312,
                        "initialValue": {
                          "expression": {
                            "expression": {
                              "baseExpression": {
                                "expression": {
                                  "id": 1306,
                                  "name": "ds",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1299,
                                  "src": "3436:2:9",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                    "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                                  }
                                },
                                "id": 1307,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "facetFunctionSelectors",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1563,
                                "src": "3436:25:9",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$1553_storage_$",
                                  "typeString": "mapping(address => struct LibDiamondStorage.FacetFunctionSelectors storage ref)"
                                }
                              },
                              "id": 1309,
                              "indexExpression": {
                                "id": 1308,
                                "name": "_newFacet",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1291,
                                "src": "3462:9:9",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "3436:36:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_FacetFunctionSelectors_$1553_storage",
                                "typeString": "struct LibDiamondStorage.FacetFunctionSelectors storage ref"
                              }
                            },
                            "id": 1310,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "functionSelectors",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1550,
                            "src": "3436:54:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_bytes4_$dyn_storage",
                              "typeString": "bytes4[] storage ref"
                            }
                          },
                          "id": 1311,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "3436:61:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3409:88:9"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1320,
                              "name": "_selector",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1293,
                              "src": "3567:9:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            ],
                            "expression": {
                              "expression": {
                                "baseExpression": {
                                  "expression": {
                                    "id": 1313,
                                    "name": "ds",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1299,
                                    "src": "3507:2:9",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                      "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                                    }
                                  },
                                  "id": 1316,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "facetFunctionSelectors",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1563,
                                  "src": "3507:25:9",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$1553_storage_$",
                                    "typeString": "mapping(address => struct LibDiamondStorage.FacetFunctionSelectors storage ref)"
                                  }
                                },
                                "id": 1317,
                                "indexExpression": {
                                  "id": 1315,
                                  "name": "_newFacet",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1291,
                                  "src": "3533:9:9",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "3507:36:9",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_FacetFunctionSelectors_$1553_storage",
                                  "typeString": "struct LibDiamondStorage.FacetFunctionSelectors storage ref"
                                }
                              },
                              "id": 1318,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "functionSelectors",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1550,
                              "src": "3507:54:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bytes4_$dyn_storage",
                                "typeString": "bytes4[] storage ref"
                              }
                            },
                            "id": 1319,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "push",
                            "nodeType": "MemberAccess",
                            "src": "3507:59:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_bytes4_$returns$__$",
                              "typeString": "function (bytes4)"
                            }
                          },
                          "id": 1321,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3507:70:9",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1322,
                        "nodeType": "ExpressionStatement",
                        "src": "3507:70:9"
                      },
                      {
                        "expression": {
                          "id": 1330,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "expression": {
                                  "id": 1323,
                                  "name": "ds",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1299,
                                  "src": "3587:2:9",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                    "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                                  }
                                },
                                "id": 1326,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "selectorToFacetAndPosition",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1559,
                                "src": "3587:29:9",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_bytes4_$_t_struct$_FacetAddressAndPosition_$1547_storage_$",
                                  "typeString": "mapping(bytes4 => struct LibDiamondStorage.FacetAddressAndPosition storage ref)"
                                }
                              },
                              "id": 1327,
                              "indexExpression": {
                                "id": 1325,
                                "name": "_selector",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1293,
                                "src": "3617:9:9",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "3587:40:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_FacetAddressAndPosition_$1547_storage",
                                "typeString": "struct LibDiamondStorage.FacetAddressAndPosition storage ref"
                              }
                            },
                            "id": 1328,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "facetAddress",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1544,
                            "src": "3587:53:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1329,
                            "name": "_newFacet",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1291,
                            "src": "3643:9:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "3587:65:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 1331,
                        "nodeType": "ExpressionStatement",
                        "src": "3587:65:9"
                      },
                      {
                        "expression": {
                          "id": 1342,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "expression": {
                                  "id": 1332,
                                  "name": "ds",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1299,
                                  "src": "3662:2:9",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                    "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                                  }
                                },
                                "id": 1335,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "selectorToFacetAndPosition",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1559,
                                "src": "3662:29:9",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_bytes4_$_t_struct$_FacetAddressAndPosition_$1547_storage_$",
                                  "typeString": "mapping(bytes4 => struct LibDiamondStorage.FacetAddressAndPosition storage ref)"
                                }
                              },
                              "id": 1336,
                              "indexExpression": {
                                "id": 1334,
                                "name": "_selector",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1293,
                                "src": "3692:9:9",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "3662:40:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_FacetAddressAndPosition_$1547_storage",
                                "typeString": "struct LibDiamondStorage.FacetAddressAndPosition storage ref"
                              }
                            },
                            "id": 1337,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "functionSelectorPosition",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1546,
                            "src": "3662:65:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint16",
                              "typeString": "uint16"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 1340,
                                "name": "selectorPosition",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1305,
                                "src": "3737:16:9",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 1339,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "3730:6:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint16_$",
                                "typeString": "type(uint16)"
                              },
                              "typeName": {
                                "id": 1338,
                                "name": "uint16",
                                "nodeType": "ElementaryTypeName",
                                "src": "3730:6:9",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 1341,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3730:24:9",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint16",
                              "typeString": "uint16"
                            }
                          },
                          "src": "3662:92:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint16",
                            "typeString": "uint16"
                          }
                        },
                        "id": 1343,
                        "nodeType": "ExpressionStatement",
                        "src": "3662:92:9"
                      }
                    ]
                  },
                  "id": 1345,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "addSelector",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1294,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1291,
                        "mutability": "mutable",
                        "name": "_newFacet",
                        "nodeType": "VariableDeclaration",
                        "scope": 1345,
                        "src": "3263:17:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1290,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3263:7:9",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1293,
                        "mutability": "mutable",
                        "name": "_selector",
                        "nodeType": "VariableDeclaration",
                        "scope": 1345,
                        "src": "3282:16:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "typeName": {
                          "id": 1292,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "3282:6:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3262:37:9"
                  },
                  "returnParameters": {
                    "id": 1295,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3309:0:9"
                  },
                  "scope": 1534,
                  "src": "3242:519:9",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1513,
                    "nodeType": "Block",
                    "src": "3818:2019:9",
                    "statements": [
                      {
                        "assignments": [
                          1353
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1353,
                            "mutability": "mutable",
                            "name": "ds",
                            "nodeType": "VariableDeclaration",
                            "scope": 1513,
                            "src": "3828:43:9",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                              "typeString": "struct LibDiamondStorage.DiamondStorage"
                            },
                            "typeName": {
                              "id": 1352,
                              "name": "LibDiamondStorage.DiamondStorage",
                              "nodeType": "UserDefinedTypeName",
                              "referencedDeclaration": 1571,
                              "src": "3828:32:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                "typeString": "struct LibDiamondStorage.DiamondStorage"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1357,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 1354,
                              "name": "LibDiamondStorage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1583,
                              "src": "3874:17:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_LibDiamondStorage_$1583_$",
                                "typeString": "type(library LibDiamondStorage)"
                              }
                            },
                            "id": 1355,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "diamondStorage",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1582,
                            "src": "3874:32:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_DiamondStorage_$1571_storage_ptr_$",
                              "typeString": "function () pure returns (struct LibDiamondStorage.DiamondStorage storage pointer)"
                            }
                          },
                          "id": 1356,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3874:34:9",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                            "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3828:80:9"
                      },
                      {
                        "assignments": [
                          1359
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1359,
                            "mutability": "mutable",
                            "name": "oldFacet",
                            "nodeType": "VariableDeclaration",
                            "scope": 1513,
                            "src": "3918:16:9",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 1358,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "3918:7:9",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1365,
                        "initialValue": {
                          "expression": {
                            "baseExpression": {
                              "expression": {
                                "id": 1360,
                                "name": "ds",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1353,
                                "src": "3937:2:9",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                  "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                                }
                              },
                              "id": 1361,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "selectorToFacetAndPosition",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1559,
                              "src": "3937:29:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes4_$_t_struct$_FacetAddressAndPosition_$1547_storage_$",
                                "typeString": "mapping(bytes4 => struct LibDiamondStorage.FacetAddressAndPosition storage ref)"
                              }
                            },
                            "id": 1363,
                            "indexExpression": {
                              "id": 1362,
                              "name": "_selector",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1347,
                              "src": "3967:9:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "3937:40:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_FacetAddressAndPosition_$1547_storage",
                              "typeString": "struct LibDiamondStorage.FacetAddressAndPosition storage ref"
                            }
                          },
                          "id": 1364,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "facetAddress",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1544,
                          "src": "3937:53:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3918:72:9"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 1371,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1366,
                            "name": "oldFacet",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1359,
                            "src": "4069:8:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 1369,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "4089:1:9",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 1368,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "4081:7:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 1367,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "4081:7:9",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 1370,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4081:10:9",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "src": "4069:22:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1374,
                        "nodeType": "IfStatement",
                        "src": "4065:59:9",
                        "trueBody": {
                          "id": 1373,
                          "nodeType": "Block",
                          "src": "4093:31:9",
                          "statements": [
                            {
                              "functionReturnParameters": 1349,
                              "id": 1372,
                              "nodeType": "Return",
                              "src": "4107:7:9"
                            }
                          ]
                        }
                      },
                      {
                        "assignments": [
                          1376
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1376,
                            "mutability": "mutable",
                            "name": "selectorPosition",
                            "nodeType": "VariableDeclaration",
                            "scope": 1513,
                            "src": "4207:24:9",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1375,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "4207:7:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1382,
                        "initialValue": {
                          "expression": {
                            "baseExpression": {
                              "expression": {
                                "id": 1377,
                                "name": "ds",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1353,
                                "src": "4234:2:9",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                  "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                                }
                              },
                              "id": 1378,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "selectorToFacetAndPosition",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1559,
                              "src": "4234:29:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes4_$_t_struct$_FacetAddressAndPosition_$1547_storage_$",
                                "typeString": "mapping(bytes4 => struct LibDiamondStorage.FacetAddressAndPosition storage ref)"
                              }
                            },
                            "id": 1380,
                            "indexExpression": {
                              "id": 1379,
                              "name": "_selector",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1347,
                              "src": "4264:9:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "4234:40:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_FacetAddressAndPosition_$1547_storage",
                              "typeString": "struct LibDiamondStorage.FacetAddressAndPosition storage ref"
                            }
                          },
                          "id": 1381,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "functionSelectorPosition",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1546,
                          "src": "4234:65:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint16",
                            "typeString": "uint16"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4207:92:9"
                      },
                      {
                        "assignments": [
                          1384
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1384,
                            "mutability": "mutable",
                            "name": "lastSelectorPosition",
                            "nodeType": "VariableDeclaration",
                            "scope": 1513,
                            "src": "4309:28:9",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1383,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "4309:7:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1393,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1392,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "expression": {
                                "baseExpression": {
                                  "expression": {
                                    "id": 1385,
                                    "name": "ds",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1353,
                                    "src": "4340:2:9",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                      "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                                    }
                                  },
                                  "id": 1386,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "facetFunctionSelectors",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1563,
                                  "src": "4340:25:9",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$1553_storage_$",
                                    "typeString": "mapping(address => struct LibDiamondStorage.FacetFunctionSelectors storage ref)"
                                  }
                                },
                                "id": 1388,
                                "indexExpression": {
                                  "id": 1387,
                                  "name": "oldFacet",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1359,
                                  "src": "4366:8:9",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "4340:35:9",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_FacetFunctionSelectors_$1553_storage",
                                  "typeString": "struct LibDiamondStorage.FacetFunctionSelectors storage ref"
                                }
                              },
                              "id": 1389,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "functionSelectors",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1550,
                              "src": "4340:53:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bytes4_$dyn_storage",
                                "typeString": "bytes4[] storage ref"
                              }
                            },
                            "id": 1390,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "4340:60:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "hexValue": "31",
                            "id": 1391,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4403:1:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "src": "4340:64:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4309:95:9"
                      },
                      {
                        "assignments": [
                          1395
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1395,
                            "mutability": "mutable",
                            "name": "lastSelector",
                            "nodeType": "VariableDeclaration",
                            "scope": 1513,
                            "src": "4414:19:9",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            },
                            "typeName": {
                              "id": 1394,
                              "name": "bytes4",
                              "nodeType": "ElementaryTypeName",
                              "src": "4414:6:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1403,
                        "initialValue": {
                          "baseExpression": {
                            "expression": {
                              "baseExpression": {
                                "expression": {
                                  "id": 1396,
                                  "name": "ds",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1353,
                                  "src": "4436:2:9",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                    "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                                  }
                                },
                                "id": 1397,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "facetFunctionSelectors",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1563,
                                "src": "4436:25:9",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$1553_storage_$",
                                  "typeString": "mapping(address => struct LibDiamondStorage.FacetFunctionSelectors storage ref)"
                                }
                              },
                              "id": 1399,
                              "indexExpression": {
                                "id": 1398,
                                "name": "oldFacet",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1359,
                                "src": "4462:8:9",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "4436:35:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_FacetFunctionSelectors_$1553_storage",
                                "typeString": "struct LibDiamondStorage.FacetFunctionSelectors storage ref"
                              }
                            },
                            "id": 1400,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "functionSelectors",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1550,
                            "src": "4436:53:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_bytes4_$dyn_storage",
                              "typeString": "bytes4[] storage ref"
                            }
                          },
                          "id": 1402,
                          "indexExpression": {
                            "id": 1401,
                            "name": "lastSelectorPosition",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1384,
                            "src": "4490:20:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "4436:75:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4414:97:9"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          },
                          "id": 1406,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1404,
                            "name": "lastSelector",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1395,
                            "src": "4593:12:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "id": 1405,
                            "name": "_selector",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1347,
                            "src": "4609:9:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "src": "4593:25:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1431,
                        "nodeType": "IfStatement",
                        "src": "4589:251:9",
                        "trueBody": {
                          "id": 1430,
                          "nodeType": "Block",
                          "src": "4620:220:9",
                          "statements": [
                            {
                              "expression": {
                                "id": 1416,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "expression": {
                                      "baseExpression": {
                                        "expression": {
                                          "id": 1407,
                                          "name": "ds",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1353,
                                          "src": "4634:2:9",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                            "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                                          }
                                        },
                                        "id": 1410,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "facetFunctionSelectors",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 1563,
                                        "src": "4634:25:9",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$1553_storage_$",
                                          "typeString": "mapping(address => struct LibDiamondStorage.FacetFunctionSelectors storage ref)"
                                        }
                                      },
                                      "id": 1411,
                                      "indexExpression": {
                                        "id": 1409,
                                        "name": "oldFacet",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1359,
                                        "src": "4660:8:9",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "4634:35:9",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_FacetFunctionSelectors_$1553_storage",
                                        "typeString": "struct LibDiamondStorage.FacetFunctionSelectors storage ref"
                                      }
                                    },
                                    "id": 1412,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "functionSelectors",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1550,
                                    "src": "4634:53:9",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_bytes4_$dyn_storage",
                                      "typeString": "bytes4[] storage ref"
                                    }
                                  },
                                  "id": 1414,
                                  "indexExpression": {
                                    "id": 1413,
                                    "name": "selectorPosition",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1376,
                                    "src": "4688:16:9",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "4634:71:9",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "id": 1415,
                                  "name": "lastSelector",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1395,
                                  "src": "4708:12:9",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  }
                                },
                                "src": "4634:86:9",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              "id": 1417,
                              "nodeType": "ExpressionStatement",
                              "src": "4634:86:9"
                            },
                            {
                              "expression": {
                                "id": 1428,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "expression": {
                                    "baseExpression": {
                                      "expression": {
                                        "id": 1418,
                                        "name": "ds",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1353,
                                        "src": "4734:2:9",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                          "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                                        }
                                      },
                                      "id": 1421,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "selectorToFacetAndPosition",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 1559,
                                      "src": "4734:29:9",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_bytes4_$_t_struct$_FacetAddressAndPosition_$1547_storage_$",
                                        "typeString": "mapping(bytes4 => struct LibDiamondStorage.FacetAddressAndPosition storage ref)"
                                      }
                                    },
                                    "id": 1422,
                                    "indexExpression": {
                                      "id": 1420,
                                      "name": "lastSelector",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1395,
                                      "src": "4764:12:9",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes4",
                                        "typeString": "bytes4"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "4734:43:9",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_FacetAddressAndPosition_$1547_storage",
                                      "typeString": "struct LibDiamondStorage.FacetAddressAndPosition storage ref"
                                    }
                                  },
                                  "id": 1423,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "memberName": "functionSelectorPosition",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1546,
                                  "src": "4734:68:9",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint16",
                                    "typeString": "uint16"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "id": 1426,
                                      "name": "selectorPosition",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1376,
                                      "src": "4812:16:9",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "id": 1425,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "4805:6:9",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_uint16_$",
                                      "typeString": "type(uint16)"
                                    },
                                    "typeName": {
                                      "id": 1424,
                                      "name": "uint16",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "4805:6:9",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 1427,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "4805:24:9",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint16",
                                    "typeString": "uint16"
                                  }
                                },
                                "src": "4734:95:9",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint16",
                                  "typeString": "uint16"
                                }
                              },
                              "id": 1429,
                              "nodeType": "ExpressionStatement",
                              "src": "4734:95:9"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "expression": {
                                "baseExpression": {
                                  "expression": {
                                    "id": 1432,
                                    "name": "ds",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1353,
                                    "src": "4885:2:9",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                      "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                                    }
                                  },
                                  "id": 1435,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "facetFunctionSelectors",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1563,
                                  "src": "4885:25:9",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$1553_storage_$",
                                    "typeString": "mapping(address => struct LibDiamondStorage.FacetFunctionSelectors storage ref)"
                                  }
                                },
                                "id": 1436,
                                "indexExpression": {
                                  "id": 1434,
                                  "name": "oldFacet",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1359,
                                  "src": "4911:8:9",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "4885:35:9",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_FacetFunctionSelectors_$1553_storage",
                                  "typeString": "struct LibDiamondStorage.FacetFunctionSelectors storage ref"
                                }
                              },
                              "id": 1437,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "functionSelectors",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1550,
                              "src": "4885:53:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bytes4_$dyn_storage",
                                "typeString": "bytes4[] storage ref"
                              }
                            },
                            "id": 1438,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pop",
                            "nodeType": "MemberAccess",
                            "src": "4885:57:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypop_nonpayable$__$returns$__$",
                              "typeString": "function ()"
                            }
                          },
                          "id": 1439,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4885:59:9",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1440,
                        "nodeType": "ExpressionStatement",
                        "src": "4885:59:9"
                      },
                      {
                        "expression": {
                          "id": 1445,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "delete",
                          "prefix": true,
                          "src": "4954:47:9",
                          "subExpression": {
                            "baseExpression": {
                              "expression": {
                                "id": 1441,
                                "name": "ds",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1353,
                                "src": "4961:2:9",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                  "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                                }
                              },
                              "id": 1442,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "selectorToFacetAndPosition",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1559,
                              "src": "4961:29:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes4_$_t_struct$_FacetAddressAndPosition_$1547_storage_$",
                                "typeString": "mapping(bytes4 => struct LibDiamondStorage.FacetAddressAndPosition storage ref)"
                              }
                            },
                            "id": 1444,
                            "indexExpression": {
                              "id": 1443,
                              "name": "_selector",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1347,
                              "src": "4991:9:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "4961:40:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_FacetAddressAndPosition_$1547_storage",
                              "typeString": "struct LibDiamondStorage.FacetAddressAndPosition storage ref"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1446,
                        "nodeType": "ExpressionStatement",
                        "src": "4954:47:9"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1449,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1447,
                            "name": "lastSelectorPosition",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1384,
                            "src": "5096:20:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 1448,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5120:1:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "5096:25:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1512,
                        "nodeType": "IfStatement",
                        "src": "5092:739:9",
                        "trueBody": {
                          "id": 1511,
                          "nodeType": "Block",
                          "src": "5123:708:9",
                          "statements": [
                            {
                              "assignments": [
                                1451
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 1451,
                                  "mutability": "mutable",
                                  "name": "lastFacetAddressPosition",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 1511,
                                  "src": "5228:32:9",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 1450,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "5228:7:9",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 1457,
                              "initialValue": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1456,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "expression": {
                                      "id": 1452,
                                      "name": "ds",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1353,
                                      "src": "5263:2:9",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                        "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                                      }
                                    },
                                    "id": 1453,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "facetAddresses",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1566,
                                    "src": "5263:17:9",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                      "typeString": "address[] storage ref"
                                    }
                                  },
                                  "id": 1454,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "length",
                                  "nodeType": "MemberAccess",
                                  "src": "5263:24:9",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "hexValue": "31",
                                  "id": 1455,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "5290:1:9",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "src": "5263:28:9",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "5228:63:9"
                            },
                            {
                              "assignments": [
                                1459
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 1459,
                                  "mutability": "mutable",
                                  "name": "lastFacetAddress",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 1511,
                                  "src": "5305:24:9",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  "typeName": {
                                    "id": 1458,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "5305:7:9",
                                    "stateMutability": "nonpayable",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 1464,
                              "initialValue": {
                                "baseExpression": {
                                  "expression": {
                                    "id": 1460,
                                    "name": "ds",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1353,
                                    "src": "5332:2:9",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                      "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                                    }
                                  },
                                  "id": 1461,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "facetAddresses",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1566,
                                  "src": "5332:17:9",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                    "typeString": "address[] storage ref"
                                  }
                                },
                                "id": 1463,
                                "indexExpression": {
                                  "id": 1462,
                                  "name": "lastFacetAddressPosition",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1451,
                                  "src": "5350:24:9",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "5332:43:9",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "5305:70:9"
                            },
                            {
                              "assignments": [
                                1466
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 1466,
                                  "mutability": "mutable",
                                  "name": "facetAddressPosition",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 1511,
                                  "src": "5389:28:9",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 1465,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "5389:7:9",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 1472,
                              "initialValue": {
                                "expression": {
                                  "baseExpression": {
                                    "expression": {
                                      "id": 1467,
                                      "name": "ds",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1353,
                                      "src": "5420:2:9",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                        "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                                      }
                                    },
                                    "id": 1468,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "facetFunctionSelectors",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1563,
                                    "src": "5420:25:9",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$1553_storage_$",
                                      "typeString": "mapping(address => struct LibDiamondStorage.FacetFunctionSelectors storage ref)"
                                    }
                                  },
                                  "id": 1470,
                                  "indexExpression": {
                                    "id": 1469,
                                    "name": "oldFacet",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1359,
                                    "src": "5446:8:9",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "5420:35:9",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_FacetFunctionSelectors_$1553_storage",
                                    "typeString": "struct LibDiamondStorage.FacetFunctionSelectors storage ref"
                                  }
                                },
                                "id": 1471,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "facetAddressPosition",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1552,
                                "src": "5420:56:9",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint16",
                                  "typeString": "uint16"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "5389:87:9"
                            },
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                "id": 1475,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 1473,
                                  "name": "oldFacet",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1359,
                                  "src": "5494:8:9",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "!=",
                                "rightExpression": {
                                  "id": 1474,
                                  "name": "lastFacetAddress",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1459,
                                  "src": "5506:16:9",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "src": "5494:28:9",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 1497,
                              "nodeType": "IfStatement",
                              "src": "5490:238:9",
                              "trueBody": {
                                "id": 1496,
                                "nodeType": "Block",
                                "src": "5524:204:9",
                                "statements": [
                                  {
                                    "expression": {
                                      "id": 1482,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "baseExpression": {
                                          "expression": {
                                            "id": 1476,
                                            "name": "ds",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1353,
                                            "src": "5542:2:9",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                              "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                                            }
                                          },
                                          "id": 1479,
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "facetAddresses",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 1566,
                                          "src": "5542:17:9",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                            "typeString": "address[] storage ref"
                                          }
                                        },
                                        "id": 1480,
                                        "indexExpression": {
                                          "id": 1478,
                                          "name": "facetAddressPosition",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1466,
                                          "src": "5560:20:9",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": true,
                                        "nodeType": "IndexAccess",
                                        "src": "5542:39:9",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "id": 1481,
                                        "name": "lastFacetAddress",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1459,
                                        "src": "5584:16:9",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      "src": "5542:58:9",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    "id": 1483,
                                    "nodeType": "ExpressionStatement",
                                    "src": "5542:58:9"
                                  },
                                  {
                                    "expression": {
                                      "id": 1494,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "expression": {
                                          "baseExpression": {
                                            "expression": {
                                              "id": 1484,
                                              "name": "ds",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1353,
                                              "src": "5618:2:9",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                                "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                                              }
                                            },
                                            "id": 1487,
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "facetFunctionSelectors",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 1563,
                                            "src": "5618:25:9",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$1553_storage_$",
                                              "typeString": "mapping(address => struct LibDiamondStorage.FacetFunctionSelectors storage ref)"
                                            }
                                          },
                                          "id": 1488,
                                          "indexExpression": {
                                            "id": 1486,
                                            "name": "lastFacetAddress",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1459,
                                            "src": "5644:16:9",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_address",
                                              "typeString": "address"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "5618:43:9",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_FacetFunctionSelectors_$1553_storage",
                                            "typeString": "struct LibDiamondStorage.FacetFunctionSelectors storage ref"
                                          }
                                        },
                                        "id": 1489,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": true,
                                        "memberName": "facetAddressPosition",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 1552,
                                        "src": "5618:64:9",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint16",
                                          "typeString": "uint16"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "arguments": [
                                          {
                                            "id": 1492,
                                            "name": "facetAddressPosition",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1466,
                                            "src": "5692:20:9",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          ],
                                          "id": 1491,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "lValueRequested": false,
                                          "nodeType": "ElementaryTypeNameExpression",
                                          "src": "5685:6:9",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_uint16_$",
                                            "typeString": "type(uint16)"
                                          },
                                          "typeName": {
                                            "id": 1490,
                                            "name": "uint16",
                                            "nodeType": "ElementaryTypeName",
                                            "src": "5685:6:9",
                                            "typeDescriptions": {}
                                          }
                                        },
                                        "id": 1493,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "typeConversion",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "5685:28:9",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint16",
                                          "typeString": "uint16"
                                        }
                                      },
                                      "src": "5618:95:9",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint16",
                                        "typeString": "uint16"
                                      }
                                    },
                                    "id": 1495,
                                    "nodeType": "ExpressionStatement",
                                    "src": "5618:95:9"
                                  }
                                ]
                              }
                            },
                            {
                              "expression": {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "expression": {
                                    "expression": {
                                      "id": 1498,
                                      "name": "ds",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1353,
                                      "src": "5741:2:9",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                        "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                                      }
                                    },
                                    "id": 1501,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "facetAddresses",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1566,
                                    "src": "5741:17:9",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                      "typeString": "address[] storage ref"
                                    }
                                  },
                                  "id": 1502,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "pop",
                                  "nodeType": "MemberAccess",
                                  "src": "5741:21:9",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_arraypop_nonpayable$__$returns$__$",
                                    "typeString": "function ()"
                                  }
                                },
                                "id": 1503,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5741:23:9",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 1504,
                              "nodeType": "ExpressionStatement",
                              "src": "5741:23:9"
                            },
                            {
                              "expression": {
                                "id": 1509,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "UnaryOperation",
                                "operator": "delete",
                                "prefix": true,
                                "src": "5778:42:9",
                                "subExpression": {
                                  "baseExpression": {
                                    "expression": {
                                      "id": 1505,
                                      "name": "ds",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1353,
                                      "src": "5785:2:9",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                                        "typeString": "struct LibDiamondStorage.DiamondStorage storage pointer"
                                      }
                                    },
                                    "id": 1506,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "facetFunctionSelectors",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1563,
                                    "src": "5785:25:9",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$1553_storage_$",
                                      "typeString": "mapping(address => struct LibDiamondStorage.FacetFunctionSelectors storage ref)"
                                    }
                                  },
                                  "id": 1508,
                                  "indexExpression": {
                                    "id": 1507,
                                    "name": "oldFacet",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1359,
                                    "src": "5811:8:9",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "5785:35:9",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_FacetFunctionSelectors_$1553_storage",
                                    "typeString": "struct LibDiamondStorage.FacetFunctionSelectors storage ref"
                                  }
                                },
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 1510,
                              "nodeType": "ExpressionStatement",
                              "src": "5778:42:9"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "id": 1514,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "removeSelector",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1348,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1347,
                        "mutability": "mutable",
                        "name": "_selector",
                        "nodeType": "VariableDeclaration",
                        "scope": 1514,
                        "src": "3791:16:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "typeName": {
                          "id": 1346,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "3791:6:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3790:18:9"
                  },
                  "returnParameters": {
                    "id": 1349,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3818:0:9"
                  },
                  "scope": 1534,
                  "src": "3767:2070:9",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1532,
                    "nodeType": "Block",
                    "src": "5930:167:9",
                    "statements": [
                      {
                        "assignments": [
                          1522
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1522,
                            "mutability": "mutable",
                            "name": "contractSize",
                            "nodeType": "VariableDeclaration",
                            "scope": 1532,
                            "src": "5940:20:9",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1521,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "5940:7:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1523,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5940:20:9"
                      },
                      {
                        "AST": {
                          "nodeType": "YulBlock",
                          "src": "5979:62:9",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "5993:38:9",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "_contract",
                                    "nodeType": "YulIdentifier",
                                    "src": "6021:9:9"
                                  }
                                ],
                                "functionName": {
                                  "name": "extcodesize",
                                  "nodeType": "YulIdentifier",
                                  "src": "6009:11:9"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6009:22:9"
                              },
                              "variableNames": [
                                {
                                  "name": "contractSize",
                                  "nodeType": "YulIdentifier",
                                  "src": "5993:12:9"
                                }
                              ]
                            }
                          ]
                        },
                        "evmVersion": "istanbul",
                        "externalReferences": [
                          {
                            "declaration": 1516,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "6021:9:9",
                            "valueSize": 1
                          },
                          {
                            "declaration": 1522,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "5993:12:9",
                            "valueSize": 1
                          }
                        ],
                        "id": 1524,
                        "nodeType": "InlineAssembly",
                        "src": "5970:71:9"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1528,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1526,
                                "name": "contractSize",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1522,
                                "src": "6058:12:9",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "hexValue": "30",
                                "id": 1527,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "6073:1:9",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "6058:16:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "id": 1529,
                              "name": "_errorMessage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1518,
                              "src": "6076:13:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "id": 1525,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "6050:7:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1530,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6050:40:9",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1531,
                        "nodeType": "ExpressionStatement",
                        "src": "6050:40:9"
                      }
                    ]
                  },
                  "id": 1533,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "hasContractCode",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1519,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1516,
                        "mutability": "mutable",
                        "name": "_contract",
                        "nodeType": "VariableDeclaration",
                        "scope": 1533,
                        "src": "5868:17:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1515,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5868:7:9",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1518,
                        "mutability": "mutable",
                        "name": "_errorMessage",
                        "nodeType": "VariableDeclaration",
                        "scope": 1533,
                        "src": "5887:27:9",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 1517,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "5887:6:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5867:48:9"
                  },
                  "returnParameters": {
                    "id": 1520,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5930:0:9"
                  },
                  "scope": 1534,
                  "src": "5843:254:9",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 1535,
              "src": "462:5637:9"
            }
          ],
          "src": "32:6068:9"
        },
        "id": 9
      },
      "solc_0.7/diamond/libraries/LibDiamondStorage.sol": {
        "ast": {
          "absolutePath": "solc_0.7/diamond/libraries/LibDiamondStorage.sol",
          "exportedSymbols": {
            "LibDiamondStorage": [
              1583
            ]
          },
          "id": 1584,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1536,
              "literals": [
                "solidity",
                "^",
                "0.7",
                ".1"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:23:10"
            },
            {
              "id": 1537,
              "literals": [
                "experimental",
                "ABIEncoderV2"
              ],
              "nodeType": "PragmaDirective",
              "src": "56:33:10"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "library",
              "fullyImplemented": true,
              "id": 1583,
              "linearizedBaseContracts": [
                1583
              ],
              "name": "LibDiamondStorage",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": true,
                  "id": 1542,
                  "mutability": "constant",
                  "name": "DIAMOND_STORAGE_POSITION",
                  "nodeType": "VariableDeclaration",
                  "scope": 1583,
                  "src": "367:89:10",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1538,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "367:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": {
                    "arguments": [
                      {
                        "hexValue": "6469616d6f6e642e7374616e646172642e6469616d6f6e642e73746f72616765",
                        "id": 1540,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "421:34:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c",
                          "typeString": "literal_string \"diamond.standard.diamond.storage\""
                        },
                        "value": "diamond.standard.diamond.storage"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_c8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c",
                          "typeString": "literal_string \"diamond.standard.diamond.storage\""
                        }
                      ],
                      "id": 1539,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -8,
                      "src": "411:9:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 1541,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "411:45:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "canonicalName": "LibDiamondStorage.FacetAddressAndPosition",
                  "id": 1547,
                  "members": [
                    {
                      "constant": false,
                      "id": 1544,
                      "mutability": "mutable",
                      "name": "facetAddress",
                      "nodeType": "VariableDeclaration",
                      "scope": 1547,
                      "src": "504:20:10",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1543,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "504:7:10",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1546,
                      "mutability": "mutable",
                      "name": "functionSelectorPosition",
                      "nodeType": "VariableDeclaration",
                      "scope": 1547,
                      "src": "534:31:10",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint16",
                        "typeString": "uint16"
                      },
                      "typeName": {
                        "id": 1545,
                        "name": "uint16",
                        "nodeType": "ElementaryTypeName",
                        "src": "534:6:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint16",
                          "typeString": "uint16"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "FacetAddressAndPosition",
                  "nodeType": "StructDefinition",
                  "scope": 1583,
                  "src": "463:171:10",
                  "visibility": "public"
                },
                {
                  "canonicalName": "LibDiamondStorage.FacetFunctionSelectors",
                  "id": 1553,
                  "members": [
                    {
                      "constant": false,
                      "id": 1550,
                      "mutability": "mutable",
                      "name": "functionSelectors",
                      "nodeType": "VariableDeclaration",
                      "scope": 1553,
                      "src": "680:26:10",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_bytes4_$dyn_storage_ptr",
                        "typeString": "bytes4[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 1548,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "680:6:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "id": 1549,
                        "nodeType": "ArrayTypeName",
                        "src": "680:8:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes4_$dyn_storage_ptr",
                          "typeString": "bytes4[]"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1552,
                      "mutability": "mutable",
                      "name": "facetAddressPosition",
                      "nodeType": "VariableDeclaration",
                      "scope": 1553,
                      "src": "716:27:10",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint16",
                        "typeString": "uint16"
                      },
                      "typeName": {
                        "id": 1551,
                        "name": "uint16",
                        "nodeType": "ElementaryTypeName",
                        "src": "716:6:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint16",
                          "typeString": "uint16"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "FacetFunctionSelectors",
                  "nodeType": "StructDefinition",
                  "scope": 1583,
                  "src": "640:162:10",
                  "visibility": "public"
                },
                {
                  "canonicalName": "LibDiamondStorage.DiamondStorage",
                  "id": 1571,
                  "members": [
                    {
                      "constant": false,
                      "id": 1555,
                      "mutability": "mutable",
                      "name": "contractOwner",
                      "nodeType": "VariableDeclaration",
                      "scope": 1571,
                      "src": "873:21:10",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1554,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "873:7:10",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1559,
                      "mutability": "mutable",
                      "name": "selectorToFacetAndPosition",
                      "nodeType": "VariableDeclaration",
                      "scope": 1571,
                      "src": "1057:69:10",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes4_$_t_struct$_FacetAddressAndPosition_$1547_storage_$",
                        "typeString": "mapping(bytes4 => struct LibDiamondStorage.FacetAddressAndPosition)"
                      },
                      "typeName": {
                        "id": 1558,
                        "keyType": {
                          "id": 1556,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "1065:6:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "nodeType": "Mapping",
                        "src": "1057:42:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes4_$_t_struct$_FacetAddressAndPosition_$1547_storage_$",
                          "typeString": "mapping(bytes4 => struct LibDiamondStorage.FacetAddressAndPosition)"
                        },
                        "valueType": {
                          "id": 1557,
                          "name": "FacetAddressAndPosition",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1547,
                          "src": "1075:23:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_FacetAddressAndPosition_$1547_storage_ptr",
                            "typeString": "struct LibDiamondStorage.FacetAddressAndPosition"
                          }
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1563,
                      "mutability": "mutable",
                      "name": "facetFunctionSelectors",
                      "nodeType": "VariableDeclaration",
                      "scope": 1571,
                      "src": "1190:65:10",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$1553_storage_$",
                        "typeString": "mapping(address => struct LibDiamondStorage.FacetFunctionSelectors)"
                      },
                      "typeName": {
                        "id": 1562,
                        "keyType": {
                          "id": 1560,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1198:7:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Mapping",
                        "src": "1190:42:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$1553_storage_$",
                          "typeString": "mapping(address => struct LibDiamondStorage.FacetFunctionSelectors)"
                        },
                        "valueType": {
                          "id": 1561,
                          "name": "FacetFunctionSelectors",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1553,
                          "src": "1209:22:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_FacetFunctionSelectors_$1553_storage_ptr",
                            "typeString": "struct LibDiamondStorage.FacetFunctionSelectors"
                          }
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1566,
                      "mutability": "mutable",
                      "name": "facetAddresses",
                      "nodeType": "VariableDeclaration",
                      "scope": 1571,
                      "src": "1292:24:10",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                        "typeString": "address[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 1564,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1292:7:10",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 1565,
                        "nodeType": "ArrayTypeName",
                        "src": "1292:9:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                          "typeString": "address[]"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1570,
                      "mutability": "mutable",
                      "name": "supportedInterfaces",
                      "nodeType": "VariableDeclaration",
                      "scope": 1571,
                      "src": "1428:43:10",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes4_$_t_bool_$",
                        "typeString": "mapping(bytes4 => bool)"
                      },
                      "typeName": {
                        "id": 1569,
                        "keyType": {
                          "id": 1567,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "1436:6:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "nodeType": "Mapping",
                        "src": "1428:23:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes4_$_t_bool_$",
                          "typeString": "mapping(bytes4 => bool)"
                        },
                        "valueType": {
                          "id": 1568,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1446:4:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "DiamondStorage",
                  "nodeType": "StructDefinition",
                  "scope": 1583,
                  "src": "808:670:10",
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1581,
                    "nodeType": "Block",
                    "src": "1560:121:10",
                    "statements": [
                      {
                        "assignments": [
                          1577
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1577,
                            "mutability": "mutable",
                            "name": "position",
                            "nodeType": "VariableDeclaration",
                            "scope": 1581,
                            "src": "1570:16:10",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            "typeName": {
                              "id": 1576,
                              "name": "bytes32",
                              "nodeType": "ElementaryTypeName",
                              "src": "1570:7:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1579,
                        "initialValue": {
                          "id": 1578,
                          "name": "DIAMOND_STORAGE_POSITION",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1542,
                          "src": "1589:24:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1570:43:10"
                      },
                      {
                        "AST": {
                          "nodeType": "YulBlock",
                          "src": "1632:43:10",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "1646:19:10",
                              "value": {
                                "name": "position",
                                "nodeType": "YulIdentifier",
                                "src": "1657:8:10"
                              },
                              "variableNames": [
                                {
                                  "name": "ds.slot",
                                  "nodeType": "YulIdentifier",
                                  "src": "1646:7:10"
                                }
                              ]
                            }
                          ]
                        },
                        "evmVersion": "istanbul",
                        "externalReferences": [
                          {
                            "declaration": 1574,
                            "isOffset": false,
                            "isSlot": true,
                            "src": "1646:7:10",
                            "valueSize": 1
                          },
                          {
                            "declaration": 1577,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "1657:8:10",
                            "valueSize": 1
                          }
                        ],
                        "id": 1580,
                        "nodeType": "InlineAssembly",
                        "src": "1623:52:10"
                      }
                    ]
                  },
                  "id": 1582,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "diamondStorage",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1572,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1507:2:10"
                  },
                  "returnParameters": {
                    "id": 1575,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1574,
                        "mutability": "mutable",
                        "name": "ds",
                        "nodeType": "VariableDeclaration",
                        "scope": 1582,
                        "src": "1533:25:10",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                          "typeString": "struct LibDiamondStorage.DiamondStorage"
                        },
                        "typeName": {
                          "id": 1573,
                          "name": "DiamondStorage",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1571,
                          "src": "1533:14:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_DiamondStorage_$1571_storage_ptr",
                            "typeString": "struct LibDiamondStorage.DiamondStorage"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1532:27:10"
                  },
                  "scope": 1583,
                  "src": "1484:197:10",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 1584,
              "src": "335:1348:10"
            }
          ],
          "src": "32:1652:10"
        },
        "id": 10
      }
    }
  }
}
