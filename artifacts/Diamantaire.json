{
  "contractName": "Diamantaire",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IDiamond",
          "name": "diamond",
          "type": "address"
        }
      ],
      "name": "DiamondCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes[]",
          "name": "_diamondCut",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "createDiamond",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "bytecode": "",
  "deployedBytecode": "0x608060405260043610620000205760003560e01c8063761bdc6a1462000025575b600080fd5b6200003c620000363660046200022f565b6200003e565b005b600034306040516200005090620001d7565b6200005c91906200035f565b6040518091039082f09050801580156200007a573d6000803e3d6000fd5b5090507f644ca5b0a8b0418e9faf3880659eeb84eaad45ad838b0173808e5ca72f5efc4981604051620000ae91906200035f565b60405180910390a16040517f7c696fea00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821690637c696fea906200011390889088906000908990899060040162000380565b600060405180830381600087803b1580156200012e57600080fd5b505af115801562000143573d6000803e3d6000fd5b50506040517ff2fde38b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416925063f2fde38b91506200019b9089906004016200035f565b600060405180830381600087803b158015620001b657600080fd5b505af1158015620001cb573d6000803e3d6000fd5b50505050505050505050565b6136d5806200047f83390190565b60008083601f840112620001f7578182fd5b50813567ffffffffffffffff8111156200020f578182fd5b6020830191508360208285010111156200022857600080fd5b9250929050565b60008060008060006060868803121562000247578081fd5b853573ffffffffffffffffffffffffffffffffffffffff811681146200026b578182fd5b9450602086013567ffffffffffffffff8082111562000288578283fd5b818801915088601f8301126200029c578283fd5b813581811115620002ab578384fd5b8960208083028501011115620002bf578384fd5b602083019650809550506040880135915080821115620002dd578283fd5b50620002ec88828901620001e5565b969995985093965092949392505050565b73ffffffffffffffffffffffffffffffffffffffff169052565b600082845282826020860137806020848601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011685010190509392505050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b606080825281018590526000602060808084019082890285010189845b8a8110156200044b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8087840301845281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18d3603018112620003ff578687fd5b8c01803567ffffffffffffffff81111562000418578788fd5b8036038e131562000427578788fd5b62000436858289850162000317565b9587019594505050908401906001016200039d565b50506200045b83860189620002fd565b84810360408601526200047081878962000317565b9a995050505050505050505056fe6080604052604051620036d5380380620036d5833981016040819052620000269162000875565b600062000032620002f6565b80546001600160a01b0319166001600160a01b0384169081178255604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a360006040516200008c9062000816565b604051809103906000f080158015620000a9573d6000803e3d6000fd5b5090506000604051620000bc9062000824565b604051809103906000f080158015620000d9573d6000803e3d6000fd5b5090506000604051620000ec9062000832565b604051809103906000f08015801562000109573d6000803e3d6000fd5b5060408051600480825260a0820190925291925060609190816020015b6060815260200190600190039081620001265750506040519091506200015a908590633e34b7f560e11b90602001620008f3565b604051602081830303815290604052816000815181106200017757fe5b602090810291909101810191909152604051620001bb9185916356fe50af60e11b91637a0ed62760e01b916366ffd66360e11b916314bbdacb60e21b91016200091a565b60405160208183030381529060405281600181518110620001d857fe5b60200260200101819052508163f2fde38b60e01b638da5cb5b60e01b604051602001620002089392919062000958565b604051602081830303815290604052816002815181106200022557fe5b6020026020010181905250306301ffc9a760e01b6040516020016200024c929190620008f3565b604051602081830303815290604052816003815181106200026957fe5b60209081029190910101526200027f816200031a565b50506301ffc9a760e01b6000908152600490930160205250506040808220805460ff199081166001908117909255633e34b7f560e11b845282842080548216831790556348e2b09360e01b845282842080548216831790556307f5828d60e41b845291909220805490911690911790555062000ac4565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b600062000326620002f6565b90506200033262000840565b60038201548082526001600160801b0381169060801c801562000368576000828152600285016020908152604090912054908401525b60005b85518110156200077a5760608682815181106200038457fe5b602002602001015190506014815111620003bb5760405162461bcd60e51b8152600401620003b29062000a56565b60405180910390fd5b602081015181516001600160601b031982169060046013199091010460348215620005555760005b828110156200054e57858201516001600160e01b03198116600090815260018d01602052604090205460049093019280620004e95760018c60a00190151590811515815250508a60001b60408b60001b901b8717178d6001016000846001600160e01b0319166001600160e01b03191681526020019081526020016000208190555089602002826001600160e01b031916901c8a6020026001600160e01b031960001b901c198d6020015116178c602001818152505089806001019a50508960081415620004e3578b602001518d60020160008d8152602001908152602001600020819055506000801b8c6020018181525050600099508a806001019b50505b62000543565b6001600160601b03198181169087161415620005195760405162461bcd60e51b8152600401620003b29062000a8d565b6001600160e01b03198216600090815260018e01602052604090206001600160601b038216871790555b5050600101620003e3565b5062000768565b600160a08a015260005b828110156200076657858201516001600160e01b03198116600090815260018d01602052604090205460049093019280620005ae5760405162461bcd60e51b8152600401620003b29062000a11565b60208c0151620005dc57600019909a01600081815260028e016020908152604090912054908d015299600899505b6001600160401b03811660408d810182905282901c63ffffffff1660608e01526020808e01516000198d019091021b908c14620006a3578d60020160008e604001518152602001908152602001600020548d60800181815250508c60600151602002816001600160e01b031916901c8d606001516020026001600160e01b031960001b901c198e6080015116178d60800181815250508c608001518e60020160008f604001518152602001908152602001600020819055508a80600190039b5050620006d5565b60608d01516020808f0180516001600160e01b03199290930282811c199390931691841690921c179052600019909a01995b8a620006f45760008c815260028f016020908152604082208290558e01525b6001600160e01b0319818116908416146200073e576001600160e01b03198116600090815260018f016020526040902080546001600160601b0319166001600160601b0384161790555b50506001600160e01b03191660009081526001808d016020526040822091909155016200055f565b505b5050600190930192506200036b915050565b508251608082901b83179081146200079457600385018190555b8360a001518015620007a65750600082115b15620007c5576020808501516000858152600288019092526040909120555b60408051600080825260208201928390527f8819f27db4d71c7d1006e0c686e12ce5b6d6835b3e06b43d52c9adda9168366c9262000806928a929162000987565b60405180910390a1505050505050565b610c92806200188883390190565b610f72806200251a83390190565b610249806200348c83390190565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b60006020828403121562000887578081fd5b81516001600160a01b03811681146200089e578182fd5b9392505050565b60008151808452815b81811015620008cc57602081850181015186830182015201620008ae565b81811115620008de5782602083870101525b50601f01601f19169290920160200192915050565b60609290921b6001600160601b03191682526001600160e01b031916601482015260180190565b60609590951b6001600160601b03191685526001600160e01b0319938416601486015291831660188501528216601c84015216602082015260240190565b60609390931b6001600160601b03191683526001600160e01b03199182166014840152166018820152601c0190565b60006060820160608352808651808352608085019150602092506080838202860101838901855b83811015620009e057607f19888403018552620009cd838351620008a5565b94860194925090850190600101620009ae565b50506001600160a01b03881686850152858103604087015262000a048188620008a5565b9998505050505050505050565b60208082526025908201527f46756e6374696f6e20646f65736e27742065786973742e2043616e277420726560408201526436b7bb329760d91b606082015260800190565b6020808252601f908201527f4d697373696e67206661636574206f722073656c6563746f7220696e666f2e00604082015260600190565b6020808252601b908201527f46756e6374696f6e2063757420746f2073616d652066616365742e0000000000604082015260600190565b610db48062000ad46000396000f3fe60806040526004361061002d5760003560e01c806301ffc9a7146100c25780637c696fea146100f857610034565b3661003457005b600080356001600160e01b03191681527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d60205260409020547fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90819060601c8061009e57600080fd5b3660008037600080366000845af43d6000803e8080156100bd573d6000f35b3d6000fd5b3480156100ce57600080fd5b506100e26100dd3660046109c7565b61011a565b6040516100ef9190610b3d565b60405180910390f35b34801561010457600080fd5b50610118610113366004610903565b61014d565b005b6000806101256102cd565b6001600160e01b0319841660009081526004909101602052604090205460ff16915050919050565b61015785856102f1565b801561025357600073ffffffffffffffffffffffffffffffffffffffff8416156101815783610183565b305b9050803b806101ad5760405162461bcd60e51b81526004016101a490610bdc565b60405180910390fd5b600060608373ffffffffffffffffffffffffffffffffffffffff1686866040516101d8929190610a58565b600060405180830381855af49150503d8060008114610213576040519150601f19603f3d011682016040523d82523d6000602084013e610218565b606091505b50915091508161024a578051156102325780518082602001fd5b60405162461bcd60e51b81526004016101a490610b7f565b50505050610287565b73ffffffffffffffffffffffffffffffffffffffff8316156102875760405162461bcd60e51b81526004016101a490610c39565b7f8819f27db4d71c7d1006e0c686e12ce5b6d6835b3e06b43d52c9adda9168366c85858585856040516102be959493929190610a68565b60405180910390a15050505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b60006102fb6102cd565b805490915073ffffffffffffffffffffffffffffffffffffffff1633146103345760405162461bcd60e51b81526004016101a490610b48565b61033c610887565b60038201548082526fffffffffffffffffffffffffffffffff81169060801c801561037a576000828152600285016020908152604090912054908401525b60005b8581101561083657606087878381811061039357fe5b90506020028101906103a59190610d39565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050825192935050601490911190506104005760405162461bcd60e51b81526004016101a490610ccb565b602081015181516bffffffffffffffffffffffff1982169060047fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec90910104603482156105fc5760005b828110156105f657858201516001600160e01b03198116600090815260018d0160205260409020546004909301928061058b5760018c60a00190151590811515815250508a60001b60408b60001b901b8717178d6001016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000208190555089602002827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c8a6020026001600160e01b031960001b901c198d6020015116178c602001818152505089806001019a50508960081415610586578b602001518d60020160008d8152602001908152602001600020819055506000801b8c6020018181525050600099508a806001019b50505b6105ec565b6bffffffffffffffffffffffff1981811690871614156105bd5760405162461bcd60e51b81526004016101a490610d02565b6001600160e01b03198216600090815260018e01602052604090206bffffffffffffffffffffffff8216871790555b505060010161044a565b50610825565b600160a08a015260005b8281101561082357858201516001600160e01b03198116600090815260018d016020526040902054600490930192806106515760405162461bcd60e51b81526004016101a490610c6e565b60208c015161067e57600019909a01600081815260028e016020908152604090912054908d015299600899505b67ffffffffffffffff811660408d810182905282901c63ffffffff1660608e01526020808e01516000198d019091021b908c14610759578d60020160008e604001518152602001908152602001600020548d60800181815250508c60600151602002817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c8d606001516020026001600160e01b031960001b901c198e6080015116178d60800181815250508c608001518e60020160008f604001518152602001908152602001600020819055508a80600190039b505061078b565b60608d01516020808f0180516001600160e01b03199290930282811c199390931691841690921c179052600019909a01995b8a6107a95760008c815260028f016020908152604082208290558e01525b6001600160e01b0319818116908416146107fc576001600160e01b03198116600090815260018f016020526040902080546bffffffffffffffffffffffff19166bffffffffffffffffffffffff84161790555b50506001600160e01b03191660009081526001808d01602052604082209190915501610606565b505b50506001909301925061037d915050565b508251608082901b831790811461084f57600385018190555b8360a0015180156108605750600082115b1561087e576020808501516000858152600288019092526040909120555b50505050505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b60008083601f8401126108cd578182fd5b50813567ffffffffffffffff8111156108e4578182fd5b6020830191508360208285010111156108fc57600080fd5b9250929050565b60008060008060006060868803121561091a578081fd5b853567ffffffffffffffff80821115610931578283fd5b818801915088601f830112610944578283fd5b813581811115610952578384fd5b8960208083028501011115610965578384fd5b602092830197509550908701359073ffffffffffffffffffffffffffffffffffffffff82168214610994578283fd5b909350604087013590808211156109a9578283fd5b506109b6888289016108bc565b969995985093965092949392505050565b6000602082840312156109d8578081fd5b81356001600160e01b0319811681146109ef578182fd5b9392505050565b73ffffffffffffffffffffffffffffffffffffffff169052565b600082845282826020860137806020848601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011685010190509392505050565b6000828483379101908152919050565b606080825281018590526000602060808084019082890285010189845b8a811015610b0e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808784030184528135601e198d3603018112610ac7578687fd5b8c01803567ffffffffffffffff811115610adf578788fd5b8036038e1315610aed578788fd5b610afa8582898501610a10565b958701959450505090840190600101610a85565b5050610b1c838601896109f6565b8481036040860152610b2f818789610a10565b9a9950505050505050505050565b901515815260200190565b60208082526016908201527f4d757374206f776e2074686520636f6e74726163742e00000000000000000000604082015260600190565b60208082526025908201527f4469616d6f6e6446616365743a205f696e69742066756e6374696f6e2072657660408201527f6572746564000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526027908201527f4469616d6f6e6446616365743a205f696e69742061646472657373206861732060408201527f6e6f20636f646500000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4469616d6f6e6446616365743a205f63616c6c6461746120697320656d707479604082015260600190565b60208082526025908201527f46756e6374696f6e20646f65736e27742065786973742e2043616e277420726560408201527f6d6f76652e000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f4d697373696e67206661636574206f722073656c6563746f7220696e666f2e00604082015260600190565b6020808252601b908201527f46756e6374696f6e2063757420746f2073616d652066616365742e0000000000604082015260600190565b6000808335601e19843603018112610d4f578283fd5b83018035915067ffffffffffffffff821115610d69578283fd5b6020019150368190038213156108fc57600080fdfea2646970667358221220a22536047eb1d5586002e00cb409c0cb6996de806a61b32a509642d8fef1934564736f6c63430007000033608060405234801561001057600080fd5b50610c72806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80637c696fea14610030575b600080fd5b61004361003e3660046107fb565b610045565b005b61004f85856101c5565b801561014b57600073ffffffffffffffffffffffffffffffffffffffff841615610079578361007b565b305b9050803b806100a55760405162461bcd60e51b815260040161009c90610a9a565b60405180910390fd5b600060608373ffffffffffffffffffffffffffffffffffffffff1686866040516100d0929190610921565b600060405180830381855af49150503d806000811461010b576040519150601f19603f3d011682016040523d82523d6000602084013e610110565b606091505b5091509150816101425780511561012a5780518082602001fd5b60405162461bcd60e51b815260040161009c90610a3d565b5050505061017f565b73ffffffffffffffffffffffffffffffffffffffff83161561017f5760405162461bcd60e51b815260040161009c90610af7565b7f8819f27db4d71c7d1006e0c686e12ce5b6d6835b3e06b43d52c9adda9168366c85858585856040516101b6959493929190610931565b60405180910390a15050505050565b60006101cf61075b565b805490915073ffffffffffffffffffffffffffffffffffffffff1633146102085760405162461bcd60e51b815260040161009c90610a06565b61021061077f565b60038201548082526fffffffffffffffffffffffffffffffff81169060801c801561024e576000828152600285016020908152604090912054908401525b60005b8581101561070a57606087878381811061026757fe5b90506020028101906102799190610bf7565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050825192935050601490911190506102d45760405162461bcd60e51b815260040161009c90610b89565b602081015181516bffffffffffffffffffffffff1982169060047fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec90910104603482156104d05760005b828110156104ca57858201516001600160e01b03198116600090815260018d0160205260409020546004909301928061045f5760018c60a00190151590811515815250508a60001b60408b60001b901b8717178d6001016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000208190555089602002827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c8a6020026001600160e01b031960001b901c198d6020015116178c602001818152505089806001019a5050896008141561045a578b602001518d60020160008d8152602001908152602001600020819055506000801b8c6020018181525050600099508a806001019b50505b6104c0565b6bffffffffffffffffffffffff1981811690871614156104915760405162461bcd60e51b815260040161009c90610bc0565b6001600160e01b03198216600090815260018e01602052604090206bffffffffffffffffffffffff8216871790555b505060010161031e565b506106f9565b600160a08a015260005b828110156106f757858201516001600160e01b03198116600090815260018d016020526040902054600490930192806105255760405162461bcd60e51b815260040161009c90610b2c565b60208c015161055257600019909a01600081815260028e016020908152604090912054908d015299600899505b67ffffffffffffffff811660408d810182905282901c63ffffffff1660608e01526020808e01516000198d019091021b908c1461062d578d60020160008e604001518152602001908152602001600020548d60800181815250508c60600151602002817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c8d606001516020026001600160e01b031960001b901c198e6080015116178d60800181815250508c608001518e60020160008f604001518152602001908152602001600020819055508a80600190039b505061065f565b60608d01516020808f0180516001600160e01b03199290930282811c199390931691841690921c179052600019909a01995b8a61067d5760008c815260028f016020908152604082208290558e01525b6001600160e01b0319818116908416146106d0576001600160e01b03198116600090815260018f016020526040902080546bffffffffffffffffffffffff19166bffffffffffffffffffffffff84161790555b50506001600160e01b03191660009081526001808d016020526040822091909155016104da565b505b505060019093019250610251915050565b508251608082901b831790811461072357600385018190555b8360a0015180156107345750600082115b15610752576020808501516000858152600288019092526040909120555b50505050505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b60008083601f8401126107c5578182fd5b50813567ffffffffffffffff8111156107dc578182fd5b6020830191508360208285010111156107f457600080fd5b9250929050565b600080600080600060608688031215610812578081fd5b853567ffffffffffffffff80821115610829578283fd5b818801915088601f83011261083c578283fd5b81358181111561084a578384fd5b896020808302850101111561085d578384fd5b602092830197509550908701359073ffffffffffffffffffffffffffffffffffffffff8216821461088c578283fd5b909350604087013590808211156108a1578283fd5b506108ae888289016107b4565b969995985093965092949392505050565b73ffffffffffffffffffffffffffffffffffffffff169052565b600082845282826020860137806020848601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011685010190509392505050565b6000828483379101908152919050565b606080825281018590526000602060808084019082890285010189845b8a8110156109d7577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808784030184528135601e198d3603018112610990578687fd5b8c01803567ffffffffffffffff8111156109a8578788fd5b8036038e13156109b6578788fd5b6109c385828985016108d9565b95870195945050509084019060010161094e565b50506109e5838601896108bf565b84810360408601526109f88187896108d9565b9a9950505050505050505050565b60208082526016908201527f4d757374206f776e2074686520636f6e74726163742e00000000000000000000604082015260600190565b60208082526025908201527f4469616d6f6e6446616365743a205f696e69742066756e6374696f6e2072657660408201527f6572746564000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526027908201527f4469616d6f6e6446616365743a205f696e69742061646472657373206861732060408201527f6e6f20636f646500000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4469616d6f6e6446616365743a205f63616c6c6461746120697320656d707479604082015260600190565b60208082526025908201527f46756e6374696f6e20646f65736e27742065786973742e2043616e277420726560408201527f6d6f76652e000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f4d697373696e67206661636574206f722073656c6563746f7220696e666f2e00604082015260600190565b6020808252601b908201527f46756e6374696f6e2063757420746f2073616d652066616365742e0000000000604082015260600190565b6000808335601e19843603018112610c0d578283fd5b83018035915067ffffffffffffffff821115610c27578283fd5b6020019150368190038213156107f457600080fdfea2646970667358221220899ed67d5dec7fe8be7e65a22df4030fbf459a9760b4ad505fc59f7e27418c0164736f6c63430007000033608060405234801561001057600080fd5b50610f52806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806352ef6b2c146100515780637a0ed6271461006f578063adfca15e14610084578063cdffacc614610097575b600080fd5b6100596100b7565b6040516100669190610ed9565b60405180910390f35b610077610340565b6040516100669190610e5b565b610059610092366004610d42565b610ab3565b6100aa6100a5366004610d7d565b610cd3565b6040516100669190610e3a565b606060006100c3610d06565b60038101549091506fffffffffffffffffffffffffffffffff60088202608083901c011660608167ffffffffffffffff8111801561010057600080fd5b5060405190808252806020026020018201604052801561012a578160200160208202803683370190505b50905060008060005b84821015610253576000818152600288016020526040812054905b6008811015610249576001909301928684111561016a57610249565b6001600160e01b0319602080830284901b918216600090815260018c01909152604081205460601c90805b888110156101f5578981815181106101a957fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156101ed57600191506101f5565b600101610195565b5080156102055750610241915050565b8189898151811061021257fe5b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101525050600190950194505b60010161014e565b5050600101610133565b5060608260140267ffffffffffffffff8111801561027057600080fd5b506040519080825280601f01601f19166020018201604052801561029b576020820181803683370190505b5090506000805b848110156103325760005b601481101561032957806008028783815181106102c657fe5b602002602001015160601b6bffffffffffffffffffffffff1916901b8484815181106102ee57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600192830192016102ad565b506001016102a2565b509097505050505050505090565b6060600061034c610d06565b60038101549091506fffffffffffffffffffffffffffffffff60088202608083901c011680601481111561037e575060145b60608167ffffffffffffffff8111801561039757600080fd5b506040519080825280602002602001820160405280156103d157816020015b6103be610d2a565b8152602001906001900390816103b65790505b50905060608267ffffffffffffffff811180156103ed57600080fd5b50604051908082528060200260200182016040528015610417578160200160208202803683370190505b50905060008060005b868210156108da57600081815260028a016020526040812054905b60088110156108d05760019093019288841115610457576108d0565b6001600160e01b0319602080830284901b918216600090815260018e01909152604081205460601c90805b88811015610693578273ffffffffffffffffffffffffffffffffffffffff168b82815181106104ad57fe5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff16141561068b5760008b82815181106104e357fe5b602002602001015160200151519050808b83815181106104ff57fe5b602002602001015160010160ff1611156105dd5760608d820167ffffffffffffffff8111801561052e57600080fd5b50604051908082528060200260200182016040528015610558578160200160208202803683370190505b50905060005b828110156105be578d848151811061057257fe5b602002602001015160200151818151811061058957fe5b602002602001015182828151811061059d57fe5b6001600160e01b03199092166020928302919091019091015260010161055e565b50808d84815181106105cc57fe5b602002602001015160200181905250505b848c83815181106105ea57fe5b6020026020010151602001518c848151811061060257fe5b602002602001015160ff168151811061061757fe5b60200260200101906001600160e01b03191690816001600160e01b0319168152505060ff8b838151811061064757fe5b602002602001015160ff161061065c57600080fd5b8a828151811061066857fe5b60200260200101805180919060010160ff1660ff16815250506001925050610693565b600101610482565b5080156106a357506108c8915050565b8951600189018110156107c75760608c820167ffffffffffffffff811180156106cb57600080fd5b5060405190808252806020026020018201604052801561070557816020015b6106f2610d2a565b8152602001906001900390816106ea5790505b50905060608d830167ffffffffffffffff8111801561072357600080fd5b5060405190808252806020026020018201604052801561074d578160200160208202803683370190505b50905060005b838110156107c0578d818151811061076757fe5b602002602001015183828151811061077b57fe5b60200260200101819052508c818151811061079257fe5b60200260200101518282815181106107a657fe5b60ff90921660209283029190910190910152600101610753565b50909b5099505b828b8a815181106107d457fe5b602090810291909101015173ffffffffffffffffffffffffffffffffffffffff90911690528b67ffffffffffffffff8111801561081057600080fd5b5060405190808252806020026020018201604052801561083a578160200160208202803683370190505b508b8a8151811061084757fe5b602002602001015160200181905250838b8a8151811061086357fe5b60200260200101516020015160008151811061087b57fe5b60200260200101906001600160e01b03191690816001600160e01b0319168152505060018a8a815181106108ab57fe5b60ff90921660209283029190910190910152505060019096019550505b60010161043b565b5050600101610420565b5060608267ffffffffffffffff811180156108f457600080fd5b5060405190808252806020026020018201604052801561092857816020015b60608152602001906001900390816109135790505b50905060005b83811015610aa557600085828151811061094457fe5b602002602001015160ff16905060608160040267ffffffffffffffff8111801561096d57600080fd5b506040519080825280601f01601f191660200182016040528015610998576020820181803683370190505b50905060608884815181106109a957fe5b60200260200101516020015190506000805b84811015610a435760005b6004811015610a3a57806008028483815181106109df57fe5b60200260200101516001600160e01b031916901b8584815181106109ff57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600192830192016109c6565b506001016109bb565b50898581518110610a5057fe5b60200260200101516000015183604051602001610a6e929190610def565b604051602081830303815290604052868681518110610a8957fe5b602002602001018190525050505050808060010191505061092e565b509850505050505050505090565b60606000610abf610d06565b60038101549091506fffffffffffffffffffffffffffffffff60088202608083901c0116600060608267ffffffffffffffff81118015610afe57600080fd5b50604051908082528060200260200182016040528015610b28578160200160208202803683370190505b5090506000805b84821015610bed576000818152600288016020526040812054905b6008811015610be35760019093019286841115610b6657610be3565b6001600160e01b0319602080830284901b918216600090815260018c01909152604090205460601c73ffffffffffffffffffffffffffffffffffffffff8d16811415610bd95781878981518110610bb957fe5b6001600160e01b0319909216602092830291909101909101526001909701965b5050600101610b4a565b5050600101610b2f565b5060608360040267ffffffffffffffff81118015610c0a57600080fd5b506040519080825280601f01601f191660200182016040528015610c35576020820181803683370190505b5090506000805b85811015610cc45760005b6004811015610cbb5780600802868381518110610c6057fe5b60200260200101516001600160e01b031916901b848481518110610c8057fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060019283019201610c47565b50600101610c3c565b50909998505050505050505050565b600080610cde610d06565b6001600160e01b0319841660009081526001909101602052604090205460601c915050919050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b60408051808201909152600081526060602082015290565b600060208284031215610d53578081fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610d76578182fd5b9392505050565b600060208284031215610d8e578081fd5b81356001600160e01b031981168114610d76578182fd5b60008151808452610dbd816020860160208601610eec565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60007fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008460601b1682528251610e2c816014850160208701610eec565b919091016014019392505050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015610ecc577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452610eba858351610da5565b94509285019290850190600101610e80565b5092979650505050505050565b600060208252610d766020830184610da5565b60005b83811015610f07578181015183820152602001610eef565b83811115610f16576000848401525b5050505056fea2646970667358221220f6dcd2bda2be3c28d45d3782c4bd301e9f51440abf00750ad167da18eab441c364736f6c63430007000033608060405234801561001057600080fd5b50610229806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80638da5cb5b1461003b578063f2fde38b1461006c575b600080fd5b6100436100a1565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61009f6004803603602081101561008257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166100c9565b005b6000806100ac6101cf565b5473ffffffffffffffffffffffffffffffffffffffff1691505090565b60006100d36101cf565b805490915073ffffffffffffffffffffffffffffffffffffffff1633811461015c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d757374206f776e2074686520636f6e74726163742e00000000000000000000604482015290519081900360640190fd5b81547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8481169182178455604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c9056fea2646970667358221220f419f8c0e62f19ad1fd244a282cbbc4adb5d800f1764edde274a35c0becc57ba64736f6c63430007000033a2646970667358221220fc77d2e1e17b3da007053dac58902f4bc41c181b18e09bb705acddc22a4fc67a64736f6c63430007000033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "metadata": "{\"compiler\":{\"version\":\"0.7.0+commit.9e61f92b\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IDiamond\",\"name\":\"diamond\",\"type\":\"address\"}],\"name\":\"DiamondCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"_diamondCut\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"createDiamond\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solc_0.7/diamond/Diamantaire.sol\":\"Diamantaire\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"solc_0.7/diamond/Diamantaire.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./DiamondHeaders.sol\\\";\\nimport \\\"./Diamond.sol\\\";\\n\\ncontract Diamantaire {\\n    event DiamondCreated(IDiamond diamond);\\n\\n    function createDiamond(\\n        address owner,\\n        bytes[] calldata _diamondCut,\\n        bytes calldata data\\n    ) external payable {\\n        IDiamond diamond = IDiamond(\\n            address(new Diamond{value: msg.value}(address(this)))\\n        );\\n        emit DiamondCreated(diamond);\\n\\n        diamond.diamondCut(_diamondCut, address(0), data);\\n        IERC173(address(diamond)).transferOwnership(owner);\\n    }\\n}\\n\",\"keccak256\":\"0xefaeeaebb91468ca59b278980b010373146ba11461d4249bf139cffe864f73d0\",\"license\":\"MIT\"},\"solc_0.7/diamond/Diamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge\\n*\\n* Implementation of an example of a diamond.\\n/******************************************************************************/\\n\\nimport \\\"./OwnershipFacet.sol\\\";\\nimport \\\"./DiamondStorageContract.sol\\\";\\nimport \\\"./DiamondHeaders.sol\\\";\\nimport \\\"./DiamondFacet.sol\\\";\\nimport \\\"./DiamondLoupeFacet.sol\\\";\\n\\ncontract Diamond is IERC173Events, IERC165, DiamondStorageContract, DiamondFacet {\\n\\n    constructor(address owner) payable {\\n        DiamondStorage storage ds = diamondStorage();\\n        ds.contractOwner = owner;\\n        emit OwnershipTransferred(address(0), owner);\\n\\n        // Create a DiamondFacet contract which implements the Diamond interface\\n        DiamondFacet diamondFacet = new DiamondFacet();\\n\\n        // Create a DiamondLoupeFacet contract which implements the Diamond Loupe interface\\n        DiamondLoupeFacet diamondLoupeFacet = new DiamondLoupeFacet();\\n\\n        // Create a OwnershipFacet contract which implements the ERC-173 Ownership interface\\n        OwnershipFacet ownershipFacet = new OwnershipFacet();\\n\\n        bytes[] memory cut = new bytes[](4);\\n\\n        // Adding cut function\\n        cut[0] = abi.encodePacked(\\n            diamondFacet,\\n            IDiamond.diamondCut.selector\\n        );\\n\\n        // Adding diamond loupe functions\\n        cut[1] = abi.encodePacked(\\n            diamondLoupeFacet,\\n            IDiamondLoupe.facetFunctionSelectors.selector,\\n            IDiamondLoupe.facets.selector,\\n            IDiamondLoupe.facetAddress.selector,\\n            IDiamondLoupe.facetAddresses.selector\\n        );\\n\\n        // Adding diamond ERC173 functions\\n        cut[2] = abi.encodePacked(\\n            ownershipFacet,\\n            IERC173.transferOwnership.selector,\\n            IERC173.owner.selector\\n        );\\n\\n        // Adding supportsInterface function\\n        cut[3] = abi.encodePacked(address(this), IERC165.supportsInterface.selector);\\n\\n         // execute non-standard internal diamondCut function to add functions\\n        diamondCut(cut);\\n        \\n        // adding ERC165 data\\n        // ERC165\\n        ds.supportedInterfaces[IERC165.supportsInterface.selector] = true;\\n\\n        // DiamondCut\\n        ds.supportedInterfaces[IDiamond.diamondCut.selector] = true;\\n\\n        // DiamondLoupe\\n        bytes4 interfaceID = IDiamondLoupe.facets.selector ^\\n            IDiamondLoupe.facetFunctionSelectors.selector ^\\n            IDiamondLoupe.facetAddresses.selector ^\\n            IDiamondLoupe.facetAddress.selector;\\n        ds.supportedInterfaces[interfaceID] = true;\\n\\n        // ERC173\\n        ds.supportedInterfaces[IERC173.transferOwnership.selector ^\\n            IERC173.owner.selector] = true;\\n    }\\n\\n    // This is an immutable functions because it is defined directly in the diamond.\\n    // Why is it here instead of in a facet?  No reason, just to show an immutable function.\\n    // This implements ERC-165.\\n    function supportsInterface(bytes4 _interfaceID) external override view returns (bool) {\\n        DiamondStorage storage ds = diamondStorage();\\n        return ds.supportedInterfaces[_interfaceID];\\n    }\\n\\n    // Find facet for function that is called and execute the\\n    // function if a facet is found and return any value.\\n    fallback() external payable {\\n        DiamondStorage storage ds;\\n        bytes32 position = DiamondStorageContract.DIAMOND_STORAGE_POSITION;\\n        assembly { ds.slot := position }\\n        address facet = address(bytes20(ds.facets[msg.sig]));  \\n        require(facet != address(0));      \\n        assembly {            \\n            calldatacopy(0, 0, calldatasize())\\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)            \\n            returndatacopy(0, 0, returndatasize())\\n            switch result\\n            case 0 {revert(0, returndatasize())}\\n            default {return (0, returndatasize())}\\n        }\\n    }\\n\\n    receive() external payable {}\\n\\n    // Non-standard internal function version of diamondCut \\n    // This code is exaclty the same as externalCut in DiamondFacet, except it allows anyone to call it (internally) and is using\\n    // 'bytes[] memory _diamondCut' instead of 'bytes[] calldata _diamondCut'\\n    // The code is duplicated to prevent copying calldata to memory which\\n    // causes an error for an array of bytes arrays.\\n    function diamondCut(bytes[] memory _diamondCut) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        SlotInfo memory slot;\\n        slot.originalSelectorSlotsLength = ds.selectorSlotsLength;\\n        uint selectorSlotsLength = uint128(slot.originalSelectorSlotsLength);\\n        uint selectorSlotLength = uint128(slot.originalSelectorSlotsLength >> 128);\\n        if(selectorSlotLength > 0) {\\n            slot.selectorSlot = ds.selectorSlots[selectorSlotsLength];\\n        }\\n        // loop through diamond cut\\n        for(uint diamondCutIndex; diamondCutIndex < _diamondCut.length; diamondCutIndex++) {\\n            bytes memory facetCut = _diamondCut[diamondCutIndex];\\n            require(facetCut.length > 20, \\\"Missing facet or selector info.\\\");\\n            bytes32 currentSlot;\\n            assembly {\\n                currentSlot := mload(add(facetCut,32))\\n            }\\n            bytes32 newFacet = bytes20(currentSlot);\\n            uint numSelectors = (facetCut.length - 20) / 4;\\n            uint position = 52;\\n\\n            // adding or replacing functions\\n            if(newFacet != 0) {                \\n                // add and replace selectors\\n                for(uint selectorIndex; selectorIndex < numSelectors; selectorIndex++) {\\n                    bytes4 selector;\\n                    assembly {\\n                        selector := mload(add(facetCut,position))\\n                    }\\n                    position += 4;\\n                    bytes32 oldFacet = ds.facets[selector];\\n                    // add\\n                    if(oldFacet == 0) {\\n                        // update the last slot at then end of the function\\n                        slot.updateLastSlot = true;\\n                        ds.facets[selector] = newFacet | bytes32(selectorSlotLength) << 64 | bytes32(selectorSlotsLength);\\n                        // clear selector position in slot and add selector\\n                        slot.selectorSlot = slot.selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorSlotLength * 32) | bytes32(selector) >> selectorSlotLength * 32;\\n                        selectorSlotLength++;\\n                        // if slot is full then write it to storage\\n                        if(selectorSlotLength == 8) {\\n                            ds.selectorSlots[selectorSlotsLength] = slot.selectorSlot;\\n                            slot.selectorSlot = 0;\\n                            selectorSlotLength = 0;\\n                            selectorSlotsLength++;\\n                        }\\n                    }\\n                    // replace\\n                    else {\\n                        require(bytes20(oldFacet) != bytes20(newFacet), \\\"Function cut to same facet.\\\");\\n                        // replace old facet address\\n                        ds.facets[selector] = oldFacet & CLEAR_ADDRESS_MASK | newFacet;\\n                    }\\n                }\\n            }\\n            // remove functions\\n            else {\\n                slot.updateLastSlot = true;\\n                for(uint selectorIndex; selectorIndex < numSelectors; selectorIndex++) {\\n                    bytes4 selector;\\n                    assembly {\\n                        selector := mload(add(facetCut,position))\\n                    }\\n                    position += 4;\\n                    bytes32 oldFacet = ds.facets[selector];\\n                    require(oldFacet != 0, \\\"Function doesn't exist. Can't remove.\\\");\\n                    // Current slot is empty so get the slot before it\\n                    if(slot.selectorSlot == 0) {\\n                        selectorSlotsLength--;\\n                        slot.selectorSlot = ds.selectorSlots[selectorSlotsLength];\\n                        selectorSlotLength = 8;\\n                    }\\n                    slot.oldSelectorSlotsIndex = uint64(uint(oldFacet));\\n                    slot.oldSelectorSlotIndex = uint32(uint(oldFacet >> 64));\\n                    // gets the last selector in the slot\\n                    bytes4 lastSelector = bytes4(slot.selectorSlot << (selectorSlotLength-1) * 32);\\n                    if(slot.oldSelectorSlotsIndex != selectorSlotsLength) {\\n                        slot.oldSelectorSlot = ds.selectorSlots[slot.oldSelectorSlotsIndex];\\n                        // clears the selector we are deleting and puts the last selector in its place.\\n                        slot.oldSelectorSlot = slot.oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> slot.oldSelectorSlotIndex * 32) | bytes32(lastSelector) >> slot.oldSelectorSlotIndex * 32;\\n                        // update storage with the modified slot\\n                        ds.selectorSlots[slot.oldSelectorSlotsIndex] = slot.oldSelectorSlot;\\n                        selectorSlotLength--;\\n                    }\\n                    else {\\n                        // clears the selector we are deleting and puts the last selector in its place.\\n                        slot.selectorSlot = slot.selectorSlot & ~(CLEAR_SELECTOR_MASK >> slot.oldSelectorSlotIndex * 32) | bytes32(lastSelector) >> slot.oldSelectorSlotIndex * 32;\\n                        selectorSlotLength--;                        \\n                    }\\n                    if(selectorSlotLength == 0) {\\n                        delete ds.selectorSlots[selectorSlotsLength];\\n                        slot.selectorSlot = 0;                        \\n                    }\\n                    if(lastSelector != selector) {\\n                        // update last selector slot position info\\n                        ds.facets[lastSelector] = oldFacet & CLEAR_ADDRESS_MASK | bytes20(ds.facets[lastSelector]);\\n                    }\\n                    delete ds.facets[selector];\\n                }\\n            }\\n        }\\n        uint newSelectorSlotsLength = selectorSlotLength << 128 | selectorSlotsLength;\\n        if(newSelectorSlotsLength != slot.originalSelectorSlotsLength) {\\n            ds.selectorSlotsLength = newSelectorSlotsLength;\\n        }\\n        if(slot.updateLastSlot && selectorSlotLength > 0) {\\n            ds.selectorSlots[selectorSlotsLength] = slot.selectorSlot;\\n        }        \\n        emit DiamondCut(_diamondCut, address(0), new bytes(0));\\n    }\\n}\\n\",\"keccak256\":\"0x11aa1b8c7a875690bc2d48b5226202db0d7de4b8d09603fc9e2b48ddc145c87c\",\"license\":\"MIT\"},\"solc_0.7/diamond/DiamondFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge\\n*\\n* Implementation of Diamond facet.\\n* This is gas optimized by reducing storage reads and storage writes.\\n* This code is as complex as it is to reduce gas costs.\\n/******************************************************************************/\\n\\nimport \\\"./DiamondStorageContract.sol\\\";\\nimport \\\"./DiamondHeaders.sol\\\";\\n\\ncontract DiamondFacet is IDiamond, DiamondStorageContract {\\n    bytes32 constant CLEAR_ADDRESS_MASK = 0x0000000000000000000000000000000000000000ffffffffffffffffffffffff;\\n    bytes32 constant CLEAR_SELECTOR_MASK = 0xffffffff00000000000000000000000000000000000000000000000000000000;\\n\\n    // Standard diamondCut external function\\n    function diamondCut(bytes[] calldata _diamondCut, address _init, bytes calldata _calldata) external override {        \\n        externalCut(_diamondCut);        \\n        if(_calldata.length > 0) {\\n            address init = _init == address(0)? address(this) : _init;\\n            // Check that init has contract code\\n            uint contractSize;\\n            assembly { contractSize := extcodesize(init) }\\n            require(contractSize > 0, \\\"DiamondFacet: _init address has no code\\\");\\n            (bool success, bytes memory error) = init.delegatecall(_calldata);\\n            if(!success) {\\n                if(error.length > 0) {\\n                    // bubble up the error\\n                    assembly {\\n                        let errorSize := mload(error)\\n                        revert(add(32, error), errorSize)\\n                    }\\n                }\\n                else {\\n                    revert(\\\"DiamondFacet: _init function reverted\\\");\\n                }\\n            }                        \\n        }\\n        else if(_init != address(0)) {\\n            revert(\\\"DiamondFacet: _calldata is empty\\\");\\n        }                       \\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n    }\\n\\n    // This struct is used to prevent getting the error \\\"CompilerError: Stack too deep, try removing local variables.\\\"\\n    // See this article: https://medium.com/1milliondevs/compilererror-stack-too-deep-try-removing-local-variables-solved-a6bcecc16231\\n    struct SlotInfo {\\n        uint originalSelectorSlotsLength;\\n        bytes32 selectorSlot;\\n        uint oldSelectorSlotsIndex;\\n        uint oldSelectorSlotIndex;\\n        bytes32 oldSelectorSlot;\\n        bool updateLastSlot;\\n    }\\n\\n\\n    // diamondCut helper function\\n    // This code is exaclty the same as the internal diamondCut function, \\n    // except it is using 'bytes[] calldata _diamondCut' instead of \\n    // 'bytes[] memory _diamondCut'\\n    // The code is duplicated to prevent copying calldata to memory which\\n    // causes an error for an array of bytes arrays.\\n    function externalCut(bytes[] calldata _diamondCut) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(msg.sender == ds.contractOwner, \\\"Must own the contract.\\\");\\n        SlotInfo memory slot;\\n        slot.originalSelectorSlotsLength = ds.selectorSlotsLength;\\n        uint selectorSlotsLength = uint128(slot.originalSelectorSlotsLength);\\n        uint selectorSlotLength = uint128(slot.originalSelectorSlotsLength >> 128);\\n        if(selectorSlotLength > 0) {\\n            slot.selectorSlot = ds.selectorSlots[selectorSlotsLength];\\n        }\\n        // loop through diamond cut\\n        for(uint diamondCutIndex; diamondCutIndex < _diamondCut.length; diamondCutIndex++) {\\n            bytes memory facetCut = _diamondCut[diamondCutIndex];\\n            require(facetCut.length > 20, \\\"Missing facet or selector info.\\\");\\n            bytes32 currentSlot;\\n            assembly {\\n                currentSlot := mload(add(facetCut,32))\\n            }\\n            bytes32 newFacet = bytes20(currentSlot);\\n            uint numSelectors = (facetCut.length - 20) / 4;\\n            uint position = 52;\\n\\n            // adding or replacing functions\\n            if(newFacet != 0) {                \\n                // add and replace selectors\\n                for(uint selectorIndex; selectorIndex < numSelectors; selectorIndex++) {\\n                    bytes4 selector;\\n                    assembly {\\n                        selector := mload(add(facetCut,position))\\n                    }\\n                    position += 4;\\n                    bytes32 oldFacet = ds.facets[selector];\\n                    // add\\n                    if(oldFacet == 0) {\\n                        // update the last slot at then end of the function\\n                        slot.updateLastSlot = true;\\n                        ds.facets[selector] = newFacet | bytes32(selectorSlotLength) << 64 | bytes32(selectorSlotsLength);\\n                        // clear selector position in slot and add selector\\n                        slot.selectorSlot = slot.selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorSlotLength * 32) | bytes32(selector) >> selectorSlotLength * 32;\\n                        selectorSlotLength++;\\n                        // if slot is full then write it to storage\\n                        if(selectorSlotLength == 8) {\\n                            ds.selectorSlots[selectorSlotsLength] = slot.selectorSlot;\\n                            slot.selectorSlot = 0;\\n                            selectorSlotLength = 0;\\n                            selectorSlotsLength++;\\n                        }\\n                    }\\n                    // replace\\n                    else {\\n                        require(bytes20(oldFacet) != bytes20(newFacet), \\\"Function cut to same facet.\\\");\\n                        // replace old facet address\\n                        ds.facets[selector] = oldFacet & CLEAR_ADDRESS_MASK | newFacet;\\n                    }\\n                }\\n            }\\n            // remove functions\\n            else {\\n                slot.updateLastSlot = true;\\n                for(uint selectorIndex; selectorIndex < numSelectors; selectorIndex++) {\\n                    bytes4 selector;\\n                    assembly {\\n                        selector := mload(add(facetCut,position))\\n                    }\\n                    position += 4;\\n                    bytes32 oldFacet = ds.facets[selector];\\n                    require(oldFacet != 0, \\\"Function doesn't exist. Can't remove.\\\");\\n                    // Current slot is empty so get the slot before it\\n                    if(slot.selectorSlot == 0) {\\n                        selectorSlotsLength--;\\n                        slot.selectorSlot = ds.selectorSlots[selectorSlotsLength];\\n                        selectorSlotLength = 8;\\n                    }\\n                    slot.oldSelectorSlotsIndex = uint64(uint(oldFacet));\\n                    slot.oldSelectorSlotIndex = uint32(uint(oldFacet >> 64));\\n                    // gets the last selector in the slot\\n                    bytes4 lastSelector = bytes4(slot.selectorSlot << (selectorSlotLength-1) * 32);\\n                    if(slot.oldSelectorSlotsIndex != selectorSlotsLength) {\\n                        slot.oldSelectorSlot = ds.selectorSlots[slot.oldSelectorSlotsIndex];\\n                        // clears the selector we are deleting and puts the last selector in its place.\\n                        slot.oldSelectorSlot = slot.oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> slot.oldSelectorSlotIndex * 32) | bytes32(lastSelector) >> slot.oldSelectorSlotIndex * 32;\\n                        // update storage with the modified slot\\n                        ds.selectorSlots[slot.oldSelectorSlotsIndex] = slot.oldSelectorSlot;\\n                        selectorSlotLength--;\\n                    }\\n                    else {\\n                        // clears the selector we are deleting and puts the last selector in its place.\\n                        slot.selectorSlot = slot.selectorSlot & ~(CLEAR_SELECTOR_MASK >> slot.oldSelectorSlotIndex * 32) | bytes32(lastSelector) >> slot.oldSelectorSlotIndex * 32;\\n                        selectorSlotLength--;                        \\n                    }\\n                    if(selectorSlotLength == 0) {\\n                        delete ds.selectorSlots[selectorSlotsLength];\\n                        slot.selectorSlot = 0;                        \\n                    }\\n                    if(lastSelector != selector) {\\n                        // update last selector slot position info\\n                        ds.facets[lastSelector] = oldFacet & CLEAR_ADDRESS_MASK | bytes20(ds.facets[lastSelector]);\\n                    }\\n                    delete ds.facets[selector];\\n                }\\n            }\\n        }\\n        uint newSelectorSlotsLength = selectorSlotLength << 128 | selectorSlotsLength;\\n        if(newSelectorSlotsLength != slot.originalSelectorSlotsLength) {\\n            ds.selectorSlotsLength = newSelectorSlotsLength;\\n        }\\n        if(slot.updateLastSlot && selectorSlotLength > 0) {\\n            ds.selectorSlots[selectorSlotsLength] = slot.selectorSlot;\\n        }        \\n    }\\n}\\n\",\"keccak256\":\"0xec1ea013f7ff9cc3831a3afa1b101c482626ec8a6916ce2ea96c5a94dc8ab9dd\",\"license\":\"MIT\"},\"solc_0.7/diamond/DiamondHeaders.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IDiamond {\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// This argument is tightly packed for gas efficiency    \\n    /// That means no padding with zeros.\\n    /// Here is the structure of _diamondCut:\\n    /// _diamondCut = [\\n    ///     abi.encodePacked(facet, sel1, sel2, sel3, ...),\\n    ///     abi.encodePacked(facet, sel1, sel2, sel4, ...),\\n    ///     ...\\n    /// ]\\n    /// facet is the address of a facet\\n    /// sel1, sel2, sel3 etc. are four-byte function selectors.\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(bytes[] calldata _diamondCut, address _init, bytes calldata _calldata) external;\\n    event DiamondCut(bytes[] _diamondCut, address _init, bytes _calldata);\\n}\\n\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools. Therefore the return values are tightly\\n    /// packed for efficiency. That means no padding with zeros.\\n\\n    /// @notice Gets all facets and their selectors.\\n    /// @return An array of bytes arrays containing each facet\\n    ///         and each facet's selectors.\\n    /// The return value is tightly packed.\\n    /// Here is the structure of the return value:\\n    /// returnValue = [\\n    ///     abi.encodePacked(facet, sel1, sel2, sel3, ...),\\n    ///     abi.encodePacked(facet, sel1, sel2, sel3, ...),\\n    ///     ...\\n    /// ]\\n    /// facet is the address of a facet.\\n    /// sel1, sel2, sel3 etc. are four-byte function selectors.\\n    function facets() external view returns(bytes[] memory);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return A byte array of function selectors.\\n    /// The return value is tightly packed. Here is an example:\\n    /// return abi.encodePacked(selector1, selector2, selector3, ...)\\n    function facetFunctionSelectors(address _facet) external view returns(bytes memory);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return A byte array of tightly packed facet addresses.\\n    /// Example return value:\\n    /// return abi.encodePacked(facet1, facet2, facet3, ...)\\n    function facetAddresses() external view returns(bytes memory);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view returns(address);\\n}\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceID The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\\ninterface IERC173Events {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n}\\n\\ninterface IERC173 is IERC173Events {\\n    function transferOwnership(address newOwner) external;\\n\\n    function owner() external view returns (address);\\n}\\n\",\"keccak256\":\"0x331a6b7d4e1a101eff1dfd4d7c1a69ef6c6165c81ff674e63ec0cbfe7c5f42a7\",\"license\":\"MIT\"},\"solc_0.7/diamond/DiamondLoupeFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge\\n*\\n* Implementation of DiamondLoupe interface.\\n/******************************************************************************/\\n\\nimport \\\"./DiamondStorageContract.sol\\\";\\nimport \\\"./DiamondHeaders.sol\\\";\\n\\n\\ncontract DiamondLoupeFacet is IDiamondLoupe, DiamondStorageContract {\\n    /// These functions are expected to be called frequently\\n    /// by tools. Therefore the return values are tightly\\n    /// packed for efficiency. That means no padding with zeros.\\n\\n    struct Facet {\\n        address facet;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facets and their selectors.\\n    /// @return An array of bytes arrays containing each facet\\n    ///         and each facet's selectors.\\n    /// The return value is tightly packed.\\n    /// That means no padding with zeros.\\n    /// Here is the structure of the return value:\\n    /// returnValue = [\\n    ///     abi.encodePacked(facet, sel1, sel2, sel3, ...),\\n    ///     abi.encodePacked(facet, sel1, sel2, sel3, ...),\\n    ///     ...\\n    /// ]\\n    /// facet is the address of a facet.\\n    /// sel1, sel2, sel3 etc. are four-byte function selectors.\\n    function facets() external view override returns(bytes[] memory) {\\n        DiamondStorage storage ds = diamondStorage();\\n        uint totalSelectorSlots = ds.selectorSlotsLength;        \\n        uint totalSelectors = uint128(totalSelectorSlots) * 8 + uint128(totalSelectorSlots >> 128);\\n        \\n        // get default size of arrays\\n        uint defaultSize = totalSelectors;\\n        if(defaultSize > 20) {\\n            defaultSize = 20;\\n        }\\n        Facet[] memory facets_ = new Facet[](defaultSize);\\n        uint8[] memory numFacetSelectors = new uint8[](defaultSize);\\n        uint numFacets;\\n        uint selectorCount;\\n        // loop through function selectors\\n        for(uint slotIndex; selectorCount < totalSelectors; slotIndex++) {\\n            bytes32 slot = ds.selectorSlots[slotIndex];\\n            for(uint selectorIndex; selectorIndex < 8; selectorIndex++) {\\n                selectorCount++;\\n                if(selectorCount > totalSelectors) {\\n                    break;\\n                }\\n                bytes4 selector = bytes4(slot << selectorIndex * 32);\\n                address facet = address(bytes20(ds.facets[selector]));\\n                bool continueLoop = false;\\n                for(uint facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if(facets_[facetIndex].facet == facet) {\\n                        uint arrayLength = facets_[facetIndex].functionSelectors.length;\\n                        // if array is too small then enlarge it\\n                        if(numFacetSelectors[facetIndex]+1 > arrayLength) {\\n                            bytes4[] memory biggerArray = new bytes4[](arrayLength + defaultSize);\\n                            // copy contents of old array\\n                            for(uint i; i < arrayLength; i++) {\\n                                biggerArray[i] = facets_[facetIndex].functionSelectors[i];\\n                            }\\n                            facets_[facetIndex].functionSelectors = biggerArray;\\n                        }\\n                        facets_[facetIndex].functionSelectors[numFacetSelectors[facetIndex]] = selector;\\n                        // probably will never have more than 255 functions from one facet contract\\n                        require(numFacetSelectors[facetIndex] < 255);\\n                        numFacetSelectors[facetIndex]++;\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n                if(continueLoop) {\\n                    continueLoop = false;\\n                    continue;\\n                }\\n                uint arrayLength = facets_.length;\\n                // if array is too small then enlarge it\\n                if(numFacets+1 > arrayLength) {\\n                    Facet[] memory biggerArray = new Facet[](arrayLength + defaultSize);\\n                    uint8[] memory biggerArray2 = new uint8[](arrayLength + defaultSize);\\n                    for(uint i; i < arrayLength; i++) {\\n                        biggerArray[i] = facets_[i];\\n                        biggerArray2[i] = numFacetSelectors[i];\\n                    }\\n                    facets_ = biggerArray;\\n                    numFacetSelectors = biggerArray2;\\n                }\\n                facets_[numFacets].facet = facet;\\n                facets_[numFacets].functionSelectors = new bytes4[](defaultSize);\\n                facets_[numFacets].functionSelectors[0] = selector;\\n                numFacetSelectors[numFacets] = 1;\\n                numFacets++;\\n            }\\n        }\\n        bytes[] memory returnFacets = new bytes[](numFacets);\\n        for(uint facetIndex; facetIndex < numFacets; facetIndex++) {\\n            uint numSelectors = numFacetSelectors[facetIndex];\\n            bytes memory selectorsBytes = new bytes(4 * numSelectors);\\n            bytes4[] memory selectors = facets_[facetIndex].functionSelectors;\\n            uint bytePosition;\\n            for(uint i; i < numSelectors; i++) {\\n                for(uint j; j < 4; j++) {\\n                    selectorsBytes[bytePosition] = byte(selectors[i] << j * 8);\\n                    bytePosition++;\\n                }\\n            }\\n            returnFacets[facetIndex] = abi.encodePacked(facets_[facetIndex].facet, selectorsBytes);\\n        }\\n        return returnFacets;\\n    }\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return A bytes array of function selectors.\\n    /// The return value is tightly packed. Here is an example:\\n    /// return abi.encodePacked(selector1, selector2, selector3, ...)\\n    function facetFunctionSelectors(address _facet) external view override returns(bytes memory) {\\n        DiamondStorage storage ds = diamondStorage();\\n        uint totalSelectorSlots = ds.selectorSlotsLength;\\n        uint totalSelectors = uint128(totalSelectorSlots) * 8 + uint128(totalSelectorSlots >> 128);\\n        \\n        uint numFacetSelectors;\\n        bytes4[] memory facetSelectors = new bytes4[](totalSelectors);\\n        uint selectorCount;\\n        // loop through function selectors\\n        for(uint slotIndex; selectorCount < totalSelectors; slotIndex++) {\\n            bytes32 slot = ds.selectorSlots[slotIndex];\\n            for(uint selectorIndex; selectorIndex < 8; selectorIndex++) {\\n                selectorCount++;\\n                if(selectorCount > totalSelectors) {\\n                    break;\\n                }\\n                bytes4 selector = bytes4(slot << selectorIndex * 32);\\n                address facet = address(bytes20(ds.facets[selector]));\\n                if(_facet == facet) {\\n                    facetSelectors[numFacetSelectors] = selector;\\n                    numFacetSelectors++;\\n                }\\n            }\\n        }\\n        bytes memory returnBytes = new bytes(4 * numFacetSelectors);\\n        uint bytePosition;\\n        for(uint i; i < numFacetSelectors; i++) {\\n            for(uint j; j < 4; j++) {\\n                returnBytes[bytePosition] = byte(facetSelectors[i] << j * 8);\\n                bytePosition++;\\n            }\\n        }\\n        return returnBytes;\\n    }\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return A byte array of tightly packed facet addresses.\\n    /// Example return value:\\n    /// return abi.encodePacked(facet1, facet2, facet3, ...)\\n    function facetAddresses() external view override returns(bytes memory) {\\n        DiamondStorage storage ds = diamondStorage();\\n        uint totalSelectorSlots = ds.selectorSlotsLength;\\n        uint totalSelectors = uint128(totalSelectorSlots) * 8 + uint128(totalSelectorSlots >> 128);\\n        \\n        address[] memory facets_ = new address[](totalSelectors);\\n        uint numFacets;\\n        uint selectorCount;\\n        // loop through function selectors\\n        for(uint slotIndex; selectorCount < totalSelectors; slotIndex++) {\\n            bytes32 slot = ds.selectorSlots[slotIndex];\\n            for(uint selectorIndex; selectorIndex < 8; selectorIndex++) {\\n                selectorCount++;\\n                if(selectorCount > totalSelectors) {\\n                    break;\\n                }\\n                bytes4 selector = bytes4(slot << selectorIndex * 32);\\n                address facet = address(bytes20(ds.facets[selector]));\\n                bool continueLoop = false;\\n                for(uint facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if(facet == facets_[facetIndex]) {\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n                if(continueLoop) {\\n                    continueLoop = false;\\n                    continue;\\n                }\\n                facets_[numFacets] = facet;\\n                numFacets++;\\n            }\\n        }\\n\\n        bytes memory returnBytes = new bytes(20 * numFacets);\\n        uint bytePosition;\\n        for(uint i; i < numFacets; i++) {\\n            for(uint j; j < 20; j++) {\\n                returnBytes[bytePosition] = byte(bytes20(facets_[i]) << j * 8);\\n                bytePosition++;\\n            }\\n        }\\n        return returnBytes;\\n    }\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view override returns(address) {\\n        DiamondStorage storage ds = diamondStorage();\\n        return address(bytes20(ds.facets[_functionSelector]));\\n    }\\n}\",\"keccak256\":\"0x6f5bd7577144881eb6ff97c65ba12d1d7787f48ecdc0f935a2eb6a97766e1e27\",\"license\":\"MIT\"},\"solc_0.7/diamond/DiamondStorageContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ncontract DiamondStorageContract {\\n\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n\\n        // owner of the contract\\n        address contractOwner;\\n\\n        // maps function selectors to the facets that execute the functions.\\n        // and maps the selectors to the slot in the selectorSlots array.\\n        // and maps the selectors to the position in the slot.\\n        // func selector => address facet, uint32 slotIndex, uint64 slotsIndex\\n        mapping(bytes4 => bytes32) facets;\\n\\n        // array of slots of function selectors.\\n        // each slot holds 8 function selectors.\\n        mapping(uint => bytes32) selectorSlots;\\n\\n        // uint32 selectorSlotLength, uint32 selectorSlotsLength\\n        // selectorSlotsLength is the number of 32-byte slots in selectorSlots.\\n        // selectorSlotLength is the number of selectors in the last slot of\\n        // selectorSlots.\\n        uint selectorSlotsLength;\\n\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n\\n    function diamondStorage() internal pure returns(DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly { ds.slot := position }\\n    }\\n}\\n\",\"keccak256\":\"0x4c77113ad1740fc0908f76aa79bc4a2b5a593cbb09502775435fc6aa9bacd565\",\"license\":\"MIT\"},\"solc_0.7/diamond/OwnershipFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./DiamondStorageContract.sol\\\";\\nimport \\\"./DiamondHeaders.sol\\\";\\n\\ncontract OwnershipFacet is IERC173, DiamondStorageContract {\\n    function transferOwnership(address newOwner) external override {\\n        DiamondStorage storage ds = diamondStorage();\\n        address currentOwner = ds.contractOwner;\\n        require(msg.sender == currentOwner, \\\"Must own the contract.\\\");\\n        ds.contractOwner = newOwner;\\n        emit OwnershipTransferred(currentOwner, newOwner);\\n    }\\n\\n    function owner() external override view returns (address) {\\n        DiamondStorage storage ds = diamondStorage();\\n        return ds.contractOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x13425d453c322c8807af9ecbb3de11b3d3779076c3da6b2dfa4d88b321824d25\",\"license\":\"MIT\"}},\"version\":1}",
  "contractFilepath": "solc_0.7/diamond/Diamantaire.sol"
}