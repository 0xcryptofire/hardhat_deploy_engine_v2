{
  "contractName": "Diamantaire",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract Diamond",
          "name": "diamond",
          "type": "address"
        }
      ],
      "name": "DiamondCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes[]",
          "name": "_diamondCut",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "createDiamond",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "bytecode": "0x608060405234801561001057600080fd5b5061313f806100206000396000f3fe608060405260043610620000205760003560e01c8063761bdc6a1462000025575b600080fd5b6200003c620000363660046200022f565b6200003e565b005b600034306040516200005090620001d7565b6200005c91906200035f565b6040518091039082f09050801580156200007a573d6000803e3d6000fd5b5090507f644ca5b0a8b0418e9faf3880659eeb84eaad45ad838b0173808e5ca72f5efc4981604051620000ae91906200035f565b60405180910390a16040517f7c696fea00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821690637c696fea906200011390889088906000908990899060040162000380565b600060405180830381600087803b1580156200012e57600080fd5b505af115801562000143573d6000803e3d6000fd5b50506040517ff2fde38b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416925063f2fde38b91506200019b9089906004016200035f565b600060405180830381600087803b158015620001b657600080fd5b505af1158015620001cb573d6000803e3d6000fd5b50505050505050505050565b612c8b806200047f83390190565b60008083601f840112620001f7578182fd5b50813567ffffffffffffffff8111156200020f578182fd5b6020830191508360208285010111156200022857600080fd5b9250929050565b60008060008060006060868803121562000247578081fd5b853573ffffffffffffffffffffffffffffffffffffffff811681146200026b578182fd5b9450602086013567ffffffffffffffff8082111562000288578283fd5b818801915088601f8301126200029c578283fd5b813581811115620002ab578384fd5b8960208083028501011115620002bf578384fd5b602083019650809550506040880135915080821115620002dd578283fd5b50620002ec88828901620001e5565b969995985093965092949392505050565b73ffffffffffffffffffffffffffffffffffffffff169052565b600082845282826020860137806020848601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011685010190509392505050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b606080825281018590526000602060808084019082890285010189845b8a8110156200044b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8087840301845281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18d3603018112620003ff578687fd5b8c01803567ffffffffffffffff81111562000418578788fd5b8036038e131562000427578788fd5b62000436858289850162000317565b9587019594505050908401906001016200039d565b50506200045b83860189620002fd565b84810360408601526200047081878962000317565b9a995050505050505050505056fe608060405260405162002c8b38038062002c8b8339810160408190526200002691620007df565b60006200003d6200026260201b620000991760201c565b80546001600160a01b0319166001600160a01b0384169081178255604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36000604051620000979062000787565b604051809103906000f080158015620000b4573d6000803e3d6000fd5b5090506000604051620000c79062000795565b604051809103906000f080158015620000e4573d6000803e3d6000fd5b5060408051600280825260608281019093529293509091816020015b60608152602001906001900390816200010057505060405190915062000161908490633e34b7f560e11b906356fe50af60e11b90637a0ed62760e01b906366ffd66360e11b906314bbdacb60e21b906301ffc9a760e01b906020016200085d565b604051602081830303815290604052816000815181106200017e57fe5b60200260200101819052508163f2fde38b60e01b638da5cb5b60e01b604051602001620001ae93929190620008aa565b60405160208183030381529060405281600181518110620001cb57fe5b6020026020010181905250620001ec816200028660201b620000bd1760201c565b50506301ffc9a760e01b60009081526004909201602052506040808220805460ff199081166001908117909255633e34b7f560e11b845282842080548216831790556348e2b09360e01b845282842080548216831790556307f5828d60e41b845291909220805490911690911790555062000a2a565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b60006200029d6200026260201b620000991760201c565b9050620002a9620007a3565b600382015480825260088104906007168015620002d85760008281526002850160205260409081902054908401525b60005b8551811015620006e6576060868281518110620002f457fe5b6020026020010151905060148151116200032b5760405162461bcd60e51b8152600401620003229062000963565b60405180910390fd5b602081015181516001600160601b031982169060046013199091010460348215620004c55760005b82811015620004be57858201516001600160e01b03198116600090815260018d01602052604090205460049093019280620004595760018c60c00190151590811515815250508a60001b60408b60001b901b8717178d6001016000846001600160e01b0319166001600160e01b03191681526020019081526020016000208190555089602002826001600160e01b031916901c8a6020026001600160e01b031960001b901c198d6040015116178c604001818152505089806001019a5050896008141562000453578b604001518d60020160008d8152602001908152602001600020819055506000801b8c6040018181525050600099508a806001019b50505b620004b3565b6001600160601b03198181169087161415620004895760405162461bcd60e51b81526004016200032290620009f3565b6001600160e01b03198216600090815260018e01602052604090206001600160601b038216871790555b505060010162000353565b50620006d4565b600160c08a015260005b82811015620006d257858201516001600160e01b03198116600090815260018d016020526040902054600490930192806200051e5760405162461bcd60e51b81526004016200032290620009ae565b60408c01516200054b57600019909a01600081815260028e0160205260409081902054908d015299600899505b6001600160401b03811660608d01819052604082811c63ffffffff1660808f01528d01516000198c016020021b908c1462000610578d60020160008e606001518152602001908152602001600020548d60a00181815250508c60800151602002816001600160e01b031916901c8d608001516020026001600160e01b031960001b901c198e60a0015116178d60a00181815250508c60a001518e60020160008f606001518152602001908152602001600020819055508a80600190039b505062000642565b60808d015160408e0180516001600160e01b0319848116602090940293841c931c19169190911790526000199a909a01995b8a620006605760008c815260028f0160205260408082208290558e01525b6001600160e01b031981811690841614620006aa576001600160e01b03198116600090815260018f016020526040902080546001600160601b0319166001600160601b0384161790555b50506001600160e01b03191660009081526001808d01602052604082209190915501620004cf565b505b505060019093019250620002db915050565b50600882028101602084018190528351146200070757602083015160038501555b8260c001518015620007195750600081115b15620007375760408084015160008481526002870160205291909120555b60408051600080825260208201928390527f8819f27db4d71c7d1006e0c686e12ce5b6d6835b3e06b43d52c9adda9168366c926200077892899291620008d9565b60405180910390a15050505050565b61177280620012d083390190565b6102498062002a4283390190565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b600060208284031215620007f1578081fd5b81516001600160a01b038116811462000808578182fd5b9392505050565b60008151808452815b81811015620008365760208185018101518683018201520162000818565b81811115620008485782602083870101525b50601f01601f19169290920160200192915050565b60609790971b6001600160601b03191687526001600160e01b031995861660148801529385166018870152918416601c8601528316602085015282166024840152166028820152602c0190565b60609390931b6001600160601b03191683526001600160e01b03199182166014840152166018820152601c0190565b60006060820160608352808651808352608085019150602092506080838202860101838901855b838110156200093257607f198884030185526200091f8383516200080f565b9486019492509085019060010162000900565b50506001600160a01b0388168685015285810360408701526200095681886200080f565b9998505050505050505050565b6020808252602b908201527f4c69624469616d6f6e643a204d697373696e67206661636574206f722073656c60408201526a32b1ba37b91034b733379760a91b606082015260800190565b60208082526025908201527f46756e6374696f6e20646f65736e27742065786973742e2043616e277420726560408201526436b7bb329760d91b606082015260800190565b6020808252601b908201527f46756e6374696f6e2063757420746f2073616d652066616365742e0000000000604082015260600190565b6108968062000a3a6000396000f3fe60806040523661000b57005b600080356001600160e01b03191681527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d60205260409020547fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90819060601c8061007557600080fd5b3660008037600080366000845af43d6000803e808015610094573d6000f35b3d6000fd5b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b60006100c7610099565b90506100d161061b565b6003820154808252600881049060071680156100ff5760008281526002850160205260409081902054908401525b60005b855181101561057f57606086828151811061011957fe5b60200260200101519050601481511161014d5760405162461bcd60e51b81526004016101449061076f565b60405180910390fd5b602081015181516bffffffffffffffffffffffff1982169060047fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec90910104603482156103495760005b8281101561034357858201516001600160e01b03198116600090815260018d016020526040902054600490930192806102d85760018c60c00190151590811515815250508a60001b60408b60001b901b8717178d6001016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000208190555089602002827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c8a6020026001600160e01b031960001b901c198d6040015116178c604001818152505089806001019a505089600814156102d3578b604001518d60020160008d8152602001908152602001600020819055506000801b8c6040018181525050600099508a806001019b50505b610339565b6bffffffffffffffffffffffff19818116908716141561030a5760405162461bcd60e51b815260040161014490610829565b6001600160e01b03198216600090815260018e01602052604090206bffffffffffffffffffffffff8216871790555b5050600101610197565b5061056e565b600160c08a015260005b8281101561056c57858201516001600160e01b03198116600090815260018d0160205260409020546004909301928061039e5760405162461bcd60e51b8152600401610144906107cc565b60408c01516103ca57600019909a01600081815260028e0160205260409081902054908d015299600899505b67ffffffffffffffff811660608d01819052604082811c63ffffffff1660808f01528d01516000198c016020021b908c146104a3578d60020160008e606001518152602001908152602001600020548d60a00181815250508c60800151602002817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c8d608001516020026001600160e01b031960001b901c198e60a0015116178d60a00181815250508c60a001518e60020160008f606001518152602001908152602001600020819055508a80600190039b50506104d5565b60808d015160408e0180516001600160e01b0319848116602090940293841c931c19169190911790526000199a909a01995b8a6104f25760008c815260028f0160205260408082208290558e01525b6001600160e01b031981811690841614610545576001600160e01b03198116600090815260018f016020526040902080546bffffffffffffffffffffffff19166bffffffffffffffffffffffff84161790555b50506001600160e01b03191660009081526001808d01602052604082209190915501610353565b505b505060019093019250610102915050565b506008820281016020840181905283511461059f57602083015160038501555b8260c0015180156105b05750600081115b156105cd5760408084015160008481526002870160205291909120555b60408051600080825260208201928390527f8819f27db4d71c7d1006e0c686e12ce5b6d6835b3e06b43d52c9adda9168366c9261060c928992916106c0565b60405180910390a15050505050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b60008151808452815b8181101561067c57602081850181015186830182015201610660565b8181111561068d5782602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60006060820160608352808651808352608085019150602092506080838202860101838901855b83811015610733577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80888403018552610721838351610657565b948601949250908501906001016106e7565b505073ffffffffffffffffffffffffffffffffffffffff88168487015285810360408701526107628188610657565b9998505050505050505050565b6020808252602b908201527f4c69624469616d6f6e643a204d697373696e67206661636574206f722073656c60408201527f6563746f7220696e666f2e000000000000000000000000000000000000000000606082015260800190565b60208082526025908201527f46756e6374696f6e20646f65736e27742065786973742e2043616e277420726560408201527f6d6f76652e000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f46756e6374696f6e2063757420746f2073616d652066616365742e000000000060408201526060019056fea26469706673582212201aecfe6d38fc5d48f39b0e768638cec0a155d6a7568c180e73c4ef3f0d9ef52c64736f6c63430007010033608060405234801561001057600080fd5b50611752806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80637c696fea116100505780637c696fea146100ca578063adfca15e146100df578063cdffacc6146100ff57610072565b806301ffc9a71461007757806352ef6b2c146100a05780637a0ed627146100b5575b600080fd5b61008a6100853660046111fc565b61011f565b60405161009791906114ae565b60405180910390f35b6100a8610152565b60405161009791906112e1565b6100bd6102b4565b6040516100979190611416565b6100dd6100d8366004611129565b61088b565b005b6100f26100ed366004611107565b6109e4565b604051610097919061132e565b61011261010d3660046111fc565b610aff565b60405161009791906112cd565b60008061012a610b32565b6001600160e01b0319841660009081526004909101602052604090205460ff16915050919050565b6060600061015e610b32565b60038101549091508067ffffffffffffffff8111801561017d57600080fd5b506040519080825280602002602001820160405280156101a7578160200160208202803683370190505b50925060008060005b838210156102a9576000818152600286016020526040812054905b600881101561029f57600190930192858411156101e75761029f565b6001600160e01b0319602080830284901b918216600090815260018a01909152604081205460601c90805b88811015610258578b818151811061022657fe5b60200260200101516001600160a01b0316836001600160a01b031614156102505760019150610258565b600101610212565b5080156102685750610297915050565b818b898151811061027557fe5b6001600160a01b03909216602092830291909101909101525050600190950194505b6001016101cb565b50506001016101b0565b508185525050505090565b606060006102c0610b32565b90506102ca61107c565b600382015460208201819052808252601410156102e657601481525b805167ffffffffffffffff811180156102fe57600080fd5b5060405190808252806020026020018201604052801561033857816020015b610325611096565b81526020019060019003908161031d5790505b5092506060816000015167ffffffffffffffff8111801561035857600080fd5b50604051908082528060200260200182016040528015610382578160200160208202803683370190505b50905060008060005b846020015182101561082f576000818152600287016020526040812054905b60088110156108255760208701516001909401938411156103ca57610825565b6001600160e01b0319602080830284901b918216600090815260018b01909152604081205460601c90805b888110156105ee57826001600160a01b03168d828151811061041357fe5b6020026020010151600001516001600160a01b031614156105e65760008d828151811061043c57fe5b602002602001015160200151519050808b838151811061045857fe5b602002602001015160010160ff161115610538578b51606090820167ffffffffffffffff8111801561048957600080fd5b506040519080825280602002602001820160405280156104b3578160200160208202803683370190505b50905060005b82811015610519578f84815181106104cd57fe5b60200260200101516020015181815181106104e457fe5b60200260200101518282815181106104f857fe5b6001600160e01b0319909216602092830291909101909101526001016104b9565b50808f848151811061052757fe5b602002602001015160200181905250505b848e838151811061054557fe5b6020026020010151602001518c848151811061055d57fe5b602002602001015160ff168151811061057257fe5b60200260200101906001600160e01b03191690816001600160e01b0319168152505060ff8b83815181106105a257fe5b602002602001015160ff16106105b757600080fd5b8a82815181106105c357fe5b60200260200101805180919060010160ff1660ff168152505060019250506105ee565b6001016103f5565b5080156105fe575061081d915050565b8b5160018901811015610728578a51606090820167ffffffffffffffff8111801561062857600080fd5b5060405190808252806020026020018201604052801561066257816020015b61064f611096565b8152602001906001900390816106475790505b50905060608c60000151830167ffffffffffffffff8111801561068457600080fd5b506040519080825280602002602001820160405280156106ae578160200160208202803683370190505b50905060005b83811015610721578f81815181106106c857fe5b60200260200101518382815181106106dc57fe5b60200260200101819052508c81815181106106f357fe5b602002602001015182828151811061070757fe5b60ff909216602092830291909101909101526001016106b4565b50909d5099505b828d8a8151811061073557fe5b60209081029190910101516001600160a01b0390911690528a5167ffffffffffffffff8111801561076557600080fd5b5060405190808252806020026020018201604052801561078f578160200160208202803683370190505b508d8a8151811061079c57fe5b602002602001015160200181905250838d8a815181106107b857fe5b6020026020010151602001516000815181106107d057fe5b60200260200101906001600160e01b03191690816001600160e01b0319168152505060018a8a8151811061080057fe5b60ff90921660209283029190910190910152505060019096019550505b6001016103aa565b505060010161038b565b5060005b8281101561087f57600084828151811061084957fe5b602002602001015160ff169050606088838151811061086457fe5b60209081029190910181015101519190915250600101610833565b50818652505050505090565b6108958585610b56565b7f8819f27db4d71c7d1006e0c686e12ce5b6d6835b3e06b43d52c9adda9168366c85858585856040516108cc959493929190611341565b60405180910390a180156109b65760006001600160a01b038416156108f157836108f3565b305b9050803b8061091d5760405162461bcd60e51b81526004016109149061154d565b60405180910390fd5b60006060836001600160a01b0316868660405161093b9291906112bd565b600060405180830381855af49150503d8060008114610976576040519150601f19603f3d011682016040523d82523d6000602084013e61097b565b606091505b5091509150816109ad578051156109955780518082602001fd5b60405162461bcd60e51b8152600401610914906114f0565b505050506109dd565b6001600160a01b038316156109dd5760405162461bcd60e51b815260040161091490611607565b5050505050565b606060006109f0610b32565b600381015490915060008167ffffffffffffffff81118015610a1157600080fd5b50604051908082528060200260200182016040528015610a3b578160200160208202803683370190505b5093506000805b83821015610af3576000818152600286016020526040812054905b6008811015610ae95760019093019285841115610a7957610ae9565b6001600160e01b0319602080830284901b918216600090815260018a01909152604090205460601c6001600160a01b038b16811415610adf57818a8881518110610abf57fe5b6001600160e01b0319909216602092830291909101909101526001909601955b5050600101610a5d565b5050600101610a42565b50508352509092915050565b600080610b0a610b32565b6001600160e01b0319841660009081526001909101602052604090205460601c915050919050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b6000610b60610b32565b80549091506001600160a01b03163314610b8c5760405162461bcd60e51b8152600401610914906114b9565b610b946110ae565b600382015480825260088104906007168015610bc25760008281526002850160205260409081902054908401525b60005b85811015611026576060878783818110610bdb57fe5b9050602002810190610bed91906116d0565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505082519293505060149091119050610c485760405162461bcd60e51b8152600401610914906115aa565b602081015181516bffffffffffffffffffffffff1982169060047fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec9091010460348215610e055760005b82811015610dff57858201516001600160e01b03198116600090815260018d01602052604090205460049093019280610d945760018c60c00190151590811515815250508a60001b60408b60001b901b8717178d6001016000846001600160e01b0319166001600160e01b03191681526020019081526020016000208190555089602002826001600160e01b031916901c8a6020026001600160e01b031960001b901c198d6040015116178c604001818152505089806001019a50508960081415610d8f578b604001518d60020160008d8152602001908152602001600020819055506000801b8c6040018181525050600099508a806001019b50505b610df5565b6bffffffffffffffffffffffff198181169087161415610dc65760405162461bcd60e51b815260040161091490611699565b6001600160e01b03198216600090815260018e01602052604090206bffffffffffffffffffffffff8216871790555b5050600101610c92565b50611015565b600160c08a015260005b8281101561101357858201516001600160e01b03198116600090815260018d01602052604090205460049093019280610e5a5760405162461bcd60e51b81526004016109149061163c565b60408c0151610e8657600019909a01600081815260028e0160205260409081902054908d015299600899505b67ffffffffffffffff811660608d01819052604082811c63ffffffff1660808f01528d01516000198c016020021b908c14610f4a578d60020160008e606001518152602001908152602001600020548d60a00181815250508c60800151602002816001600160e01b031916901c8d608001516020026001600160e01b031960001b901c198e60a0015116178d60a00181815250508c60a001518e60020160008f606001518152602001908152602001600020819055508a80600190039b5050610f7c565b60808d015160408e0180516001600160e01b0319848116602090940293841c931c19169190911790526000199a909a01995b8a610f995760008c815260028f0160205260408082208290558e01525b6001600160e01b031981811690841614610fec576001600160e01b03198116600090815260018f016020526040902080546bffffffffffffffffffffffff19166bffffffffffffffffffffffff84161790555b50506001600160e01b03191660009081526001808d01602052604082209190915501610e0f565b505b505060019093019250610bc5915050565b506008820281016020840181905283511461104657602083015160038501555b8260c0015180156110575750600081115b156110745760408084015160008481526002870160205291909120555b505050505050565b604051806040016040528060008152602001600081525090565b60408051808201909152600081526060602082015290565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b80356001600160a01b038116811461110157600080fd5b92915050565b600060208284031215611118578081fd5b61112283836110ea565b9392505050565b600080600080600060608688031215611140578081fd5b853567ffffffffffffffff80821115611157578283fd5b818801915088601f83011261116a578283fd5b813581811115611178578384fd5b60208a81828402860101111561118c578485fd5b80840198508197506111a08b828c016110ea565b965060408a01359350828411156111b5578485fd5b838a0193508a601f8501126111c8578485fd5b83359150828211156111d8578485fd5b8a818386010111156111e8578485fd5b979a96995094975050909401935090919050565b60006020828403121561120d578081fd5b81356001600160e01b031981168114611122578182fd5b6001600160a01b03169052565b6000815180845260208085019450808401835b8381101561126a5781516001600160e01b03191687529582019590820190600101611244565b509495945050505050565b600082845282826020860137806020848601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011685010190509392505050565b6000828483379101908152919050565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b818110156113225783516001600160a01b0316835292840192918401916001016112fd565b50909695505050505050565b6000602082526111226020830184611231565b606080825281018590526000602060808084019082890285010189845b8a8110156113e7577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808784030184528135601e198d36030181126113a0578687fd5b8c01803567ffffffffffffffff8111156113b8578788fd5b8036038e13156113c6578788fd5b6113d38582898501611275565b95870195945050509084019060010161135e565b50506113f583860189611224565b8481036040860152611408818789611275565b9a9950505050505050505050565b60208082528251828201819052600091906040908185019080840286018301878501865b838110156114a0578883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0018552815180516001600160a01b0316845287015187840187905261148d87850182611231565b958801959350509086019060010161143a565b509098975050505050505050565b901515815260200190565b60208082526016908201527f4d757374206f776e2074686520636f6e74726163742e00000000000000000000604082015260600190565b60208082526025908201527f4469616d6f6e6446616365743a205f696e69742066756e6374696f6e2072657660408201527f6572746564000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526027908201527f4469616d6f6e6446616365743a205f696e69742061646472657373206861732060408201527f6e6f20636f646500000000000000000000000000000000000000000000000000606082015260800190565b6020808252602b908201527f4c69624469616d6f6e643a204d697373696e67206661636574206f722073656c60408201527f6563746f7220696e666f2e000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4469616d6f6e6446616365743a205f63616c6c6461746120697320656d707479604082015260600190565b60208082526025908201527f46756e6374696f6e20646f65736e27742065786973742e2043616e277420726560408201527f6d6f76652e000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f46756e6374696f6e2063757420746f2073616d652066616365742e0000000000604082015260600190565b6000808335601e198436030181126116e6578283fd5b83018035915067ffffffffffffffff821115611700578283fd5b60200191503681900382131561171557600080fd5b925092905056fea2646970667358221220248558ddcf9095dcf5a786e1650c38d09af36ec94552222a3f0802fb8aa1b66364736f6c63430007010033608060405234801561001057600080fd5b50610229806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80638da5cb5b1461003b578063f2fde38b1461006c575b600080fd5b6100436100a1565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61009f6004803603602081101561008257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166100c9565b005b6000806100ac6101cf565b5473ffffffffffffffffffffffffffffffffffffffff1691505090565b60006100d36101cf565b805490915073ffffffffffffffffffffffffffffffffffffffff1633811461015c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d757374206f776e2074686520636f6e74726163742e00000000000000000000604482015290519081900360640190fd5b81547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8481169182178455604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c9056fea26469706673582212208d536c5d820283a3b0f60fedbb90b06debf185072f1f4d0ba24549203a0ecbdf64736f6c63430007010033a2646970667358221220da7ceef30604554edc789c794a27b1c0b460ec5ee1c1d042b999193cc9a8799164736f6c63430007010033",
  "deployedBytecode": "0x608060405260043610620000205760003560e01c8063761bdc6a1462000025575b600080fd5b6200003c620000363660046200022f565b6200003e565b005b600034306040516200005090620001d7565b6200005c91906200035f565b6040518091039082f09050801580156200007a573d6000803e3d6000fd5b5090507f644ca5b0a8b0418e9faf3880659eeb84eaad45ad838b0173808e5ca72f5efc4981604051620000ae91906200035f565b60405180910390a16040517f7c696fea00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821690637c696fea906200011390889088906000908990899060040162000380565b600060405180830381600087803b1580156200012e57600080fd5b505af115801562000143573d6000803e3d6000fd5b50506040517ff2fde38b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416925063f2fde38b91506200019b9089906004016200035f565b600060405180830381600087803b158015620001b657600080fd5b505af1158015620001cb573d6000803e3d6000fd5b50505050505050505050565b612c8b806200047f83390190565b60008083601f840112620001f7578182fd5b50813567ffffffffffffffff8111156200020f578182fd5b6020830191508360208285010111156200022857600080fd5b9250929050565b60008060008060006060868803121562000247578081fd5b853573ffffffffffffffffffffffffffffffffffffffff811681146200026b578182fd5b9450602086013567ffffffffffffffff8082111562000288578283fd5b818801915088601f8301126200029c578283fd5b813581811115620002ab578384fd5b8960208083028501011115620002bf578384fd5b602083019650809550506040880135915080821115620002dd578283fd5b50620002ec88828901620001e5565b969995985093965092949392505050565b73ffffffffffffffffffffffffffffffffffffffff169052565b600082845282826020860137806020848601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011685010190509392505050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b606080825281018590526000602060808084019082890285010189845b8a8110156200044b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8087840301845281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18d3603018112620003ff578687fd5b8c01803567ffffffffffffffff81111562000418578788fd5b8036038e131562000427578788fd5b62000436858289850162000317565b9587019594505050908401906001016200039d565b50506200045b83860189620002fd565b84810360408601526200047081878962000317565b9a995050505050505050505056fe608060405260405162002c8b38038062002c8b8339810160408190526200002691620007df565b60006200003d6200026260201b620000991760201c565b80546001600160a01b0319166001600160a01b0384169081178255604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36000604051620000979062000787565b604051809103906000f080158015620000b4573d6000803e3d6000fd5b5090506000604051620000c79062000795565b604051809103906000f080158015620000e4573d6000803e3d6000fd5b5060408051600280825260608281019093529293509091816020015b60608152602001906001900390816200010057505060405190915062000161908490633e34b7f560e11b906356fe50af60e11b90637a0ed62760e01b906366ffd66360e11b906314bbdacb60e21b906301ffc9a760e01b906020016200085d565b604051602081830303815290604052816000815181106200017e57fe5b60200260200101819052508163f2fde38b60e01b638da5cb5b60e01b604051602001620001ae93929190620008aa565b60405160208183030381529060405281600181518110620001cb57fe5b6020026020010181905250620001ec816200028660201b620000bd1760201c565b50506301ffc9a760e01b60009081526004909201602052506040808220805460ff199081166001908117909255633e34b7f560e11b845282842080548216831790556348e2b09360e01b845282842080548216831790556307f5828d60e41b845291909220805490911690911790555062000a2a565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b60006200029d6200026260201b620000991760201c565b9050620002a9620007a3565b600382015480825260088104906007168015620002d85760008281526002850160205260409081902054908401525b60005b8551811015620006e6576060868281518110620002f457fe5b6020026020010151905060148151116200032b5760405162461bcd60e51b8152600401620003229062000963565b60405180910390fd5b602081015181516001600160601b031982169060046013199091010460348215620004c55760005b82811015620004be57858201516001600160e01b03198116600090815260018d01602052604090205460049093019280620004595760018c60c00190151590811515815250508a60001b60408b60001b901b8717178d6001016000846001600160e01b0319166001600160e01b03191681526020019081526020016000208190555089602002826001600160e01b031916901c8a6020026001600160e01b031960001b901c198d6040015116178c604001818152505089806001019a5050896008141562000453578b604001518d60020160008d8152602001908152602001600020819055506000801b8c6040018181525050600099508a806001019b50505b620004b3565b6001600160601b03198181169087161415620004895760405162461bcd60e51b81526004016200032290620009f3565b6001600160e01b03198216600090815260018e01602052604090206001600160601b038216871790555b505060010162000353565b50620006d4565b600160c08a015260005b82811015620006d257858201516001600160e01b03198116600090815260018d016020526040902054600490930192806200051e5760405162461bcd60e51b81526004016200032290620009ae565b60408c01516200054b57600019909a01600081815260028e0160205260409081902054908d015299600899505b6001600160401b03811660608d01819052604082811c63ffffffff1660808f01528d01516000198c016020021b908c1462000610578d60020160008e606001518152602001908152602001600020548d60a00181815250508c60800151602002816001600160e01b031916901c8d608001516020026001600160e01b031960001b901c198e60a0015116178d60a00181815250508c60a001518e60020160008f606001518152602001908152602001600020819055508a80600190039b505062000642565b60808d015160408e0180516001600160e01b0319848116602090940293841c931c19169190911790526000199a909a01995b8a620006605760008c815260028f0160205260408082208290558e01525b6001600160e01b031981811690841614620006aa576001600160e01b03198116600090815260018f016020526040902080546001600160601b0319166001600160601b0384161790555b50506001600160e01b03191660009081526001808d01602052604082209190915501620004cf565b505b505060019093019250620002db915050565b50600882028101602084018190528351146200070757602083015160038501555b8260c001518015620007195750600081115b15620007375760408084015160008481526002870160205291909120555b60408051600080825260208201928390527f8819f27db4d71c7d1006e0c686e12ce5b6d6835b3e06b43d52c9adda9168366c926200077892899291620008d9565b60405180910390a15050505050565b61177280620012d083390190565b6102498062002a4283390190565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b600060208284031215620007f1578081fd5b81516001600160a01b038116811462000808578182fd5b9392505050565b60008151808452815b81811015620008365760208185018101518683018201520162000818565b81811115620008485782602083870101525b50601f01601f19169290920160200192915050565b60609790971b6001600160601b03191687526001600160e01b031995861660148801529385166018870152918416601c8601528316602085015282166024840152166028820152602c0190565b60609390931b6001600160601b03191683526001600160e01b03199182166014840152166018820152601c0190565b60006060820160608352808651808352608085019150602092506080838202860101838901855b838110156200093257607f198884030185526200091f8383516200080f565b9486019492509085019060010162000900565b50506001600160a01b0388168685015285810360408701526200095681886200080f565b9998505050505050505050565b6020808252602b908201527f4c69624469616d6f6e643a204d697373696e67206661636574206f722073656c60408201526a32b1ba37b91034b733379760a91b606082015260800190565b60208082526025908201527f46756e6374696f6e20646f65736e27742065786973742e2043616e277420726560408201526436b7bb329760d91b606082015260800190565b6020808252601b908201527f46756e6374696f6e2063757420746f2073616d652066616365742e0000000000604082015260600190565b6108968062000a3a6000396000f3fe60806040523661000b57005b600080356001600160e01b03191681527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d60205260409020547fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90819060601c8061007557600080fd5b3660008037600080366000845af43d6000803e808015610094573d6000f35b3d6000fd5b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b60006100c7610099565b90506100d161061b565b6003820154808252600881049060071680156100ff5760008281526002850160205260409081902054908401525b60005b855181101561057f57606086828151811061011957fe5b60200260200101519050601481511161014d5760405162461bcd60e51b81526004016101449061076f565b60405180910390fd5b602081015181516bffffffffffffffffffffffff1982169060047fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec90910104603482156103495760005b8281101561034357858201516001600160e01b03198116600090815260018d016020526040902054600490930192806102d85760018c60c00190151590811515815250508a60001b60408b60001b901b8717178d6001016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000208190555089602002827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c8a6020026001600160e01b031960001b901c198d6040015116178c604001818152505089806001019a505089600814156102d3578b604001518d60020160008d8152602001908152602001600020819055506000801b8c6040018181525050600099508a806001019b50505b610339565b6bffffffffffffffffffffffff19818116908716141561030a5760405162461bcd60e51b815260040161014490610829565b6001600160e01b03198216600090815260018e01602052604090206bffffffffffffffffffffffff8216871790555b5050600101610197565b5061056e565b600160c08a015260005b8281101561056c57858201516001600160e01b03198116600090815260018d0160205260409020546004909301928061039e5760405162461bcd60e51b8152600401610144906107cc565b60408c01516103ca57600019909a01600081815260028e0160205260409081902054908d015299600899505b67ffffffffffffffff811660608d01819052604082811c63ffffffff1660808f01528d01516000198c016020021b908c146104a3578d60020160008e606001518152602001908152602001600020548d60a00181815250508c60800151602002817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c8d608001516020026001600160e01b031960001b901c198e60a0015116178d60a00181815250508c60a001518e60020160008f606001518152602001908152602001600020819055508a80600190039b50506104d5565b60808d015160408e0180516001600160e01b0319848116602090940293841c931c19169190911790526000199a909a01995b8a6104f25760008c815260028f0160205260408082208290558e01525b6001600160e01b031981811690841614610545576001600160e01b03198116600090815260018f016020526040902080546bffffffffffffffffffffffff19166bffffffffffffffffffffffff84161790555b50506001600160e01b03191660009081526001808d01602052604082209190915501610353565b505b505060019093019250610102915050565b506008820281016020840181905283511461059f57602083015160038501555b8260c0015180156105b05750600081115b156105cd5760408084015160008481526002870160205291909120555b60408051600080825260208201928390527f8819f27db4d71c7d1006e0c686e12ce5b6d6835b3e06b43d52c9adda9168366c9261060c928992916106c0565b60405180910390a15050505050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b60008151808452815b8181101561067c57602081850181015186830182015201610660565b8181111561068d5782602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60006060820160608352808651808352608085019150602092506080838202860101838901855b83811015610733577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80888403018552610721838351610657565b948601949250908501906001016106e7565b505073ffffffffffffffffffffffffffffffffffffffff88168487015285810360408701526107628188610657565b9998505050505050505050565b6020808252602b908201527f4c69624469616d6f6e643a204d697373696e67206661636574206f722073656c60408201527f6563746f7220696e666f2e000000000000000000000000000000000000000000606082015260800190565b60208082526025908201527f46756e6374696f6e20646f65736e27742065786973742e2043616e277420726560408201527f6d6f76652e000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f46756e6374696f6e2063757420746f2073616d652066616365742e000000000060408201526060019056fea26469706673582212201aecfe6d38fc5d48f39b0e768638cec0a155d6a7568c180e73c4ef3f0d9ef52c64736f6c63430007010033608060405234801561001057600080fd5b50611752806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80637c696fea116100505780637c696fea146100ca578063adfca15e146100df578063cdffacc6146100ff57610072565b806301ffc9a71461007757806352ef6b2c146100a05780637a0ed627146100b5575b600080fd5b61008a6100853660046111fc565b61011f565b60405161009791906114ae565b60405180910390f35b6100a8610152565b60405161009791906112e1565b6100bd6102b4565b6040516100979190611416565b6100dd6100d8366004611129565b61088b565b005b6100f26100ed366004611107565b6109e4565b604051610097919061132e565b61011261010d3660046111fc565b610aff565b60405161009791906112cd565b60008061012a610b32565b6001600160e01b0319841660009081526004909101602052604090205460ff16915050919050565b6060600061015e610b32565b60038101549091508067ffffffffffffffff8111801561017d57600080fd5b506040519080825280602002602001820160405280156101a7578160200160208202803683370190505b50925060008060005b838210156102a9576000818152600286016020526040812054905b600881101561029f57600190930192858411156101e75761029f565b6001600160e01b0319602080830284901b918216600090815260018a01909152604081205460601c90805b88811015610258578b818151811061022657fe5b60200260200101516001600160a01b0316836001600160a01b031614156102505760019150610258565b600101610212565b5080156102685750610297915050565b818b898151811061027557fe5b6001600160a01b03909216602092830291909101909101525050600190950194505b6001016101cb565b50506001016101b0565b508185525050505090565b606060006102c0610b32565b90506102ca61107c565b600382015460208201819052808252601410156102e657601481525b805167ffffffffffffffff811180156102fe57600080fd5b5060405190808252806020026020018201604052801561033857816020015b610325611096565b81526020019060019003908161031d5790505b5092506060816000015167ffffffffffffffff8111801561035857600080fd5b50604051908082528060200260200182016040528015610382578160200160208202803683370190505b50905060008060005b846020015182101561082f576000818152600287016020526040812054905b60088110156108255760208701516001909401938411156103ca57610825565b6001600160e01b0319602080830284901b918216600090815260018b01909152604081205460601c90805b888110156105ee57826001600160a01b03168d828151811061041357fe5b6020026020010151600001516001600160a01b031614156105e65760008d828151811061043c57fe5b602002602001015160200151519050808b838151811061045857fe5b602002602001015160010160ff161115610538578b51606090820167ffffffffffffffff8111801561048957600080fd5b506040519080825280602002602001820160405280156104b3578160200160208202803683370190505b50905060005b82811015610519578f84815181106104cd57fe5b60200260200101516020015181815181106104e457fe5b60200260200101518282815181106104f857fe5b6001600160e01b0319909216602092830291909101909101526001016104b9565b50808f848151811061052757fe5b602002602001015160200181905250505b848e838151811061054557fe5b6020026020010151602001518c848151811061055d57fe5b602002602001015160ff168151811061057257fe5b60200260200101906001600160e01b03191690816001600160e01b0319168152505060ff8b83815181106105a257fe5b602002602001015160ff16106105b757600080fd5b8a82815181106105c357fe5b60200260200101805180919060010160ff1660ff168152505060019250506105ee565b6001016103f5565b5080156105fe575061081d915050565b8b5160018901811015610728578a51606090820167ffffffffffffffff8111801561062857600080fd5b5060405190808252806020026020018201604052801561066257816020015b61064f611096565b8152602001906001900390816106475790505b50905060608c60000151830167ffffffffffffffff8111801561068457600080fd5b506040519080825280602002602001820160405280156106ae578160200160208202803683370190505b50905060005b83811015610721578f81815181106106c857fe5b60200260200101518382815181106106dc57fe5b60200260200101819052508c81815181106106f357fe5b602002602001015182828151811061070757fe5b60ff909216602092830291909101909101526001016106b4565b50909d5099505b828d8a8151811061073557fe5b60209081029190910101516001600160a01b0390911690528a5167ffffffffffffffff8111801561076557600080fd5b5060405190808252806020026020018201604052801561078f578160200160208202803683370190505b508d8a8151811061079c57fe5b602002602001015160200181905250838d8a815181106107b857fe5b6020026020010151602001516000815181106107d057fe5b60200260200101906001600160e01b03191690816001600160e01b0319168152505060018a8a8151811061080057fe5b60ff90921660209283029190910190910152505060019096019550505b6001016103aa565b505060010161038b565b5060005b8281101561087f57600084828151811061084957fe5b602002602001015160ff169050606088838151811061086457fe5b60209081029190910181015101519190915250600101610833565b50818652505050505090565b6108958585610b56565b7f8819f27db4d71c7d1006e0c686e12ce5b6d6835b3e06b43d52c9adda9168366c85858585856040516108cc959493929190611341565b60405180910390a180156109b65760006001600160a01b038416156108f157836108f3565b305b9050803b8061091d5760405162461bcd60e51b81526004016109149061154d565b60405180910390fd5b60006060836001600160a01b0316868660405161093b9291906112bd565b600060405180830381855af49150503d8060008114610976576040519150601f19603f3d011682016040523d82523d6000602084013e61097b565b606091505b5091509150816109ad578051156109955780518082602001fd5b60405162461bcd60e51b8152600401610914906114f0565b505050506109dd565b6001600160a01b038316156109dd5760405162461bcd60e51b815260040161091490611607565b5050505050565b606060006109f0610b32565b600381015490915060008167ffffffffffffffff81118015610a1157600080fd5b50604051908082528060200260200182016040528015610a3b578160200160208202803683370190505b5093506000805b83821015610af3576000818152600286016020526040812054905b6008811015610ae95760019093019285841115610a7957610ae9565b6001600160e01b0319602080830284901b918216600090815260018a01909152604090205460601c6001600160a01b038b16811415610adf57818a8881518110610abf57fe5b6001600160e01b0319909216602092830291909101909101526001909601955b5050600101610a5d565b5050600101610a42565b50508352509092915050565b600080610b0a610b32565b6001600160e01b0319841660009081526001909101602052604090205460601c915050919050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b6000610b60610b32565b80549091506001600160a01b03163314610b8c5760405162461bcd60e51b8152600401610914906114b9565b610b946110ae565b600382015480825260088104906007168015610bc25760008281526002850160205260409081902054908401525b60005b85811015611026576060878783818110610bdb57fe5b9050602002810190610bed91906116d0565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505082519293505060149091119050610c485760405162461bcd60e51b8152600401610914906115aa565b602081015181516bffffffffffffffffffffffff1982169060047fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec9091010460348215610e055760005b82811015610dff57858201516001600160e01b03198116600090815260018d01602052604090205460049093019280610d945760018c60c00190151590811515815250508a60001b60408b60001b901b8717178d6001016000846001600160e01b0319166001600160e01b03191681526020019081526020016000208190555089602002826001600160e01b031916901c8a6020026001600160e01b031960001b901c198d6040015116178c604001818152505089806001019a50508960081415610d8f578b604001518d60020160008d8152602001908152602001600020819055506000801b8c6040018181525050600099508a806001019b50505b610df5565b6bffffffffffffffffffffffff198181169087161415610dc65760405162461bcd60e51b815260040161091490611699565b6001600160e01b03198216600090815260018e01602052604090206bffffffffffffffffffffffff8216871790555b5050600101610c92565b50611015565b600160c08a015260005b8281101561101357858201516001600160e01b03198116600090815260018d01602052604090205460049093019280610e5a5760405162461bcd60e51b81526004016109149061163c565b60408c0151610e8657600019909a01600081815260028e0160205260409081902054908d015299600899505b67ffffffffffffffff811660608d01819052604082811c63ffffffff1660808f01528d01516000198c016020021b908c14610f4a578d60020160008e606001518152602001908152602001600020548d60a00181815250508c60800151602002816001600160e01b031916901c8d608001516020026001600160e01b031960001b901c198e60a0015116178d60a00181815250508c60a001518e60020160008f606001518152602001908152602001600020819055508a80600190039b5050610f7c565b60808d015160408e0180516001600160e01b0319848116602090940293841c931c19169190911790526000199a909a01995b8a610f995760008c815260028f0160205260408082208290558e01525b6001600160e01b031981811690841614610fec576001600160e01b03198116600090815260018f016020526040902080546bffffffffffffffffffffffff19166bffffffffffffffffffffffff84161790555b50506001600160e01b03191660009081526001808d01602052604082209190915501610e0f565b505b505060019093019250610bc5915050565b506008820281016020840181905283511461104657602083015160038501555b8260c0015180156110575750600081115b156110745760408084015160008481526002870160205291909120555b505050505050565b604051806040016040528060008152602001600081525090565b60408051808201909152600081526060602082015290565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b80356001600160a01b038116811461110157600080fd5b92915050565b600060208284031215611118578081fd5b61112283836110ea565b9392505050565b600080600080600060608688031215611140578081fd5b853567ffffffffffffffff80821115611157578283fd5b818801915088601f83011261116a578283fd5b813581811115611178578384fd5b60208a81828402860101111561118c578485fd5b80840198508197506111a08b828c016110ea565b965060408a01359350828411156111b5578485fd5b838a0193508a601f8501126111c8578485fd5b83359150828211156111d8578485fd5b8a818386010111156111e8578485fd5b979a96995094975050909401935090919050565b60006020828403121561120d578081fd5b81356001600160e01b031981168114611122578182fd5b6001600160a01b03169052565b6000815180845260208085019450808401835b8381101561126a5781516001600160e01b03191687529582019590820190600101611244565b509495945050505050565b600082845282826020860137806020848601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011685010190509392505050565b6000828483379101908152919050565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b818110156113225783516001600160a01b0316835292840192918401916001016112fd565b50909695505050505050565b6000602082526111226020830184611231565b606080825281018590526000602060808084019082890285010189845b8a8110156113e7577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808784030184528135601e198d36030181126113a0578687fd5b8c01803567ffffffffffffffff8111156113b8578788fd5b8036038e13156113c6578788fd5b6113d38582898501611275565b95870195945050509084019060010161135e565b50506113f583860189611224565b8481036040860152611408818789611275565b9a9950505050505050505050565b60208082528251828201819052600091906040908185019080840286018301878501865b838110156114a0578883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0018552815180516001600160a01b0316845287015187840187905261148d87850182611231565b958801959350509086019060010161143a565b509098975050505050505050565b901515815260200190565b60208082526016908201527f4d757374206f776e2074686520636f6e74726163742e00000000000000000000604082015260600190565b60208082526025908201527f4469616d6f6e6446616365743a205f696e69742066756e6374696f6e2072657660408201527f6572746564000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526027908201527f4469616d6f6e6446616365743a205f696e69742061646472657373206861732060408201527f6e6f20636f646500000000000000000000000000000000000000000000000000606082015260800190565b6020808252602b908201527f4c69624469616d6f6e643a204d697373696e67206661636574206f722073656c60408201527f6563746f7220696e666f2e000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4469616d6f6e6446616365743a205f63616c6c6461746120697320656d707479604082015260600190565b60208082526025908201527f46756e6374696f6e20646f65736e27742065786973742e2043616e277420726560408201527f6d6f76652e000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f46756e6374696f6e2063757420746f2073616d652066616365742e0000000000604082015260600190565b6000808335601e198436030181126116e6578283fd5b83018035915067ffffffffffffffff821115611700578283fd5b60200191503681900382131561171557600080fd5b925092905056fea2646970667358221220248558ddcf9095dcf5a786e1650c38d09af36ec94552222a3f0802fb8aa1b66364736f6c63430007010033608060405234801561001057600080fd5b50610229806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80638da5cb5b1461003b578063f2fde38b1461006c575b600080fd5b6100436100a1565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61009f6004803603602081101561008257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166100c9565b005b6000806100ac6101cf565b5473ffffffffffffffffffffffffffffffffffffffff1691505090565b60006100d36101cf565b805490915073ffffffffffffffffffffffffffffffffffffffff1633811461015c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d757374206f776e2074686520636f6e74726163742e00000000000000000000604482015290519081900360640190fd5b81547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8481169182178455604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c9056fea26469706673582212208d536c5d820283a3b0f60fedbb90b06debf185072f1f4d0ba24549203a0ecbdf64736f6c63430007010033a2646970667358221220da7ceef30604554edc789c794a27b1c0b460ec5ee1c1d042b999193cc9a8799164736f6c63430007010033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "metadata": "{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract Diamond\",\"name\":\"diamond\",\"type\":\"address\"}],\"name\":\"DiamondCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"_diamondCut\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"createDiamond\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solc_0.7/diamond/Diamantaire.sol\":\"Diamantaire\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"solc_0.7/diamond/Diamantaire.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/IDiamondCut.sol\\\";\\nimport \\\"./Diamond.sol\\\";\\n\\ncontract Diamantaire {\\n    event DiamondCreated(Diamond diamond);\\n\\n    function createDiamond(\\n        address owner,\\n        bytes[] calldata _diamondCut,\\n        bytes calldata data\\n    ) external payable {\\n        Diamond diamond = new Diamond{value: msg.value}(address(this));\\n        emit DiamondCreated(diamond);\\n\\n        IDiamondCut(address(diamond)).diamondCut(_diamondCut, address(0), data);\\n        IERC173(address(diamond)).transferOwnership(owner);\\n    }\\n}\\n\",\"keccak256\":\"0x3cfbe999cdff86f4ac03a0de5b175a168c81427c8923d72751b8ce71ec393e77\",\"license\":\"MIT\"},\"solc_0.7/diamond/Diamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge\\n*\\n* Implementation of an example of a diamond.\\n/******************************************************************************/\\n\\nimport \\\"./libraries/LibDiamondStorage.sol\\\";\\nimport \\\"./libraries/LibDiamond.sol\\\";\\nimport \\\"./facets/OwnershipFacet.sol\\\";\\nimport \\\"./facets/DiamondFacet.sol\\\";\\n\\ncontract Diamond {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    constructor(address owner) payable {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage\\n            .diamondStorage();\\n        ds.contractOwner = owner;\\n        emit OwnershipTransferred(address(0), owner);\\n\\n        // Create a DiamondFacet contract which implements the Diamond interface\\n        DiamondFacet diamondFacet = new DiamondFacet();\\n\\n        // Create a OwnershipFacet contract which implements the ERC-173 Ownership interface\\n        OwnershipFacet ownershipFacet = new OwnershipFacet();\\n\\n        bytes[] memory cut = new bytes[](2);\\n\\n        // Adding diamond functions\\n        cut[0] = abi.encodePacked(\\n            diamondFacet,\\n            DiamondFacet.diamondCut.selector,\\n            DiamondFacet.facetFunctionSelectors.selector,\\n            DiamondFacet.facets.selector,\\n            DiamondFacet.facetAddress.selector,\\n            DiamondFacet.facetAddresses.selector,\\n            DiamondFacet.supportsInterface.selector\\n        );\\n\\n        // Adding diamond ERC173 functions\\n        cut[1] = abi.encodePacked(\\n            ownershipFacet,\\n            OwnershipFacet.transferOwnership.selector,\\n            OwnershipFacet.owner.selector\\n        );\\n\\n        // execute non-standard internal diamondCut function to add functions\\n        LibDiamond.diamondCut(cut);\\n\\n        // adding ERC165 data\\n        // ERC165\\n        ds.supportedInterfaces[IERC165.supportsInterface.selector] = true;\\n\\n        // DiamondCut\\n        ds.supportedInterfaces[DiamondFacet.diamondCut.selector] = true;\\n\\n        // DiamondLoupe\\n        bytes4 interfaceID = IDiamondLoupe.facets.selector ^\\n            IDiamondLoupe.facetFunctionSelectors.selector ^\\n            IDiamondLoupe.facetAddresses.selector ^\\n            IDiamondLoupe.facetAddress.selector;\\n        ds.supportedInterfaces[interfaceID] = true;\\n\\n        // ERC173\\n        ds.supportedInterfaces[IERC173.transferOwnership.selector ^\\n            IERC173.owner.selector] = true;\\n    }\\n\\n    // Find facet for function that is called and execute the\\n    // function if a facet is found and return any value.\\n    fallback() external payable {\\n        LibDiamondStorage.DiamondStorage storage ds;\\n        bytes32 position = LibDiamondStorage.DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n        address facet = address(bytes20(ds.facets[msg.sig]));\\n        require(facet != address(0));\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\\n            returndatacopy(0, 0, returndatasize())\\n            switch result\\n                case 0 {\\n                    revert(0, returndatasize())\\n                }\\n                default {\\n                    return(0, returndatasize())\\n                }\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x5e2157ec65462e0a50c273b859577081fbba5e22401c317f10277f1f655ddb7e\",\"license\":\"MIT\"},\"solc_0.7/diamond/facets/DiamondFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge\\n*\\n* Implementation of DiamondLoupe interface.\\n/******************************************************************************/\\n\\nimport \\\"../libraries/LibDiamondStorage.sol\\\";\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\nimport \\\"../interfaces/IDiamondLoupe.sol\\\";\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\ncontract DiamondFacet is IDiamondCut, IDiamondLoupe, IERC165 {\\n    // Constants used by diamondCut\\n    bytes32 constant CLEAR_ADDRESS_MASK = bytes32(\\n        uint256(0xffffffffffffffffffffffff)\\n    );\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n\\n    // Standard diamondCut external function\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// This argument is tightly packed for gas efficiency\\n    /// That means no padding with zeros.\\n    /// Here is the structure of _diamondCut:\\n    /// _diamondCut = [\\n    ///     abi.encodePacked(facet, sel1, sel2, sel3, ...),\\n    ///     abi.encodePacked(facet, sel1, sel2, sel4, ...),\\n    ///     ...\\n    /// ]\\n    /// facet is the address of a facet\\n    /// sel1, sel2, sel3 etc. are four-byte function selectors.\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        bytes[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external override {\\n        externalCut(_diamondCut);\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        if (_calldata.length > 0) {\\n            address init = _init == address(0) ? address(this) : _init;\\n            // Check that init has contract code\\n            uint256 contractSize;\\n            assembly {\\n                contractSize := extcodesize(init)\\n            }\\n            require(\\n                contractSize > 0,\\n                \\\"DiamondFacet: _init address has no code\\\"\\n            );\\n            (bool success, bytes memory error) = init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    assembly {\\n                        let errorSize := mload(error)\\n                        revert(add(32, error), errorSize)\\n                    }\\n                } else {\\n                    revert(\\\"DiamondFacet: _init function reverted\\\");\\n                }\\n            }\\n        } else if (_init != address(0)) {\\n            revert(\\\"DiamondFacet: _calldata is empty\\\");\\n        }\\n    }\\n\\n    // This struct is used to prevent getting the error \\\"CompilerError: Stack too deep, try removing local variables.\\\"\\n    // See this article: https://medium.com/1milliondevs/compilererror-stack-too-deep-try-removing-local-variables-solved-a6bcecc16231\\n\\n    struct SlotInfo {\\n        uint256 originalSelectorCount;\\n        uint256 newSelectorCount;\\n        bytes32 selectorSlot;\\n        uint256 oldSelectorsSlotCount;\\n        uint256 oldSelectorsInSlot;\\n        bytes32 oldSelectorSlot;\\n        bool updateLastSlot;\\n    }\\n\\n    // diamondCut helper function\\n    // This code is almost the same as the internal diamondCut function,\\n    // except it is using 'bytes[] calldata _diamondCut' instead of\\n    // 'bytes[] memory _diamondCut', and it does not issue the DiamondCut event.\\n    // The code is duplicated to prevent copying calldata to memory which\\n    // causes an error for an array of bytes arrays.\\n    function externalCut(bytes[] calldata _diamondCut) internal {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage\\n            .diamondStorage();\\n        require(msg.sender == ds.contractOwner, \\\"Must own the contract.\\\");\\n        SlotInfo memory slot;\\n        slot.originalSelectorCount = ds.selectorCount;\\n        // Get how many 32 byte slots are used\\n        uint256 selectorSlotCount = slot.originalSelectorCount / 8;\\n        // Get how many function selectors are in the last 32 byte slot\\n        uint256 selectorsInSlot = slot.originalSelectorCount % 8;\\n        if (selectorsInSlot > 0) {\\n            slot.selectorSlot = ds.selectorSlots[selectorSlotCount];\\n        }\\n        // loop through diamond cut\\n        for (\\n            uint256 diamondCutIndex;\\n            diamondCutIndex < _diamondCut.length;\\n            diamondCutIndex++\\n        ) {\\n            bytes memory facetCut = _diamondCut[diamondCutIndex];\\n            require(\\n                facetCut.length > 20,\\n                \\\"LibDiamond: Missing facet or selector info.\\\"\\n            );\\n            bytes32 currentSlot;\\n            assembly {\\n                currentSlot := mload(add(facetCut, 32))\\n            }\\n            bytes32 newFacet = bytes20(currentSlot);\\n            uint256 numSelectors = (facetCut.length - 20) / 4;\\n            uint256 position = 52;\\n\\n            // adding or replacing functions\\n            if (newFacet != 0) {\\n                // add and replace selectors\\n                for (\\n                    uint256 selectorIndex;\\n                    selectorIndex < numSelectors;\\n                    selectorIndex++\\n                ) {\\n                    bytes4 selector;\\n                    assembly {\\n                        selector := mload(add(facetCut, position))\\n                    }\\n                    position += 4;\\n                    bytes32 oldFacet = ds.facets[selector];\\n                    // add\\n                    if (oldFacet == 0) {\\n                        // update the last slot at then end of the function\\n                        slot.updateLastSlot = true;\\n                        ds.facets[selector] =\\n                            newFacet |\\n                            (bytes32(selectorsInSlot) << 64) |\\n                            bytes32(selectorSlotCount);\\n                        // clear selector position in slot and add selector\\n                        slot.selectorSlot =\\n                            (slot.selectorSlot &\\n                                ~(CLEAR_SELECTOR_MASK >>\\n                                    (selectorsInSlot * 32))) |\\n                            (bytes32(selector) >> (selectorsInSlot * 32));\\n                        selectorsInSlot++;\\n                        // if slot is full then write it to storage\\n                        if (selectorsInSlot == 8) {\\n                            ds.selectorSlots[selectorSlotCount] = slot\\n                                .selectorSlot;\\n                            slot.selectorSlot = 0;\\n                            selectorsInSlot = 0;\\n                            selectorSlotCount++;\\n                        }\\n                    } else {\\n                        // replace\\n                        require(\\n                            bytes20(oldFacet) != bytes20(newFacet),\\n                            \\\"Function cut to same facet.\\\"\\n                        );\\n                        // replace old facet address\\n                        ds.facets[selector] =\\n                            (oldFacet & CLEAR_ADDRESS_MASK) |\\n                            newFacet;\\n                    }\\n                }\\n            } else {\\n                // remove functions\\n                slot.updateLastSlot = true;\\n                for (\\n                    uint256 selectorIndex;\\n                    selectorIndex < numSelectors;\\n                    selectorIndex++\\n                ) {\\n                    bytes4 selector;\\n                    assembly {\\n                        selector := mload(add(facetCut, position))\\n                    }\\n                    position += 4;\\n                    bytes32 oldFacet = ds.facets[selector];\\n                    require(\\n                        oldFacet != 0,\\n                        \\\"Function doesn't exist. Can't remove.\\\"\\n                    );\\n                    // Current slot is empty so get the slot before it\\n                    if (slot.selectorSlot == 0) {\\n                        selectorSlotCount--;\\n                        slot.selectorSlot = ds.selectorSlots[selectorSlotCount];\\n                        selectorsInSlot = 8;\\n                    }\\n                    slot.oldSelectorsSlotCount = uint64(uint256(oldFacet));\\n                    slot.oldSelectorsInSlot = uint32(uint256(oldFacet >> 64));\\n                    // gets the last selector in the slot\\n                    bytes4 lastSelector = bytes4(\\n                        slot.selectorSlot << ((selectorsInSlot - 1) * 32)\\n                    );\\n                    if (slot.oldSelectorsSlotCount != selectorSlotCount) {\\n                        slot.oldSelectorSlot = ds.selectorSlots[slot\\n                            .oldSelectorsSlotCount];\\n                        // clears the selector we are deleting and puts the last selector in its place.\\n                        slot.oldSelectorSlot =\\n                            (slot.oldSelectorSlot &\\n                                ~(CLEAR_SELECTOR_MASK >>\\n                                    (slot.oldSelectorsInSlot * 32))) |\\n                            (bytes32(lastSelector) >>\\n                                (slot.oldSelectorsInSlot * 32));\\n                        // update storage with the modified slot\\n                        ds.selectorSlots[slot.oldSelectorsSlotCount] = slot\\n                            .oldSelectorSlot;\\n                        selectorsInSlot--;\\n                    } else {\\n                        // clears the selector we are deleting and puts the last selector in its place.\\n                        slot.selectorSlot =\\n                            (slot.selectorSlot &\\n                                ~(CLEAR_SELECTOR_MASK >>\\n                                    (slot.oldSelectorsInSlot * 32))) |\\n                            (bytes32(lastSelector) >>\\n                                (slot.oldSelectorsInSlot * 32));\\n                        selectorsInSlot--;\\n                    }\\n                    if (selectorsInSlot == 0) {\\n                        delete ds.selectorSlots[selectorSlotCount];\\n                        slot.selectorSlot = 0;\\n                    }\\n                    if (lastSelector != selector) {\\n                        // update last selector slot position info\\n                        ds.facets[lastSelector] =\\n                            (oldFacet & CLEAR_ADDRESS_MASK) |\\n                            bytes20(ds.facets[lastSelector]);\\n                    }\\n                    delete ds.facets[selector];\\n                }\\n            }\\n        }\\n        slot.newSelectorCount = selectorSlotCount * 8 + selectorsInSlot;\\n        if (slot.newSelectorCount != slot.originalSelectorCount) {\\n            ds.selectorCount = slot.newSelectorCount;\\n        }\\n        if (slot.updateLastSlot && selectorsInSlot > 0) {\\n            ds.selectorSlots[selectorSlotCount] = slot.selectorSlot;\\n        }\\n    }\\n\\n    // Diamond Loupe Functions\\n    ////////////////////////////////////////////////////////////////////\\n    /// These functions are expected to be called frequently\\n    /// by tools. Therefore the return values are tightly\\n    /// packed for efficiency. That means no padding with zeros.\\n\\n    // holder for variables to prevent stack too deep error\\n    struct Vars {\\n        uint256 defaultSize;\\n        uint256 selectorCount;\\n    }\\n\\n    // struct Facet {\\n    //     address facetAddress;\\n    //     bytes4[] functionSelectors;\\n    // }\\n    /// @notice Gets all facets and their selectors.\\n    /// @return facets_ Facet\\n    function facets() external override view returns (Facet[] memory facets_) {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage\\n            .diamondStorage();\\n        Vars memory vars;\\n        vars.selectorCount = ds.selectorCount;\\n        // get default size of arrays\\n        vars.defaultSize = vars.selectorCount;\\n        if (vars.defaultSize > 20) {\\n            vars.defaultSize = 20;\\n        }\\n        facets_ = new Facet[](vars.defaultSize);\\n        uint8[] memory numFacetSelectors = new uint8[](vars.defaultSize);\\n        uint256 numFacets;\\n        uint256 selectorIndex;\\n        // loop through function selectors\\n        for (\\n            uint256 slotIndex;\\n            selectorIndex < vars.selectorCount;\\n            slotIndex++\\n        ) {\\n            bytes32 slot = ds.selectorSlots[slotIndex];\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n                if (selectorIndex > vars.selectorCount) {\\n                    break;\\n                }\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex * 32));\\n                address facet = address(bytes20(ds.facets[selector]));\\n                bool continueLoop = false;\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (facets_[facetIndex].facetAddress == facet) {\\n                        uint256 arrayLength = facets_[facetIndex]\\n                            .functionSelectors\\n                            .length;\\n                        // if array is too small then enlarge it\\n                        if (numFacetSelectors[facetIndex] + 1 > arrayLength) {\\n                            bytes4[] memory biggerArray = new bytes4[](\\n                                arrayLength + vars.defaultSize\\n                            );\\n                            // copy contents of old array\\n                            for (uint256 i; i < arrayLength; i++) {\\n                                biggerArray[i] = facets_[facetIndex]\\n                                    .functionSelectors[i];\\n                            }\\n                            facets_[facetIndex].functionSelectors = biggerArray;\\n                        }\\n                        facets_[facetIndex]\\n                            .functionSelectors[numFacetSelectors[facetIndex]] = selector;\\n                        // probably will never have more than 255 functions from one facet contract\\n                        require(numFacetSelectors[facetIndex] < 255);\\n                        numFacetSelectors[facetIndex]++;\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n                if (continueLoop) {\\n                    continueLoop = false;\\n                    continue;\\n                }\\n                uint256 arrayLength = facets_.length;\\n                // if array is too small then enlarge it\\n                if (numFacets + 1 > arrayLength) {\\n                    Facet[] memory biggerArray = new Facet[](\\n                        arrayLength + vars.defaultSize\\n                    );\\n                    uint8[] memory biggerArray2 = new uint8[](\\n                        arrayLength + vars.defaultSize\\n                    );\\n                    for (uint256 i; i < arrayLength; i++) {\\n                        biggerArray[i] = facets_[i];\\n                        biggerArray2[i] = numFacetSelectors[i];\\n                    }\\n                    facets_ = biggerArray;\\n                    numFacetSelectors = biggerArray2;\\n                }\\n                facets_[numFacets].facetAddress = facet;\\n                facets_[numFacets].functionSelectors = new bytes4[](\\n                    vars.defaultSize\\n                );\\n                facets_[numFacets].functionSelectors[0] = selector;\\n                numFacetSelectors[numFacets] = 1;\\n                numFacets++;\\n            }\\n        }\\n        for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n            uint256 numSelectors = numFacetSelectors[facetIndex];\\n            bytes4[] memory selectors = facets_[facetIndex].functionSelectors;\\n            // setting the number of selectors\\n            assembly {\\n                mstore(selectors, numSelectors)\\n            }\\n        }\\n        // setting the number of facets\\n        assembly {\\n            mstore(facets_, numFacets)\\n        }\\n    }\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return _facetFunctionSelectors The selectors associated with a facet address.\\n    function facetFunctionSelectors(address _facet)\\n        external\\n        override\\n        view\\n        returns (bytes4[] memory _facetFunctionSelectors)\\n    {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage\\n            .diamondStorage();\\n        uint256 selectorCount = ds.selectorCount;\\n\\n        uint256 numSelectors;\\n        _facetFunctionSelectors = new bytes4[](selectorCount);\\n        uint256 selectorIndex;\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorIndex < selectorCount; slotIndex++) {\\n            bytes32 slot = ds.selectorSlots[slotIndex];\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n                if (selectorIndex > selectorCount) {\\n                    break;\\n                }\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex * 32));\\n                address facet = address(bytes20(ds.facets[selector]));\\n                if (_facet == facet) {\\n                    _facetFunctionSelectors[numSelectors] = selector;\\n                    numSelectors++;\\n                }\\n            }\\n        }\\n        // Set the number of selectors in the array\\n        assembly {\\n            mstore(_facetFunctionSelectors, numSelectors)\\n        }\\n    }\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses()\\n        external\\n        override\\n        view\\n        returns (address[] memory facetAddresses_)\\n    {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage\\n            .diamondStorage();\\n        uint256 selectorCount = ds.selectorCount;\\n\\n        facetAddresses_ = new address[](selectorCount);\\n        uint256 numFacets;\\n        uint256 selectorIndex;\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorIndex < selectorCount; slotIndex++) {\\n            bytes32 slot = ds.selectorSlots[slotIndex];\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n                if (selectorIndex > selectorCount) {\\n                    break;\\n                }\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex * 32));\\n                address facet = address(bytes20(ds.facets[selector]));\\n                bool continueLoop = false;\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (facet == facetAddresses_[facetIndex]) {\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n                if (continueLoop) {\\n                    continueLoop = false;\\n                    continue;\\n                }\\n                facetAddresses_[numFacets] = facet;\\n                numFacets++;\\n            }\\n        }\\n        // Set the number of facet addresses in the array\\n        assembly {\\n            mstore(facetAddresses_, numFacets)\\n        }\\n    }\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return The facet address.\\n    function facetAddress(bytes4 _functionSelector)\\n        external\\n        override\\n        view\\n        returns (address)\\n    {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage\\n            .diamondStorage();\\n        return address(bytes20(ds.facets[_functionSelector]));\\n    }\\n\\n    // This implements ERC-165.\\n    function supportsInterface(bytes4 _interfaceId)\\n        external\\n        override\\n        view\\n        returns (bool)\\n    {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage\\n            .diamondStorage();\\n        return ds.supportedInterfaces[_interfaceId];\\n    }\\n}\\n\",\"keccak256\":\"0x29145260d58860928f926560cfa4b97461e17cf6e6b80da0c7b8a25767197ce8\",\"license\":\"MIT\"},\"solc_0.7/diamond/facets/OwnershipFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"../libraries/LibDiamondStorage.sol\\\";\\nimport \\\"../interfaces/IERC173.sol\\\";\\n\\ncontract OwnershipFacet is IERC173 {\\n    function transferOwnership(address newOwner) external override {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage\\n            .diamondStorage();\\n        address currentOwner = ds.contractOwner;\\n        require(msg.sender == currentOwner, \\\"Must own the contract.\\\");\\n        ds.contractOwner = newOwner;\\n        emit OwnershipTransferred(currentOwner, newOwner);\\n    }\\n\\n    function owner() external override view returns (address) {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage\\n            .diamondStorage();\\n        return ds.contractOwner;\\n    }\\n}\\n\",\"keccak256\":\"0xea6c27229af783921ab1cef3c304f21238ab95dbaad0253b0d6fd0032187a071\",\"license\":\"MIT\"},\"solc_0.7/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\ninterface IDiamondCut {\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// This argument is tightly packed for gas efficiency\\n    /// That means no padding with zeros.\\n    /// Here is the structure of _diamondCut:\\n    /// _diamondCut = [\\n    ///     abi.encodePacked(facet, sel1, sel2, sel3, ...),\\n    ///     abi.encodePacked(facet, sel1, sel2, sel4, ...),\\n    ///     ...\\n    /// ]\\n    /// facet is the address of a facet\\n    /// sel1, sel2, sel3 etc. are four-byte function selectors.\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        bytes[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(bytes[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0x3a18f0b2d583792c3605ce32c7f16681e8370ee4a41f3b32e0856141e60f5f05\",\"license\":\"MIT\"},\"solc_0.7/diamond/interfaces/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet)\\n        external\\n        view\\n        returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses()\\n        external\\n        view\\n        returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector)\\n        external\\n        view\\n        returns (address facetAddress_);\\n}\\n\",\"keccak256\":\"0xd91792e8c4bf262da13d50f55d9f40d99051da210e58b1f91f99a6cef12b492f\",\"license\":\"MIT\"},\"solc_0.7/diamond/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc19b99fbeaeb943b6d12e6d631b6ae1738aaa498ee49f67caaccc6238fd0d458\",\"license\":\"MIT\"},\"solc_0.7/diamond/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n/* is ERC165 */\\ninterface IERC173 {\\n    /// @dev This emits when ownership of a contract changes.\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /// @notice Get the address of the owner\\n    /// @return The address of the owner.\\n    function owner() external view returns (address);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0x643e47511db8e5fe1b7993e73080c038613a7869fab91dd72d8366828a223806\",\"license\":\"MIT\"},\"solc_0.7/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge\\n*\\n* Implementation of Diamond facet.\\n* This is gas optimized by reducing storage reads and storage writes.\\n* This code is as complex as it is to reduce gas costs.\\n/******************************************************************************/\\n\\nimport {LibDiamondStorage} from \\\"./LibDiamondStorage.sol\\\";\\n\\nlibrary LibDiamond {\\n    event DiamondCut(bytes[] _diamondCut, address _init, bytes _calldata);\\n\\n    bytes32 constant CLEAR_ADDRESS_MASK = bytes32(\\n        uint256(0xffffffffffffffffffffffff)\\n    );\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n\\n    // This struct is used to prevent getting the error \\\"CompilerError: Stack too deep, try removing local variables.\\\"\\n    // See this article: https://medium.com/1milliondevs/compilererror-stack-too-deep-try-removing-local-variables-solved-a6bcecc16231\\n    struct SlotInfo {\\n        uint256 originalSelectorCount;\\n        uint256 newSelectorCount;\\n        bytes32 selectorSlot;\\n        uint256 oldSelectorsSlotCount;\\n        uint256 oldSelectorsInSlot;\\n        bytes32 oldSelectorSlot;\\n        bool updateLastSlot;\\n    }\\n\\n    // Non-standard internal function version of diamondCut\\n    // This code is almost the same as externalCut, except it is using\\n    // 'bytes[] memory _diamondCut' instead of 'bytes[] calldata _diamondCut'\\n    // and it DOES issue the DiamondCut event\\n    // The code is duplicated to prevent copying calldata to memory which\\n    // causes an error for an array of bytes arrays.\\n    function diamondCut(bytes[] memory _diamondCut) internal {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage\\n            .diamondStorage();\\n        SlotInfo memory slot;\\n        slot.originalSelectorCount = ds.selectorCount;\\n        uint256 selectorSlotCount = slot.originalSelectorCount / 8;\\n        uint256 selectorsInSlot = slot.originalSelectorCount % 8;\\n        if (selectorsInSlot > 0) {\\n            slot.selectorSlot = ds.selectorSlots[selectorSlotCount];\\n        }\\n        // loop through diamond cut\\n        for (\\n            uint256 diamondCutIndex;\\n            diamondCutIndex < _diamondCut.length;\\n            diamondCutIndex++\\n        ) {\\n            bytes memory facetCut = _diamondCut[diamondCutIndex];\\n            require(\\n                facetCut.length > 20,\\n                \\\"LibDiamond: Missing facet or selector info.\\\"\\n            );\\n            bytes32 currentSlot;\\n            assembly {\\n                currentSlot := mload(add(facetCut, 32))\\n            }\\n            bytes32 newFacet = bytes20(currentSlot);\\n            uint256 numSelectors = (facetCut.length - 20) / 4;\\n            uint256 position = 52;\\n\\n            // adding or replacing functions\\n            if (newFacet != 0) {\\n                // add and replace selectors\\n                for (\\n                    uint256 selectorIndex;\\n                    selectorIndex < numSelectors;\\n                    selectorIndex++\\n                ) {\\n                    bytes4 selector;\\n                    assembly {\\n                        selector := mload(add(facetCut, position))\\n                    }\\n                    position += 4;\\n                    bytes32 oldFacet = ds.facets[selector];\\n                    // add\\n                    if (oldFacet == 0) {\\n                        // update the last slot at then end of the function\\n                        slot.updateLastSlot = true;\\n                        ds.facets[selector] =\\n                            newFacet |\\n                            (bytes32(selectorsInSlot) << 64) |\\n                            bytes32(selectorSlotCount);\\n                        // clear selector position in slot and add selector\\n                        slot.selectorSlot =\\n                            (slot.selectorSlot &\\n                                ~(CLEAR_SELECTOR_MASK >>\\n                                    (selectorsInSlot * 32))) |\\n                            (bytes32(selector) >> (selectorsInSlot * 32));\\n                        selectorsInSlot++;\\n                        // if slot is full then write it to storage\\n                        if (selectorsInSlot == 8) {\\n                            ds.selectorSlots[selectorSlotCount] = slot\\n                                .selectorSlot;\\n                            slot.selectorSlot = 0;\\n                            selectorsInSlot = 0;\\n                            selectorSlotCount++;\\n                        }\\n                    } else {\\n                        // replace\\n                        require(\\n                            bytes20(oldFacet) != bytes20(newFacet),\\n                            \\\"Function cut to same facet.\\\"\\n                        );\\n                        // replace old facet address\\n                        ds.facets[selector] =\\n                            (oldFacet & CLEAR_ADDRESS_MASK) |\\n                            newFacet;\\n                    }\\n                }\\n            } else {\\n                // remove functions\\n                slot.updateLastSlot = true;\\n                for (\\n                    uint256 selectorIndex;\\n                    selectorIndex < numSelectors;\\n                    selectorIndex++\\n                ) {\\n                    bytes4 selector;\\n                    assembly {\\n                        selector := mload(add(facetCut, position))\\n                    }\\n                    position += 4;\\n                    bytes32 oldFacet = ds.facets[selector];\\n                    require(\\n                        oldFacet != 0,\\n                        \\\"Function doesn't exist. Can't remove.\\\"\\n                    );\\n                    // Current slot is empty so get the slot before it\\n                    if (slot.selectorSlot == 0) {\\n                        selectorSlotCount--;\\n                        slot.selectorSlot = ds.selectorSlots[selectorSlotCount];\\n                        selectorsInSlot = 8;\\n                    }\\n                    slot.oldSelectorsSlotCount = uint64(uint256(oldFacet));\\n                    slot.oldSelectorsInSlot = uint32(uint256(oldFacet >> 64));\\n                    // gets the last selector in the slot\\n                    bytes4 lastSelector = bytes4(\\n                        slot.selectorSlot << ((selectorsInSlot - 1) * 32)\\n                    );\\n                    if (slot.oldSelectorsSlotCount != selectorSlotCount) {\\n                        slot.oldSelectorSlot = ds.selectorSlots[slot\\n                            .oldSelectorsSlotCount];\\n                        // clears the selector we are deleting and puts the last selector in its place.\\n                        slot.oldSelectorSlot =\\n                            (slot.oldSelectorSlot &\\n                                ~(CLEAR_SELECTOR_MASK >>\\n                                    (slot.oldSelectorsInSlot * 32))) |\\n                            (bytes32(lastSelector) >>\\n                                (slot.oldSelectorsInSlot * 32));\\n                        // update storage with the modified slot\\n                        ds.selectorSlots[slot.oldSelectorsSlotCount] = slot\\n                            .oldSelectorSlot;\\n                        selectorsInSlot--;\\n                    } else {\\n                        // clears the selector we are deleting and puts the last selector in its place.\\n                        slot.selectorSlot =\\n                            (slot.selectorSlot &\\n                                ~(CLEAR_SELECTOR_MASK >>\\n                                    (slot.oldSelectorsInSlot * 32))) |\\n                            (bytes32(lastSelector) >>\\n                                (slot.oldSelectorsInSlot * 32));\\n                        selectorsInSlot--;\\n                    }\\n                    if (selectorsInSlot == 0) {\\n                        delete ds.selectorSlots[selectorSlotCount];\\n                        slot.selectorSlot = 0;\\n                    }\\n                    if (lastSelector != selector) {\\n                        // update last selector slot position info\\n                        ds.facets[lastSelector] =\\n                            (oldFacet & CLEAR_ADDRESS_MASK) |\\n                            bytes20(ds.facets[lastSelector]);\\n                    }\\n                    delete ds.facets[selector];\\n                }\\n            }\\n        }\\n        slot.newSelectorCount = selectorSlotCount * 8 + selectorsInSlot;\\n        if (slot.newSelectorCount != slot.originalSelectorCount) {\\n            ds.selectorCount = slot.newSelectorCount;\\n        }\\n        if (slot.updateLastSlot && selectorsInSlot > 0) {\\n            ds.selectorSlots[selectorSlotCount] = slot.selectorSlot;\\n        }\\n        emit DiamondCut(_diamondCut, address(0), new bytes(0));\\n    }\\n}\\n\",\"keccak256\":\"0x64f4802932ada84eb152ce375e1c472cf8395b13d04d723a8e0a583e8ba7919b\",\"license\":\"MIT\"},\"solc_0.7/diamond/libraries/LibDiamondStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\n\\nlibrary LibDiamondStorage {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\n        \\\"diamond.standard.diamond.storage\\\"\\n    );\\n\\n    struct DiamondStorage {\\n        // owner of the contract\\n        address contractOwner;\\n        // maps function selectors to the facets that execute the functions.\\n        // and maps the selectors to the slot in the selectorSlots array.\\n        // and maps the selectors to the position in the slot.\\n        // func selector => address facet, uint32 slotIndex, uint64 slotsIndex\\n        mapping(bytes4 => bytes32) facets;\\n        // array of slots of function selectors.\\n        // each slot holds 8 function selectors.\\n        mapping(uint256 => bytes32) selectorSlots;\\n        // The number of function selectors in selectorSlots\\n        uint256 selectorCount;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x17e971b2e73a8a8d7f8251edb68f78c3a45c286351a71e7e6df82b427bb739d3\",\"license\":\"MIT\"}},\"version\":1}",
  "contractFilepath": "solc_0.7/diamond/Diamantaire.sol"
}